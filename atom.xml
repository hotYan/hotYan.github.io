<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HotYan&#39;s Blog</title>
  
  <subtitle>程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hotkang.cn/"/>
  <updated>2018-08-29T10:51:06.595Z</updated>
  <id>https://hotkang.cn/</id>
  
  <author>
    <name>hotYan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS数据类型</title>
    <link href="https://hotkang.cn/2018/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://hotkang.cn/2018/JS数据类型/</id>
    <published>2018-08-28T03:06:55.000Z</published>
    <updated>2018-08-29T10:51:06.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览-完结"><a href="#概览-完结" class="headerlink" title="概览[完结]"></a>概览<span style="font-size:.5em">[完结]</span></h2><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul><li>Object类型</li><li>Array类型</li><li>Date类型</li><li>RegExp类型</li><li>Function类型</li><li>基本包装类型</li><li>单体内置对象</li></ul><a id="more"></a><p><br><br><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>JavaScript高级程序设计</p></blockquote><p><br><br><br></p><h2 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><hr><h3 id="一、typeof操作符"><a href="#一、typeof操作符" class="headerlink" title="一、typeof操作符"></a>一、typeof操作符</h3><p>检测给定变量的数据类型，将返回下列某个字符串：</p><ul><li><code>&quot;undefined&quot;</code> ____值未定义</li><li><code>&quot;boolean&quot;</code> ____布尔值</li><li><code>&quot;string&quot;</code> ____字符串</li><li><code>&quot;number&quot;</code> ____数值</li><li><code>&quot;object&quot;</code> ____对象|null</li><li><code>&quot;function&quot;</code> ____函数</li></ul><p>typeof操作符可以是变量，也可以是数组字面量。typeof不是一个函数，圆括号不是必需的。例：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var message = &quot;some string&quot;;</span><br><span class="line">console.log(typeof(message));   //string</span><br><span class="line">console.log(typeof message);    //string</span><br><span class="line">console.log(typeof 95);         //number</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="二、undefined类型"><a href="#二、undefined类型" class="headerlink" title="二、undefined类型"></a>二、undefined类型</h3><p>变量只声明未定义时，值为undefined。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var message;</span><br><span class="line">//  var age;</span><br><span class="line">//  console.log(age);            //报错</span><br><span class="line">console.log(message);           // undefined</span><br><span class="line">console.log(typeof message);    //undefined</span><br><span class="line">console.log(typeof age);        //undefined</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="三、null类型"><a href="#三、null类型" class="headerlink" title="三、null类型"></a>三、null类型</h3><p>逻辑角度，null值表示一个空对象指针，所以typeof检测null值时返回object。保存对象的变量还没有真正的保存对象时，就应该明确的让该变量保存null值。</p><p><br></p><h3 id="四、Boolean类型"><a href="#四、Boolean类型" class="headerlink" title="四、Boolean类型"></a>四、Boolean类型</h3><p>两个字面量：<code>true</code>、<code>false</code>；与数字值不是一回事，true不一定等于1，false不一定等于0；且区分大小写。</p><blockquote><p>Boolean()：将一个值转换为对应的Boolean值</p></blockquote><p>转换规则对理解流控语句【if语句、while语句等】自动执行相应的Boolean转换非常重要。</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:left">转换为true值</th><th style="text-align:left">转换为false值</th></tr></thead><tbody><tr><td style="text-align:center">Boolean</td><td style="text-align:left">true</td><td style="text-align:left">false</td></tr><tr><td style="text-align:center">String</td><td style="text-align:left">任何非空字符串</td><td style="text-align:left">“”(空字符串)</td></tr><tr><td style="text-align:center">Number</td><td style="text-align:left">任何非0数字值(包括无穷大)</td><td style="text-align:left">0、NaN</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:left">任何对象</td><td style="text-align:left">null</td></tr><tr><td style="text-align:center">undefined</td><td style="text-align:left">N/A</td><td style="text-align:left">undefined</td></tr></tbody></table><p><br></p><h3 id="五、Number类型"><a href="#五、Number类型" class="headerlink" title="五、Number类型"></a>五、Number类型</h3><blockquote><p>数值范围[ -Infinity, Infinity ]</p></blockquote><p>想要确定一个数值是不是有穷，即是不是位于最小和最大之间，可以使用<code>isFinite()</code>函数:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var result = Number.MAX_VALUE + Number.MIN_VALUE;</span><br><span class="line">console.log(isFinite(result));          //true</span><br></pre></td></tr></table></figure><p></p><p><br></p><blockquote><p>NaN:非数值（Not a Number）</p></blockquote><p>用于表示一个本来要返回数值的操作数未返回数值的情况（这样不会抛出错误）。</p><p>两个特点：</p><ol><li><p>任何涉及NaN的操作（NaN/10、10/NaN）都会返回NaN；在其他编程语言，任何数值除以非数值都会导致错误。</p></li><li><p>NaN与任何值都不相等，包括NaN本身。</p></li></ol><p><code>isNaN()</code>:接收一个任何类型的参数，判断参数是否“不是数值”；会尝试将参数转换为数值，将不是数值的值直接转换为数值，任何不能被转换为数值的值都会返回true；<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(isNaN(NaN));    //true</span><br><span class="line">console.log(isNaN(10));     //false_10是数值</span><br><span class="line">console.log(isNaN(&apos;10&apos;));   //false_可以转换成数值10</span><br><span class="line">console.log(isNaN(&quot;blue&quot;)); //true_不能转换成数值</span><br><span class="line">console.log(isNaN(true));   //false_可以被转换成数值1</span><br></pre></td></tr></table></figure><p></p><p><br></p><blockquote><p>数值转换:非数值转换成数值</p></blockquote><p><code>Number()</code>用于任何数据类型；<code>parseInt()</code>和<code>parseFloat()</code>专门用于把字符串转换成数组；同样的输入会有不同的结果。</p><p>Number()转换规则：</p><ul><li><p>数值，简单传入返回;</p></li><li><p>Boolean值，true-&gt;1,false-&gt;0;</p></li><li><p>null-&gt;返回0;</p></li><li><p>undefined-&gt;返回NaN;</p></li><li><p>string，遵循规则如下：</p><ul><li><p>只包含数字-&gt;转换为十进制数值，’1’-&gt;1,’01’-&gt;1;</p></li><li><p>包含有效浮点格式-&gt;对应的浮点数值（前导0被忽略）；</p></li><li><p>包含有效十六进制格式-&gt;转换为相同大小的十进制整数值；</p></li><li><p>字符串为空-&gt;0;</p></li><li><p>包含上述格式之外的字符-&gt;NaN.</p></li></ul></li><li><p>对象，调用valueOf(),依照上面规则转换返回的值；若未NaN，则调用toString(),依照前面规则转换返回的字符串值。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number(&quot;hello world&quot;));     //NaN_不包含任何有意义的数值</span><br><span class="line">console.log(Number(&quot;&quot;));                //0 _空字符串</span><br><span class="line">console.log(Number(&quot;000011&quot;));          //11_忽略前导0</span><br><span class="line">console.log(Number(true));              //1</span><br></pre></td></tr></table></figure><p><br></p><p><code>parseInt()</code>:忽略字符串前面的空格，直至找到第一个非空字符。如果第一个字符不是数字或者负号，返回NaN；因此，parseInt()转换空字符串返回NaN（<code>Number()</code>对空字符串返回0）。提供第二个参数：转换时使用的基数。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(parseInt(&quot;10&quot;,2));  //2  按二进制解析</span><br><span class="line">console.log(parseInt(&quot;10&quot;,8));  //8  按八进制解析</span><br><span class="line">console.log(parseInt(&quot;10&quot;,10)); //10  按十进制解析</span><br><span class="line">console.log(parseInt(&quot;10&quot;,16)); //16  按十六进制解析</span><br></pre></td></tr></table></figure><p></p><p><br></p><p><code>parseFloat()</code>:忽略前导0，解析直至遇到一个无效的浮点数字字符为止；①只有第一个小数点有效，第二个小数点无效；②十六进制格式字符串始终会被转换成0；③若字符串包含一个可解析的整数（没有小数点，或者小数点后都是0)，返回整数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(parseFloat(&quot;22.34.5&quot;));     //22.34 </span><br><span class="line">console.log(parseFloat(&quot;0908.5&quot;));      //908.5</span><br><span class="line">console.log(parseFloat(&quot;0xA&quot;));         //0   </span><br><span class="line">console.log(parseFloat(&quot;1234bule&quot;));    //1234  </span><br><span class="line">console.log(parseFloat(&quot;1234.000&quot;));    //1234  </span><br><span class="line">console.log(parseFloat(&quot;22.5&quot;));        //22.5  </span><br><span class="line">console.log(parseFloat(&quot;3.215e7&quot;));     //32150000</span><br></pre></td></tr></table></figure><p></p><p><br></p><h3 id="六、String类型"><a href="#六、String类型" class="headerlink" title="六、String类型"></a>六、String类型</h3><p>string类型包含一些特殊的字符字面量-转义序列；用于表示非打印字符或其他用途；字符串一旦创建值是不可变得，要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值得字符串填充该变量；</p><blockquote><p>转换为字符串</p></blockquote><p>把一个数字转为一个字符串有两种方式。①<code>toString()</code>:返回相应值得字符串表现;数值、布尔值、对象、字符都有toString()方法并返回字符串的一个副本，但null和undefined没有toString()方法。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log((11).toString());   //字符串&quot;11&quot;</span><br><span class="line">console.log((true).toString());   //字符串&quot;true&quot;</span><br></pre></td></tr></table></figure><p></p><p>多数情况下，不用传参，但在调用数值的toString()方法时，可以传递一个参数：输出数值的基数；<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log((11).toString());   //十进制字符串&quot;11&quot;</span><br><span class="line">console.log((11).toString(8));   //八进制字符串&quot;13&quot;</span><br><span class="line">console.log((11).toString(16));   //十六进制字符串&quot;b&quot;</span><br></pre></td></tr></table></figure><p></p><p>②<code>String()</code>:在不知道要转换的值是null或者undefined的情况下可以使用，能将任何类型的值转换为字符串；</p><ol><li>值有toString()方法，调用该方法并返回相应结果；</li><li>null，返回”null”;</li><li>undefined,返回”undefined”;</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(String(11));        //字符串&quot;11&quot;</span><br><span class="line">console.log(String(true));      //字符串&quot;true&quot;</span><br><span class="line">console.log(String(null));      //字符串&quot;null&quot;</span><br><span class="line">console.log(String(undefined)); //字符串&quot;undefined&quot;</span><br></pre></td></tr></table></figure><p><a href="http://www.w3school.com.cn/jsref/jsref_obj_string.asp" target="_blank" rel="noopener">more&gt;&gt;</a></p><p><br><br><br></p><h2 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h2><hr><h3 id="一、Object类型"><a href="#一、Object类型" class="headerlink" title="一、Object类型"></a>一、Object类型</h3><p><a href="https://hotkang.cn/2018/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BA%8C/#Object%E7%B1%BB%E5%9E%8B">more&gt;&gt;</a></p><p><br></p><h3 id="二、-Array类型"><a href="#二、-Array类型" class="headerlink" title="二、 Array类型"></a>二、 Array类型</h3><h4 id="①创建"><a href="#①创建" class="headerlink" title="①创建"></a>①创建</h4><blockquote><p>Arrary构造函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var hotyan = new Array(3);    //创建一个包含3项的数值</span><br><span class="line">var hotyan = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);    //创建一个包含三个字符串的数值</span><br><span class="line">var hotyan = Array(3);      //可以省略new操作符</span><br><span class="line">var hotyan = Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>数组字面量表示法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var hotyan = []; //创建一个空数组</span><br><span class="line">var hotyan = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]; //创建一个包含三个字符串的数组</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>length属性</p></blockquote><p>不是只读，可以从数组的末尾移除项或向数组添加新项；将length的属性设置为小于数组项数的值，被移除的项显示为undefined；反之，新增的项也是undefined；由于数组最后一项的索引始终是length-1，因此下一个新项的位置就是length：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var colors = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;];    //创建一个包含3个字符串的数组</span><br><span class="line">colors[colors.length] = &apos;black&apos;;    //在数组最后，即位置4添加新项</span><br></pre></td></tr></table></figure><p></p><p><br></p><h4 id="②检测"><a href="#②检测" class="headerlink" title="②检测"></a>②检测</h4><blockquote><p>instanceof</p></blockquote><blockquote><p>Array.isArray()</p></blockquote><p><br></p><h4 id="③转换方法"><a href="#③转换方法" class="headerlink" title="③转换方法"></a>③转换方法</h4><blockquote><p>valueOf():返回数组本身</p></blockquote><blockquote><p>toString():返回以”,“隔开，每个值字符串形式拼接而成的字符串</p></blockquote><blockquote><p>toLocalString()：</p></blockquote><blockquote><p>join()：使用不同的分隔符，返回包含所有数组项的字符串</p></blockquote><p><br></p><h4 id="④栈方法"><a href="#④栈方法" class="headerlink" title="④栈方法"></a>④栈方法</h4><blockquote><p>push()：接收任意数量参数，逐个添加到数组末尾，返回修改后 <strong>数组长度</strong>。</p><p>pop()：移除数组末尾最后一项，减少数组的length值，返回 <strong>移除的项</strong>。</p></blockquote><p><br></p><h4 id="⑤队列方法"><a href="#⑤队列方法" class="headerlink" title="⑤队列方法"></a>⑤队列方法</h4><blockquote><p>push()：向数组末端添加项，返回修改后 <strong>数组长度</strong></p></blockquote><p>例：在数组 arr 中，查找值与 item 相等的元素出现的所有位置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function findAllOccurrences(arr, target) &#123;</span><br><span class="line">    var Arr =[];</span><br><span class="line">    for(var i = 0;i&lt;arr.length;i++)</span><br><span class="line">        if(arr[i]==target)</span><br><span class="line">            Arr.push(i);</span><br><span class="line">    console.log(Arr);</span><br><span class="line">    return Arr;</span><br><span class="line">&#125;</span><br><span class="line">findAllOccurrences(&apos;abcdefabc&apos;,&apos;a&apos;);   // [0, 6]</span><br></pre></td></tr></table></figure><p></p><p><br></p><blockquote><p>pop()：移除数组末端项并返回 <strong>被删除的项</strong></p></blockquote><blockquote><p>shift()：移除数组第一项并返回 <strong>该项</strong>，数组长度减1</p></blockquote><p><br></p><blockquote><p>unshift()：在数组前端添加任意个项并返回 <strong>新数组长度</strong></p></blockquote><p>例：在数组 arr 开头添加元素 item。不要直接修改数组 arr，结果返回新的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function prepend(arr, item) &#123;</span><br><span class="line">    var Arr = arr.concat();     //复制一个新数组</span><br><span class="line">    Arr.unshift(item);      //开头添加一位后返回</span><br><span class="line">    return Arr;  </span><br><span class="line">&#125;</span><br><span class="line">prepend([1,2,3,4],10);      //[10,1,2,3,4]</span><br></pre></td></tr></table></figure><p><br></p><h4 id="⑥重排序方法"><a href="#⑥重排序方法" class="headerlink" title="⑥重排序方法"></a>⑥重排序方法</h4><blockquote><p>reverse()：反转数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">arr.reverse();</span><br><span class="line">alert(arr);     //[5，4，3，2，1]</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>sort()：默认升序，调用toString()方法，比较的是 <strong>字符串</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0,1,5,10,15];</span><br><span class="line">arr.sort();</span><br><span class="line">alert(arr);     //0,1,10,15,5_不正确</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&gt;compare()：比较函数</span><br></pre></td></tr></table></figure><p>function compare(a,b){<br>if(a &lt; b){<br>return -1;<br>}<br>else if(a &gt; b){<br>return 1;<br>}<br>else{<br>return 0;<br>}<br>}<br>var arr = [0,1,5,10,15];<br>arr.sort(compare);<br>alert(arr); //0,1,5,10,15_正确<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">&gt;valueOf()：数组类型或返回数组类型的对象类型</span><br></pre></td></tr></table></figure><p></p><p>function compare(a,b){<br>return b-a;<br>}<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### ⑦操作方法</span><br><span class="line">&gt;concat()：基于当前数组的所有项创建一个新数组</span><br><span class="line">    </span><br><span class="line">先创建当前数组的一个副本，将接收到的参数添加到这个副本末尾。没有参数即复制当前数组内容并返回副本，传递的参数可以不是数组、一个或多个数组。</span><br></pre></td></tr></table></figure><p></p><pre><code>var a = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;];var b = a.concat(&quot;a&quot;,[&quot;b&quot;,&quot;c&quot;]);alert(a);       //A,B,C,Dalert(b);       //A,B,C,D,a,b,c</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line">例：在数组 arr 末尾添加元素 item。不要直接修改数组 arr，结果返回新的数组</span><br></pre></td></tr></table></figure><pre><code>function append(arr, item) {    return arr.concat(item);}append([1,2,3,4],10);//[1, 2, 3, 4, 10]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：合并数组 arr1 和数组 arr2。不要直接修改数组 arr，结果返回新的数组：</span><br></pre></td></tr></table></figure><pre><code>function concat(arr1, arr2) {    return arr1.concat(arr2);}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&gt;slice(起始位置，结束位置)：基于当前数组中的一或多个项创建一个新数组</span><br><span class="line"></span><br><span class="line">可以接收两个参数（要返回项的起始位置，结束位置）；</span><br><span class="line">- 一个参数时：返回该参数指定位置到当前数组末尾的所有项；</span><br><span class="line">- 两个参数时：返回起始位置和结束位置（不包括结束位置）之间的项。</span><br><span class="line">- 若参数为负，用数组长度加上该数来确定相应的位置；</span><br><span class="line">- 若结束位置小于起始位置，返回空数组。</span><br><span class="line"></span><br><span class="line">例：删除数组 arr 最后一个元素。不要直接修改数组 arr，结果返回新的数组：</span><br></pre></td></tr></table></figure><pre><code>function truncate(arr) {    return arr.slice(0,(arr.length)-1);}truncate([1,2,3,4]);    //[1, 2, 3]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例：删除数组 arr 第一个元素。不要直接修改数组 arr，结果返回新的数组</span><br></pre></td></tr></table></figure><pre><code>function curtail(arr) {    return arr.slice(1);//返回除第一个的新数组}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&gt;splice()：主要用途是向数组的中部插入项</span><br><span class="line"></span><br><span class="line">- 删除：删除任意数量的项，接收两个参数（要删除的第一项的位置，删除项数）</span><br><span class="line">- 插入：向指定位置插入任意数量的项，需提供三个参数（起始位置，0：要删除的项数，要插入的项）</span><br><span class="line">- 替换：向指定位置插入任意数量的项，且同时删除任意数量的项，三个参数（起始位置，要删除的项数，要插入的任意数量的项）</span><br><span class="line"></span><br><span class="line">例：在数组 arr 的 index 处添加元素 item。不要直接修改数组 arr，结果返回新的数组：</span><br></pre></td></tr></table></figure><pre><code>function insert(arr, item, index) {    var Arr = arr.concat();    Arr.splice(index-1,0,item);    console.log(Arr);    return Arr;}insert([1,2,3,4],&apos;z&apos;,2);    //</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">#### ⑧位置方法</span><br><span class="line">都接收两个参数【要查找的项,（可选）查找起点位置的索引】；都返回要查找的项在数组中的**位置**，没有找到的情况下返回-1；</span><br><span class="line"></span><br><span class="line">&gt; `indexOf()`：从数组的开头（位置0）开始向后查找。返回位置。</span><br><span class="line"></span><br><span class="line">例：找出元素 item 在给定数组 arr 中的位置,如果数组中存在 item，则返回元素在数组中的位置，否则返回 -1：</span><br></pre></td></tr></table></figure><pre><code>function indexOf(arr, item) {    return arr.indexOf(item);}indexOf([1,2,3,4],3);   //2</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例：找出数组 arr 中重复出现过的元素</span><br></pre></td></tr></table></figure><pre><code>function duplicates(arr) {    var Arr = [];    for(var i = 0;i&lt;arr.length;i++)        for(var j = i+1;j&lt;arr.length;j++)            if((arr[i]==arr[j])&amp;&amp;(Arr.indexOf(i)==-1))                Arr.push(arr[i]);          return Arr.sort();}duplicates([1, 2, 4, 4, 3, 3, 1, 5, 3]);  //[ 1, 3, 4 ]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;`lastIndexOf()`：从数组的末尾开始向前查找。</span><br><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">#### ⑨迭代方法</span><br><span class="line">最相似的是every()和some()，都用于查询数组中的项是否满足某个条件；filter()用于查询满足某个条件的所有数组项；map()用于创建包含项与另一个数组一一对应的数组；forEach()本质上与for循环迭代数组一样。均不影响原数组。</span><br><span class="line"></span><br><span class="line">&gt;`every()`：对数组中每一项运行给定函数，函数对每一项都为true时 **返回true** </span><br><span class="line"></span><br><span class="line">&gt;`some()`：对数组中每一项运行给定函数，函数对任一项为true时 **返回true**</span><br><span class="line"></span><br><span class="line">&gt;`filter()` ：对数组中每一项运行给定函数，返回**函数会返回true的项组成的数组** </span><br><span class="line"></span><br><span class="line">例如：移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组</span><br></pre></td></tr></table></figure><pre><code>function remove(arr, item) {    return arr.filter(function(items,index,arr){        return (items!=item);    });}remove([1,2,3,4,2],2);      //[1,3,4]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">例如：移除数组 arr 中的所有值与 item 相等的元素，直接在给定的 arr 数组上进行操作，并将结果返回：</span><br></pre></td></tr></table></figure><pre><code>function removeWithoutCopy(arr, item) {    for(var i = 0;i &lt; arr.length;i++){        if(arr[i] == item){            arr.splice(i,1);            i--;        }    }    return arr;}removeWithoutCopy([1,2,2,3,4,2,2],2);//</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">&gt;`forEach()` ：对数组中每一项运行给定函数，没有返回值</span><br><span class="line"></span><br><span class="line">例：统计数组 arr 中值等于 item 的元素出现的次数</span><br></pre></td></tr></table></figure><pre><code>function count(arr, item) {    var count = 0;    arr.forEach(function(items,index,arr){        if(items == item)            count+=1;    });    console.log(count);    return count;}count([1,2,4,4,3,4,3],4);//3</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">&gt;`map()` ：对数组中每一项运行给定函数，返回**每次函数调用的结果组成的数组** </span><br><span class="line"></span><br><span class="line">例：为数组 arr 中的每个元素求二次方。不要直接修改数组 arr，结果返回新的数组</span><br></pre></td></tr></table></figure><pre><code>function square(arr) {    return arr.map(function(item,index,arr){        return item*item;      });}square([1, 2, 3, 4]);//[1, 4, 9, 16]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;br/&gt;</span><br><span class="line">   </span><br><span class="line">#### 10.归并方法</span><br><span class="line">都会迭代数组的每一项，构建一个最终返回的值；用于求数组中的所有值之和；方法都接收两个参数（在每一项上调用的函数，可选的作为归并基础的初始值）；传给reduce()和reduceRight()的函数接收4个参数（前一个值，当前值，项的索引，数组对象）。</span><br><span class="line"></span><br><span class="line">&gt;`reduce()`：从第一项开始遍历</span><br><span class="line"></span><br><span class="line">例如：计算给定数组 arr 中所有元素的总和：</span><br></pre></td></tr></table></figure><pre><code>function sum(arr) {    return arr.reduce(function(prev,cur,index,arr){        return prev+cur;    });}sum([1,2,3,4]);</code></pre><p><code>`</code></p><p><br></p><blockquote><p><code>reduceRight()</code>：从最后一项开始遍历</p></blockquote><p><br><br><br></p><h3 id="三、-Date类型"><a href="#三、-Date类型" class="headerlink" title="三、 Date类型"></a>三、 Date类型</h3><p><a href="https://hotkang.cn/2018/Effects/">more&gt;&gt;</a></p><p><br></p><h3 id="四、-RegExp类型"><a href="#四、-RegExp类型" class="headerlink" title="四、 RegExp类型"></a>四、 RegExp类型</h3><p><br></p><h3 id="五、-Function类型"><a href="#五、-Function类型" class="headerlink" title="五、 Function类型"></a>五、 Function类型</h3><p><a href="https://hotkang.cn/2018/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%80/#Function%E7%B1%BB%E5%9E%8B">more&gt;&gt;</a></p><p><br></p><h3 id="六、基本包装类型"><a href="#六、基本包装类型" class="headerlink" title="六、基本包装类型"></a>六、基本包装类型</h3><h4 id="1-Boolean类型-建议永远不要使用"><a href="#1-Boolean类型-建议永远不要使用" class="headerlink" title="1.Boolean类型(建议永远不要使用)"></a>1.Boolean类型(建议永远不要使用)</h4><h4 id="2-Number类型"><a href="#2-Number类型" class="headerlink" title="2.Number类型"></a>2.Number类型</h4><blockquote><p>toFixed()</p></blockquote><blockquote><p>toExponential()</p></blockquote><blockquote><p>toPrecision()</p></blockquote><p><br></p><h4 id="3-String类型"><a href="#3-String类型" class="headerlink" title="3.String类型"></a>3.String类型</h4><blockquote><p>字符方法</p></blockquote><blockquote><p>字符串操作方法</p></blockquote><blockquote><p>字符串位置方法</p></blockquote><blockquote><p>trim()方法</p></blockquote><blockquote><p>字符串大小写转换方法</p></blockquote><blockquote><p>字符串的模式匹配方法</p></blockquote><blockquote><p>localCompare()方法</p></blockquote><blockquote><p>formCharCode()方法</p></blockquote><blockquote><p>HTML方法</p></blockquote><p><br></p><h3 id="七、单体内置对象"><a href="#七、单体内置对象" class="headerlink" title="七、单体内置对象"></a>七、单体内置对象</h3><h4 id="1-Global对象"><a href="#1-Global对象" class="headerlink" title="1.Global对象"></a>1.Global对象</h4><p><br></p><h4 id="2-Math对象"><a href="#2-Math对象" class="headerlink" title="2.Math对象"></a>2.Math对象</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览-完结&quot;&gt;&lt;a href=&quot;#概览-完结&quot; class=&quot;headerlink&quot; title=&quot;概览[完结]&quot;&gt;&lt;/a&gt;概览&lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;h4 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Undefined&lt;/li&gt;&lt;li&gt;Null&lt;/li&gt;&lt;li&gt;Boolean&lt;/li&gt;&lt;li&gt;Number&lt;/li&gt;&lt;li&gt;String&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;Object类型&lt;/li&gt;&lt;li&gt;Array类型&lt;/li&gt;&lt;li&gt;Date类型&lt;/li&gt;&lt;li&gt;RegExp类型&lt;/li&gt;&lt;li&gt;Function类型&lt;/li&gt;&lt;li&gt;基本包装类型&lt;/li&gt;&lt;li&gt;单体内置对象&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="Notes" scheme="https://hotkang.cn/tags/Notes/"/>
    
      <category term="JS" scheme="https://hotkang.cn/tags/JS/"/>
    
      <category term="数据类型" scheme="https://hotkang.cn/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Effects</title>
    <link href="https://hotkang.cn/2018/Effects/"/>
    <id>https://hotkang.cn/2018/Effects/</id>
    <published>2018-08-18T16:57:07.000Z</published>
    <updated>2018-08-29T07:22:42.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果概览-持续完善"><a href="#效果概览-持续完善" class="headerlink" title="效果概览 [持续完善]]"></a>效果概览 <span style="font-size:.5em">[持续完善]]</span></h2><ol><li><h3 id="AboutTime"><a href="#AboutTime" class="headerlink" title="AboutTime"></a>AboutTime</h3>…</li></ol><p><br><br><br></p><a id="more"></a><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p><a href="https://github.com/hotYan/Effects" target="_blank" rel="noopener">源码链接</a></p></blockquote><p><br><br><br></p><h2 id="AboutTime-1"><a href="#AboutTime-1" class="headerlink" title="AboutTime"></a>AboutTime</h2><hr><h3 id="1-Date-方法"><a href="#1-Date-方法" class="headerlink" title="1.Date()方法"></a>1.Date()方法</h3><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">getTime()</td><td style="text-align:left">返回日期的毫秒数，与valueOf()返回值相同</td></tr><tr><td style="text-align:center">getFullYear()</td><td style="text-align:left">取得4位数的年份</td></tr><tr><td style="text-align:center">getMonth()</td><td style="text-align:left">返回0~11月</td></tr><tr><td style="text-align:center">getDate()</td><td style="text-align:left">返回1~31天</td></tr><tr><td style="text-align:center">getDay()</td><td style="text-align:left">返回星期0~6，0表示星期日</td></tr><tr><td style="text-align:center">getHours()</td><td style="text-align:left">返回小时数0~23</td></tr><tr><td style="text-align:center">getMinutes()</td><td style="text-align:left">返回分钟数0~59</td></tr><tr><td style="text-align:center">getSeconds()</td><td style="text-align:left">返回秒数0~59</td></tr><tr><td style="text-align:center">setDate()</td><td style="text-align:left">设置日期中的天数</td></tr></tbody></table><p><a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="noopener">more&gt;&gt;</a></p><p><br><br><br></p><h3 id="2-Math对象"><a href="#2-Math对象" class="headerlink" title="2.Math对象"></a>2.Math对象</h3><blockquote><h4 id="Math对象的属性"><a href="#Math对象的属性" class="headerlink" title="Math对象的属性"></a>Math对象的属性</h4></blockquote><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">Math.E</td><td style="text-align:left">自然对数的底数，即常量e的值</td></tr><tr><td style="text-align:center">Math.LN10</td><td style="text-align:left">10的自然对数</td></tr><tr><td style="text-align:center">Math.LN2</td><td style="text-align:left">2的自然对数</td></tr><tr><td style="text-align:center">Math.LOG2E</td><td style="text-align:left">以2为底e的对数</td></tr><tr><td style="text-align:center">Math.LOG10E</td><td style="text-align:left">以10为底e的对数</td></tr><tr><td style="text-align:center">Math.PI</td><td style="text-align:left">π的值</td></tr><tr><td style="text-align:center">Math.SQRT_2</td><td style="text-align:left">1/2的平方根</td></tr><tr><td style="text-align:center">Math.SQRT2</td><td style="text-align:left">2的平方根</td></tr></tbody></table><p><br></p><blockquote><h4 id="min-和-max"><a href="#min-和-max" class="headerlink" title="min() 和 max()"></a>min() 和 max()</h4></blockquote><p>确定数值数组中的最大(小)值：</p><pre><code>var max = Math.max(3,54,32,16);alert(max);         //54var min = Math.min(3,54,32,16);alert(min);         //3var arr = [1,2,3,4,5,6,7,8];var max = Math.max.apply(Math,arr);console.log(max);       //8</code></pre><p><br></p><blockquote><h4 id="舍入方法"><a href="#舍入方法" class="headerlink" title="舍入方法"></a>舍入方法</h4></blockquote><p>Math.ceil()：向上取最接近的整数；Math.round()：正常的四舍五入；Math.floor()：向下去最接近的整数：</p><pre><code>console.log(Math.ceil(25.9));       //26   console.log(Math.ceil(25.5));       //26 console.log(Math.ceil(25.1));       //26 console.log(Math.round(25.9));      //26 console.log(Math.round(25.5));      //26 console.log(Math.round(25.1));      //25 console.log(Math.floor(25.9));      //25 console.log(Math.floor(25.5));      //25 console.log(Math.floor(25.1));      //25</code></pre><p><br></p><blockquote><h4 id="random-方法"><a href="#random-方法" class="headerlink" title="random()方法"></a>random()方法</h4></blockquote><p>Math.random()方法返回[0,1)的一个随机数。因为返回的总是一个小数值，所以用到Math.floor()方法：</p><blockquote><blockquote><p>值 = Math.floor(Math.random()* 可能的总数 + 第一个可能的值 )</p></blockquote></blockquote><pre><code>console.log(Math.floor(Math.random()*10+1));console.log(Math.floor(Math.random()*9+2));</code></pre><p><a href="http://www.w3school.com.cn/js/jsref_obj_math.asp" target="_blank" rel="noopener">more&gt;&gt;</a></p><p><br><br><br></p><h3 id="3-setTimeout-和-setInterval"><a href="#3-setTimeout-和-setInterval" class="headerlink" title="3.setTimeout() 和 setInterval()"></a>3.setTimeout() 和 setInterval()</h3><ul><li><p><a href="http://www.w3school.com.cn/htmldom/met_win_settimeout.asp" target="_blank" rel="noopener">参考资料1</a></p></li><li><p><a href="https://wangdoc.com/javascript/async/timer.html" target="_blank" rel="noopener">参考资料2</a></p></li></ul><p><br><br><br></p><h3 id="4-功能预览"><a href="#4-功能预览" class="headerlink" title="4.功能预览"></a>4.功能预览</h3><blockquote><p>显示当前时间：XXXX 年 XX 月 XX 日 星期X XX:XX:XX</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">showTime: function () &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        var date = new Date();</span><br><span class="line">        var year = date.getFullYear(),</span><br><span class="line">            month = format(date.getMonth() + 1),</span><br><span class="line">            day = format(date.getDate()),</span><br><span class="line">            week = date.getDay(),//星期</span><br><span class="line">            H = format(date.getHours()),</span><br><span class="line">            M = format(date.getMinutes()),</span><br><span class="line">            S = format(date.getSeconds());</span><br><span class="line">        //①用【Array构造函数】创建数组</span><br><span class="line">        //var weeks = new Array(&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;);</span><br><span class="line">        //②用【数组字面量】创建数组 </span><br><span class="line">        var weeks = [&quot; 星期日 &quot;, &quot; 星期一 &quot;, &quot; 星期二 &quot;, &quot; 星期三 &quot;, &quot; 星期四 &quot;, &quot; 星期五 &quot;, &quot; 星期六 &quot;];</span><br><span class="line">        document.getElementById(&quot;showTime&quot;).innerHTML = year + &quot; 年 &quot; + month + &quot; 月 &quot; + day + &quot; 日 &quot; + weeks[week] + H + &quot; : &quot; + M + &quot; : &quot; + S;</span><br><span class="line">        setTimeout(arguments.callee,500);</span><br><span class="line">    &#125;, 500);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>高考倒计时：剩余 XXX 天</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deadLine: function () &#123;</span><br><span class="line">    var nowdate = new Date();</span><br><span class="line">    var deadline = new Date(&apos;2020,6,6&apos;),</span><br><span class="line">        lefttime = Math.ceil((deadline.getTime() - nowdate.getTime()) / (24 * 60 * 60 * 1000));</span><br><span class="line">    if (lefttime &gt; 0) &#123;</span><br><span class="line">        document.getElementById(&quot;deadLine&quot;).innerHTML = &apos;剩余  &apos; + lefttime + &apos;  天&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        document.getElementById(&apos;deadLine&apos;).innerHTML = &apos;倒计已结束&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>限时抢购： 剩余 XX 天 XX 时 XX 分 XX 秒</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">limitedTime: function () &#123;</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        var nowtime = new Date(),</span><br><span class="line">            endtime = new Date(&apos;2020,6,6,12:00:00&apos;),</span><br><span class="line">            lefttime = (endtime.getTime() - nowtime.getTime()) / 1000,</span><br><span class="line">            day = parseInt(lefttime / (60 * 60 * 24)),</span><br><span class="line">            H = format(parseInt(lefttime / (60 * 60) % 24)),</span><br><span class="line">            M = format(parseInt(lefttime / 60 % 60)),</span><br><span class="line">            S = format(parseInt(lefttime % 60));</span><br><span class="line">        if (lefttime &gt; 0) &#123;</span><br><span class="line">            document.getElementById(&quot;limitedTime&quot;).innerHTML = &apos;剩余  &apos; + day + &apos;  天 &apos; + H + &apos; 时  &apos; + M + &apos; 分 &apos; + S + &apos; 秒 &apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            document.getElementById(&apos;limitedTime&apos;).innerHTML = &apos;限时抢已结束&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(arguments.callee, 500);</span><br><span class="line">    &#125;, 500);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>某一天（过去或将来）：XXXX 年 XX 月 XX 日</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">oneDay: function (num) &#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">        date.setDate(date.getDate() + num);</span><br><span class="line">    var year = date.getFullYear(),</span><br><span class="line">        month = format(date.getMonth() + 1),</span><br><span class="line">        day = format(date.getDate());</span><br><span class="line">    document.getElementById(&quot;oneDay&quot;).innerHTML = year + &quot; 年 &quot; + month + &quot; 月 &quot; + day + &quot; 日 &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="选项卡切换"><a href="#选项卡切换" class="headerlink" title="选项卡切换"></a>选项卡切换</h2><hr><p><br><br><br></p><h2 id="图片轮播"><a href="#图片轮播" class="headerlink" title="图片轮播"></a>图片轮播</h2><hr><p>[待完善]…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果概览-持续完善&quot;&gt;&lt;a href=&quot;#效果概览-持续完善&quot; class=&quot;headerlink&quot; title=&quot;效果概览 [持续完善]]&quot;&gt;&lt;/a&gt;效果概览 &lt;span style=&quot;font-size:.5em&quot;&gt;[持续完善]]&lt;/span&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;h3 id=&quot;AboutTime&quot;&gt;&lt;a href=&quot;#AboutTime&quot; class=&quot;headerlink&quot; title=&quot;AboutTime&quot;&gt;&lt;/a&gt;AboutTime&lt;/h3&gt;…&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Effects" scheme="https://hotkang.cn/categories/Effects/"/>
    
    
      <category term="Effects_JS" scheme="https://hotkang.cn/tags/Effects-JS/"/>
    
  </entry>
  
  <entry>
    <title>技术之瞳</title>
    <link href="https://hotkang.cn/2018/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%9E%B3/"/>
    <id>https://hotkang.cn/2018/技术之瞳/</id>
    <published>2018-08-04T07:26:46.000Z</published>
    <updated>2018-08-04T12:57:01.056Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter Password~" />    <label for="pass">Enter Password~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;hr/&gt;&lt;h5 style=&quot;text-align:center&quot; &gt;Need Password&lt;/h5&gt;&lt;hr/&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="前端" scheme="https://hotkang.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔试" scheme="https://hotkang.cn/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ToDoList</title>
    <link href="https://hotkang.cn/2018/ToDoList/"/>
    <id>https://hotkang.cn/2018/ToDoList/</id>
    <published>2018-08-01T09:15:13.000Z</published>
    <updated>2018-08-23T08:59:36.477Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter Password~" />    <label for="pass">Enter Password~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;hr/&gt;&lt;h5 style=&quot;text-align:center&quot; &gt;Need Password&lt;/h5&gt;&lt;hr/&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Notes_HTML</title>
    <link href="https://hotkang.cn/2018/Notes-HTML/"/>
    <id>https://hotkang.cn/2018/Notes-HTML/</id>
    <published>2018-07-28T06:31:23.000Z</published>
    <updated>2018-08-01T09:27:25.963Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter Password~" />    <label for="pass">Enter Password~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;hr/&gt;&lt;h5 style=&quot;text-align:center&quot; &gt;Need Password&lt;/h5&gt;&lt;hr/&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="Notes" scheme="https://hotkang.cn/tags/Notes/"/>
    
      <category term="HTML" scheme="https://hotkang.cn/tags/HTML/"/>
    
      <category term="面试" scheme="https://hotkang.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象编程三</title>
    <link href="https://hotkang.cn/2018/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%89/"/>
    <id>https://hotkang.cn/2018/JavaScript面向对象编程三/</id>
    <published>2018-07-26T07:05:40.000Z</published>
    <updated>2018-08-10T13:27:28.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解继承-完结"><a href="#理解继承-完结" class="headerlink" title="理解继承 [完结]"></a>理解继承 <span style="font-size:.5em">[完结]</span></h2><p>JavaScript主要通过原型链实现继承。原型链的构建是通过将一个类型的实例赋给另一个构造函数的原型实现的。这样,子类就能访问超类的所有属性和方法,这一点跟基于类的继承很相似。原型链不适宜单独使用,对象实例共享所有继承的属性和方法。可借用构造函数,即在子类型构造函数的内部调用超类型构造函数,每个实例都具有自己的属性同时保证只使用构造函数模式来定义类型。组合继承模式使用最多,即用原型链继承共享的属性和方法,用构造函数继承实例属性。<br><a id="more"></a></p><p><br><br><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>JavaScript高级程序设计(第3版)P162-P174</p></blockquote><p><br><br><br></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr><blockquote><p>接口继承</p></blockquote><p>只继承 <strong>方法签名</strong>。由于函数没有签名,在ECMAScript中无法实现接口继承。</p><blockquote><p>实现继承</p></blockquote><p>继承 <strong>实际的方法</strong>。ECMAScript只支持实现继承,主要依靠 <strong>原型链</strong>来实现。</p><p><br></p><h2 id="一、原型链"><a href="#一、原型链" class="headerlink" title="一、原型链"></a>一、原型链</h2><p>基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p><ol><li><h5 id="构造函数、原型、实例的关系"><a href="#构造函数、原型、实例的关系" class="headerlink" title="构造函数、原型、实例的关系:"></a>构造函数、原型、实例的关系:</h5><ul><li><p>每个 <strong><code>构造函数</code></strong> 都有一个 <strong><code>原型对象</code></strong> ,构造函数都包含一个指向其原型对象的指针(<code>prototype</code>)</p></li><li><p><strong><code>实例对象</code></strong> 都包含一个指向 <strong><code>原型对象</code></strong> 的内部指针(<code>[[Prototype]]</code>)</p></li><li><p><strong><code>原型对象</code></strong> 都包含一个指向 <strong><code>构造函数</code></strong> 的指针(<code>constructor</code>)</p></li></ul></li></ol><p><br></p><ol start="2"><li><h5 id="实现原型链的基本模式"><a href="#实现原型链的基本模式" class="headerlink" title="实现原型链的基本模式:"></a>实现原型链的基本模式:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function SuperType()&#123;       //构造函数定义property属性</span><br><span class="line">    this.property = true;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = function()&#123;     //原型定义getSuperValue方法</span><br><span class="line">    return this.property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function SubType()&#123;          //构造函数定义subproperty属性</span><br><span class="line">    this.subproperty = false;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = new SuperType(); //创建SuperType实例并赋给SubType的原型来实现继承</span><br><span class="line"></span><br><span class="line">Subtype.prototype.getSubTypeValue = function()&#123;     //原型定义getSubTypeValue方法</span><br><span class="line">    return this.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubType();</span><br><span class="line">alert(instance.getSuperValue());        //true</span><br></pre></td></tr></table></figure><p>调用instance.getSuperValue()会经历三个搜索步骤:搜索实例 -&gt; 搜索Subtype.prototype -&gt; 搜索SuperType.prototype,最后才找到该方法</p><p>关系图:</p><p><img src="/img/YXL.png" alt=""></p></li></ol><p><br></p><ol start="3"><li><h5 id="确定原型和实例的关系"><a href="#确定原型和实例的关系" class="headerlink" title="确定原型和实例的关系"></a>确定原型和实例的关系</h5><blockquote><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5></blockquote><pre><code>alert(instance instanceof Object);       //truealert(instance instanceof SuperType);    //truealert(instance instanceof SubType);      //true</code></pre><blockquote><h5 id="isPrototypeOf-NaN"><a href="#isPrototypeOf-NaN" class="headerlink" title="isPrototypeOf()"></a>isPrototypeOf()</h5></blockquote><p>只要是原型链中出现过的原型,都可以说是该原型链所派生的实例的原型:</p><pre><code>alert(Object.prototype.isPrototypeOf(instance));        //truealert(SuperType.prototype.isPrototypeOf(instance));     //truealert(SubType.prototype.isPrototypeOf(instance));        //true</code></pre></li></ol><p><br></p><ol start="3"><li><h5 id="谨慎的定义方法"><a href="#谨慎的定义方法" class="headerlink" title="谨慎的定义方法"></a>谨慎的定义方法</h5><ul><li>添加新方法或重写超类类型中的方法,代码一定要放在替换原型的语句之后。</li><li>通过原型链实现继承，不能使用对象字面量创建原型方法。</li></ul></li><li><h5 id="原型链的问题"><a href="#原型链的问题" class="headerlink" title="原型链的问题"></a>原型链的问题</h5><ul><li>原型中定义的属性和方法将被所有实例共享。</li><li>创建子类型实例时，不能向超类型的构造函数传递参数。</li></ul></li></ol><p><br></p><h2 id="二、借用构造函数-伪造对象-经典继承"><a href="#二、借用构造函数-伪造对象-经典继承" class="headerlink" title="二、借用构造函数(伪造对象/经典继承)"></a>二、借用构造函数(伪造对象/经典继承)</h2><p>在子类的构造函数内部调用超类型构造函数，使用apply()和call()方法在新创建的对象上执行构造函数:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function SuperType()&#123;</span><br><span class="line">    this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">function SubType()&#123;</span><br><span class="line">    SuperType.call(this);</span><br><span class="line">&#125;</span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);        //&quot;red,blue,green,black&quot;</span><br><span class="line"></span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">alert(instance2.colors);        //&quot;red,blue,green&quot;</span><br></pre></td></tr></table></figure><p></p><ol><li><h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><p>相对于原型链而言，构造函数可以在子类型构造函数中向超类型构造函数传递参数:</p><pre><code>function SuperType(){    this.name = name;}function SubType(){    SuperType.call(this, &quot;hotyan&quot;);     //继承了SuperType,同时还传递了参数    this.age = 18;      //实例属性}var instance = new SubType();alert(instance.name);       //&quot;hotyan&quot;alert(instance.age);         //18</code></pre></li><li><h5 id="借用构造函数的问题"><a href="#借用构造函数的问题" class="headerlink" title="借用构造函数的问题"></a>借用构造函数的问题</h5><p>方法都在构造函数中定义，函数无法复用。</p></li></ol><p><br></p><h2 id="三、组合继承-伪经典继承"><a href="#三、组合继承-伪经典继承" class="headerlink" title="三、组合继承(伪经典继承)"></a>三、组合继承(伪经典继承)</h2><p>使用原型链实现对原型属性和方法的继承，使用构造函数来实现对实例属性的继承：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = function()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name, age)&#123;</span><br><span class="line">    SuperType.call(this, name);</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = function()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType(&quot;hotyan&quot;,18);</span><br><span class="line">instance1.colors.push(&quot;black&quot;);</span><br><span class="line">alert(instance1.colors);        //&quot;red,blue,green,black&quot;</span><br><span class="line">insyance1.sayNme();             //&quot;hotyan&quot;</span><br><span class="line">instance1.sayAge();             //18</span><br><span class="line"></span><br><span class="line">var instance2 = new SubType(&quot;hotyann&quot;,28);</span><br><span class="line">alert(instance2.colors);        //&quot;red,blue,green&quot;</span><br><span class="line">insyance2.sayNme();             //&quot;hotyann&quot;</span><br><span class="line">instance2.sayAge();             //28</span><br></pre></td></tr></table></figure><p>最常用的继承模式，能正常使用instanceof 和 isPrototypeOf()。</p><p><br></p><h2 id="四、原型式继承"><a href="#四、原型式继承" class="headerlink" title="四、原型式继承"></a>四、原型式继承</h2><p>借助原型可以基于原有的对象创建新对象，同时不必因此创建自定义类型。本质上讲，object()对传入其中的对象执行了一次浅复制。</p><p>原型式继承要求必须有一个对象作为另一个对象的基础，再根据需求对得到的对象加以修改：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function object(O)&#123;</span><br><span class="line">    function F()&#123;&#125;          //创建一个临时性的构造函数</span><br><span class="line">    F.prototype = o;        //将传入对象作为这个构造函数的原型</span><br><span class="line">    return new F();         //返回临时类型的新实例</span><br><span class="line">&#125;</span><br><span class="line">var person = &#123;</span><br><span class="line">    name:&quot;hotyan&quot;,</span><br><span class="line">    friends:[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var hotyan1 = object(person);   //新对象讲person作为原型</span><br><span class="line">hotyan1.name = &quot;hotyan1&quot;;</span><br><span class="line">hotyan1.friends.push(&quot;D&quot;);</span><br><span class="line"></span><br><span class="line">var hotyan2 = object(person);</span><br><span class="line">hotyan2.name = &quot;hotyan2&quot;;</span><br><span class="line">hotyan2.friends.push(&quot;DD&quot;);</span><br><span class="line"></span><br><span class="line">alert(person.friends);      //&quot;A,B,C,D,DD&quot;</span><br></pre></td></tr></table></figure><p></p><p>person.friends不仅属于person所有,而且也会被hotyan1和hotyan2共享。实际上,相当于创建了person对象的两个副本。</p><p>ES5新增Object.create()方法规范化了原型式继承。接受两个参数： <strong>作为新对象原型</strong>的的对象、<strong>一个为新对象定义额外属性</strong>的对象。</p><p>在传入一个参数的情况下，Object.creat()与object()方法的行为相同。</p><p>Object.creat()方法的第二个参数与Object.defineProperties()方法的第二个参数格式相同（每个属性都是通过自己的描述符定义的）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name:&quot;hotyan&quot;,</span><br><span class="line">    friends:[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">var hotyan1 = Object.create(person, &#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        value: &quot;hotyan1&quot;        //将覆盖原型上的同名属性</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);  </span><br><span class="line">alert(hotyan1.name);      //&quot;hotyan1&quot;</span><br></pre></td></tr></table></figure><p></p><p>原型式继承完全可以胜任只想让一个对象与另一个对象保持类似的情况。</p><p><br></p><h2 id="五、寄生式继承"><a href="#五、寄生式继承" class="headerlink" title="五、寄生式继承"></a>五、寄生式继承</h2><p>思路与寄生构造函数、工厂模式类似：创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后像真的是它做了所有工作一样返回对象：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function createAnother(o)&#123;</span><br><span class="line">    var f = object(o);          //通过调用函数来创建一个新对象</span><br><span class="line">    f.sayHi = function()&#123;       //以某种方式来增强这个对象</span><br><span class="line">        alert(&quot;hi&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return f;</span><br><span class="line">&#125;</span><br><span class="line">var person = &#123;</span><br><span class="line">    name:&quot;hotyan&quot;,</span><br><span class="line">    friends:[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">var hotyan1 = creatAnother(person);     //新对象不仅有person的所有属性和方法,而且还有自己的sayHi()方法</span><br><span class="line">hotyan1.sayHi();        //&quot;hi&quot;</span><br></pre></td></tr></table></figure><p></p><p>在主要考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率(与构造函数模式类似)。</p><p><br></p><h2 id="六、寄生组合式继承"><a href="#六、寄生组合式继承" class="headerlink" title="六、寄生组合式继承"></a>六、寄生组合式继承</h2><p>组合继承模式最大的问题就是无论在什么情况下都会调用两次超类型的构造函数:创建子类型原型的时候,子类型构造函数内部。</p><p>子类型最终会包含超类型对象的全部实例，但我们不得不在调用子类型构造函数时重写这些属性：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function SuperType(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = function()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name, age)&#123;</span><br><span class="line">    SuperType.call(this, name);         //第二次调用SuperType()</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = new SuperType();     //第一次调用SuperType()</span><br><span class="line">    this.age = age;</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = function()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>所谓寄生组合式继承就是 <strong>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法</strong>：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function inheritPrototype(subType,superType)&#123;</span><br><span class="line">    var prototype = object(superType.prototype);        //创建超类型原型的一个副本</span><br><span class="line">    prototype.constructor = subType;                //为创建的副本添加constructor属性(重写原型导致默认属性constructor失去)</span><br><span class="line">    subType.prototype = prototype;              //将创建的副本赋值给子类型的原型</span><br><span class="line">&#125;</span><br><span class="line">function SuperType(name)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = function()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">function SubType(name, age)&#123;</span><br><span class="line">    SuperType.call(this, name);         //第二次调用SuperType()</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line">SubType.prototype.sayAge = function()&#123;</span><br><span class="line">    alert(this.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>高效率体现在只调用了一次SuperType构造函数；</p><p>与此同时，原型链保持不变；</p><p>能正常使用instanceof 和 isPrototypeOf()。</p><p>是引用类型最理想的继承范式。</p><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解继承-完结&quot;&gt;&lt;a href=&quot;#理解继承-完结&quot; class=&quot;headerlink&quot; title=&quot;理解继承 [完结]&quot;&gt;&lt;/a&gt;理解继承 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;JavaScript主要通过原型链实现继承。原型链的构建是通过将一个类型的实例赋给另一个构造函数的原型实现的。这样,子类就能访问超类的所有属性和方法,这一点跟基于类的继承很相似。原型链不适宜单独使用,对象实例共享所有继承的属性和方法。可借用构造函数,即在子类型构造函数的内部调用超类型构造函数,每个实例都具有自己的属性同时保证只使用构造函数模式来定义类型。组合继承模式使用最多,即用原型链继承共享的属性和方法,用构造函数继承实例属性。&lt;br&gt;
    
    </summary>
    
      <category term="面向对象编程" scheme="https://hotkang.cn/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="继承" scheme="https://hotkang.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象编程二</title>
    <link href="https://hotkang.cn/2018/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%BA%8C/"/>
    <id>https://hotkang.cn/2018/JavaScript面向对象编程二/</id>
    <published>2018-07-26T07:05:31.000Z</published>
    <updated>2018-07-28T07:40:20.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解并创建对象-完结"><a href="#理解并创建对象-完结" class="headerlink" title="理解并创建对象 [完结]"></a>理解并创建对象 <span style="font-size:.5em">[完结]</span></h2><p>ECMAScript 支持面向对象(OO)编程,但不使用类或者接口。对象可以在代码执行过程中创建和增强,因此具有动态性而非严格定义的实体。在没有类的情况下,可以采用下列模式创建对象。</p><ul><li><p>工厂模式: 使用简单的函数创建对象,为对象添加属性和方法并返回对象。(后被构造函数模式取代)</p></li><li><p>构造函数模式: 创建自定义引用类型,像创建内置对象实例一样使用new操作符。每个成员无法得到复用。</p></li><li>原型模式:使用构造函数的prototype属性来指定共享属性和方法。组合使用构造函数模式和原型模式,即用构造函数定义实例属性,用原型定义共享的属性和方法。<a id="more"></a><br><br><br></li></ul><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>JavaScript高级程序设计(第3版)P144-P162</p></blockquote><p><br><br><br></p><h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><hr><blockquote><p>Object构造函数</p></blockquote><pre><code>var hotyan = new Object();hotyan.name = hotyan;hotyan.age = 18;      //永远18...</code></pre><p><br></p><blockquote><p>对象字面量</p></blockquote><pre><code>var hotyan = {  name : &quot;hotyan&quot;,  age : 18};</code></pre><p>属性名也可以使用字符串</p><pre><code>var hotyan = {  &quot;name&quot; : &quot;hotyan&quot;,  &quot;age&quot; : 18,  5 : true       //数字属性名自动转换为字符串};</code></pre><p><br></p><blockquote><p>访问对象属性【点方法/方括号表示法】</p></blockquote><pre><code>alert(hotyan.name);       //&quot;hotyan&quot;alert(hotyan[&quot;name&quot;]);    //&quot;hotyan&quot;</code></pre><p>功能上没有区别,但<span id="inline-green">方括号表示法</span>可以通过变量来访问属性</p><pre><code>var propertyName = &quot;name&quot;;alert(hotyan[propertyName]);    //&quot;hotyan&quot;</code></pre><p>属性名使用的是<span id="inline-purple">关键字</span>、<span id="inline-blue">保留字</span>或包含会导致语法错误的字符、非字母非数字时可使用方括号表示法</p><pre><code>hotyan[&quot;first name&quot;] = &quot;hotyan&quot;;    //&quot;first name&quot;包含一个空格,不能使用点方法</code></pre><p>通常,除非必须使用变量来访问属性,否则建议用点方法。</p><p><br><br><br></p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><hr><h2 id="一、原始模式"><a href="#一、原始模式" class="headerlink" title="一、原始模式"></a>一、原始模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var hotyan1 = &#123;&#125;;    //与new Object() 相同</span><br><span class="line">hotyan1.name = &quot;hotyan1&quot;;</span><br><span class="line">hotyan1.age = 18;</span><br><span class="line"></span><br><span class="line">var hotyan2 =&#123;&#125;;</span><br><span class="line">hotyan2.name = &quot;hotyan2&quot;;</span><br><span class="line">hotyan2.age = 28;</span><br></pre></td></tr></table></figure><p>最 <strong>简单</strong>的封装,把两个属性封装在一个对象里面。<br>缺点:</p><ol><li>使用同一个接口创建很多对象(创建多个实例),会产生大量 <strong>重复代码</strong>。</li><li>实例与原型之间,看不出任何联系。</li></ol><p><br></p><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><p>工厂模式是广为人知的设计模式,抽象了创建具体对象的过程。</p><p>用函数来封装 <strong>以特定接口创建对象</strong>的细节:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name,age,job)&#123;</span><br><span class="line">    var o =new Object();    //显示的创建对象</span><br><span class="line">    o.name = name;          </span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = createPerson(&quot;hotyan1&quot;,18,&quot;Student&quot;);</span><br><span class="line">var hotyan2 = createPerson(&quot;hotyan2&quot;,28,&quot;Engineer&quot;);</span><br></pre></td></tr></table></figure><p></p><p>解决了创建多个相似对象的问题(即解决代码重复的问题)。<br>不足:</p><ol><li><p>没有解决对象识别问题(即不知道对象的类型)</p></li><li><p>实例之间没有内在的联系,不能反映出它们是同一个原型对象的实例</p></li></ol><p><br></p><h2 id="三、构造函数模式"><a href="#三、构造函数模式" class="headerlink" title="三、构造函数模式"></a>三、构造函数模式</h2><p>构造函数本身就是一个函数,出于 <strong>创建新对象</strong>的目的而定义的。</p><p>内部使用了 <strong><code>this</code></strong> 变量,使用 <strong><code>new</code></strong> 运算符就能生成实例,并且 <strong><code>this</code></strong> 变量会绑定在实例对象上。</p><p>构造函数的函数名始终都应该以一个大写字母开头,非构造函数则应该以一个小写字母开头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;  </span><br><span class="line">    /*直接将属性和方法赋给this对象*/</span><br><span class="line">    this.name = name;       </span><br><span class="line">    this.age = age;</span><br><span class="line">    this.job = job;</span><br><span class="line"></span><br><span class="line">    this.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = new Person(&quot;hotyan1&quot;,18,&quot;Student&quot;);</span><br><span class="line">var hotyan2 = new Person(&quot;hotyan2&quot;,28,&quot;Engineer&quot;);</span><br></pre></td></tr></table></figure><p><strong><code>hotyan1</code></strong> 和 <strong><code>hotyan2</code></strong> 都有一个 <strong><code>constructor</code>(构造函数)属性</strong>,该属性指向 <strong><code>Person</code></strong> :</p><pre><code>alert(hotyan1.constructor == Person);   //truealert(hotyan2.constructor == Person);   //true</code></pre><p>对象的 <strong><code>constructor</code></strong> 属性最初是用来标识对象类型的。</p><p>但是提到检测对象类型,还是 <strong><code>instanceof</code></strong> 操作符更可靠一些:</p><pre><code>alert(hotyan1 instanceof Object);   //truealert(hotyan2 instanceof Object);   //truealert(hotyan1 instanceof Person);   //truealert(hotyan2 instanceof Person);   //true</code></pre><p>创建的对象既是Object的实例,也是Person的实例。验证了实例与原型之间的关系(即反映出它们是同一个原型对象的实例)。</p><p><br></p><blockquote><p>将构造函数当作函数</p></blockquote><p>构造函数与其他函数的唯一区别就是调用它们的方式不同。前面定义的Person()函数可以通过下列任何一种方式来调用:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1.当作构造函数使用</span><br><span class="line">var hotyan = new Person(&quot;hotyan&quot;,18,&quot;Student&quot;);</span><br><span class="line">hotyan.sayName();   //&quot;hotyan&quot;</span><br><span class="line"></span><br><span class="line">//2.作为普通函数使用</span><br><span class="line">Person(&quot;hotyan&quot;,18,&quot;Student&quot;);  //添加到window</span><br><span class="line">window.sayName();   //&quot;hotyan&quot;</span><br><span class="line"></span><br><span class="line">//3.在另一个对象的作用域中调用</span><br><span class="line">var O = new Object();</span><br><span class="line">Person.call(O, &quot;hotyan&quot;, 18, &quot;Student&quot;);</span><br><span class="line">O.sayName();   //&quot;hotyan&quot;</span><br></pre></td></tr></table></figure><p></p><ol><li>构造函数的典型用法,用new操作符来创建一个新对象。</li><li>不使用new操作符调用Person(),属性和方法都被添加window</li><li>使用call()或者apply()在某个特殊对象的作用域中调用Person()函数,O就拥有了所有属性和方法。</li></ol><p><br></p><blockquote><p>构造函数的问题</p></blockquote><p>主要问题:</p><pre><code>每个方法都要在每个实例上重新创建一遍。  </code></pre><p>不同实例上的同名函数是不相等的:</p><pre><code>alert(hotyan1.sayName == hotyan2.sayName);  //false</code></pre><p>尝试通过把函数定义转移到构造函数外部来解决问题:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.job = job;</span><br><span class="line">    this.sayName = sayName; //将sayName属性设置成等于全局的sayName函数 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayName()&#123;     </span><br><span class="line">    alert(this.name);   </span><br><span class="line">&#125;                       </span><br><span class="line"></span><br><span class="line">var hotyan1 = new Person(&quot;hotyan1&quot;,18,&quot;Student&quot;);</span><br><span class="line">var hotyan2 = new Person(&quot;hotyan2&quot;,28,&quot;Engineer&quot;);</span><br></pre></td></tr></table></figure><p></p><p><strong><code>sayName</code></strong> 包含的是一个指向函数的指针,因此 <strong><code>hotyan1</code></strong> 和 <strong><code>hotyan2</code></strong> 对象就共享了在全局作用域中定义的同一个 <strong><code>sayName()</code></strong> 函数。确实解决了两个函数做同一件事情的问题,可是新问题又来了:</p><ol><li><p>在全局作用域中定义的函数实际上只能被某个对象调用,这让全局作用域有点名不副实。</p></li><li><p>如果对象需要定义很多方法,就将定义很多个全局函数,使得自定义的引用类型丝毫没有封装性可言。</p></li></ol><p>这些问题可以通过原型模式解决！</p><p><br></p><h2 id="四、原型模式"><a href="#四、原型模式" class="headerlink" title="四、原型模式"></a>四、原型模式</h2><p>我们创建的每一个构造函数都有一个 <strong><code>prototype</code></strong> 属性,这个属性是一个 <strong>指针</strong>,指向一个 <strong>原型对象</strong>。这个原型对象的所有属性和方法，都会被构造函数的实例继承。</p><p>不必在构造函数中定义对象实例的信息,直接将信息添加到原型对象中:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">////////////后面将用...代替这部分代码/////////</span><br><span class="line">    function Person()&#123;&#125;</span><br><span class="line">    Person.prototype.name = &quot;hotyan&quot;;</span><br><span class="line">    Person.prototype.age = 18;</span><br><span class="line">    Person.prototype.job = &quot;Student&quot;;</span><br><span class="line">    Person.prototype.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">///////////到此处结束///////////////////////</span><br></pre></td></tr></table></figure><p></p><p>仍然可以通过调用构造函数来创建新对象,新对象的属性和方法是由所有实例共享的。</p><p>即 <strong><code>hotyan1</code></strong> 和 <strong><code>hotyan2</code></strong> 访问的都是同一组属性和同一个 <strong><code>sayName()</code></strong> 函数:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">hotyan1.sayName();  //&quot;hotyan&quot;</span><br><span class="line"></span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line">hotyan1.sayName();  //&quot;hotyan&quot;</span><br><span class="line"></span><br><span class="line">alert(hotyan1.sayName == hotyan2.sayName);  //true</span><br></pre></td></tr></table></figure><p></p><p>要理解原型模式的工作原理必须先理解ECMAScript中原型对象的性质。</p><p><br></p><blockquote><p>理解原型对象</p></blockquote><p>默认情况下,所有原型对象都会自动获得一个 <strong><code>constructor</code>(构造函数)属性</strong>,这个属性是一个 <strong>指针</strong>,指向 <strong><code>prototype</code>属性所在函数</strong>。</p><p>当调用构造函数创建一个新实例,内部包含一个内部属性 <strong>[[<code>Prototype</code>]]</strong>,这个属性是一个 <strong>指针</strong>,指向 <strong>构造函数的原型对象</strong>。</p><p><img src="/img/YX.png" alt=""></p><p>虽然在所有现实中都无法访问到 <strong>[[<code>Prototype</code>]]</strong>,可以通过 <strong><code>isPrototypeOf()</code></strong> 来确定对象之间是否存在这种关系:</p><pre><code>alert(Person.prototype.isPrototypeOf(hotyan1));     //truealert(Person.prototype.isPrototypeOf(hotyan2));     //true</code></pre><p>ECMAScript 5新增<code>Object.getPrototypeOf()</code>,返回[[<code>Prototype</code>]]的值:</p><pre><code>alert(Object.getPrototypeOf(hotyan1) == Person.prototype);  //truealert(Object.getPrototypeOf(hotyan1).name);  //&quot;hotyan&quot;</code></pre><p><br></p><blockquote><p>属性屏蔽</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line"></span><br><span class="line">hotyan1.name = &quot;hotyanhotyan&quot;;  //为对象实例添加name属性,将屏蔽原型对象中的同名属性。</span><br><span class="line">alert(hotyan1.name);    //&quot;hotyanhotyan&quot; --来自实例</span><br><span class="line">alert(hotyan2.name);    //&quot;hotyan&quot; --来自原型</span><br></pre></td></tr></table></figure><p>在实例中添加<code>name</code>属性只会 <strong>阻止</strong>我们访问原型中的同名属性,即使将<code>name</code>属性设置为<code>null</code>,也只会在实例中设置属性值为<code>null</code>,而不会恢复其指向原型的连接。必须使用 <strong><code>delete</code>操作符</strong>完全删除实例属性才能重新访问原型中的属性:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line"></span><br><span class="line">hotyan1.name = &quot;hotyanhotyan&quot;;  //为对象实例添加name属性,将屏蔽原型对象中的同名属性。</span><br><span class="line">alert(hotyan1.name);    //&quot;hotyanhotyan&quot; --来自实例</span><br><span class="line">alert(hotyan2.name);    //&quot;hotyan&quot; --来自原型</span><br><span class="line"></span><br><span class="line">delete hotyan1.name;    //!!!!!!!!!!!</span><br><span class="line">alert(hotyan1.name);    //&quot;hotyan&quot; --来自原型</span><br></pre></td></tr></table></figure><p></p><p>使用 <strong><code>hasOwnPrototype()</code></strong> 方法可检测一个属性存在于实例还是原型。存在实例时返回true:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line"></span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //false</span><br><span class="line"></span><br><span class="line">hotyan1.name = &quot;hotyanhotyan&quot;;  //重写name属性</span><br><span class="line">alert(hotyan1.name);            //&quot;hotyanhotyan&quot;--来自实例</span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //true</span><br><span class="line"></span><br><span class="line">alert(hotyan2.name);            //&quot;hotyan&quot;--来自原型</span><br><span class="line">alert(hotyan2.hasOwnPrototype(&quot;name&quot;));     //false</span><br><span class="line"></span><br><span class="line">delete hotyan1.name;</span><br><span class="line">alert(hotyan1.name);            //&quot;hotyan&quot;--来自原型</span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //false</span><br></pre></td></tr></table></figure><p></p><p><br></p><blockquote><p>原型与in操作符</p></blockquote><p>单独使用时, <strong>in操作符</strong>会在通过对象能够访问给定属性时返回true:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line"></span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //false</span><br><span class="line">alert(&quot;name&quot; in hotyan1);       //true</span><br><span class="line"></span><br><span class="line">hotyan1.name = &quot;hotyanhotyan&quot;;  //重写name属性</span><br><span class="line">alert(hotyan1.name);            //&quot;hotyanhotyan&quot;--来自实例</span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //true</span><br><span class="line">alert(&quot;name&quot; in hotyan1);       //true</span><br><span class="line"></span><br><span class="line">alert(hotyan2.name);            //&quot;hotyan&quot;--来自原型</span><br><span class="line">alert(hotyan2.hasOwnPrototype(&quot;name&quot;));     //false</span><br><span class="line">alert(&quot;name&quot; in hotyan2);       //true</span><br><span class="line"></span><br><span class="line">delete hotyan1.name;</span><br><span class="line">alert(hotyan1.name);            //&quot;hotyan&quot;--来自原型</span><br><span class="line">alert(hotyan1.hasOwnPrototype(&quot;name&quot;));     //false</span><br><span class="line">alert(&quot;name&quot; in hotyan1);       //true</span><br></pre></td></tr></table></figure><p></p><p>无论该属性存在于实例中还是存在于原型中,始终都返回true。</p><p>同时使用 <strong><code>hasOwnPrototype()</code></strong> 方法和 <strong>in操作符</strong>,就可以确定该属性是存在于对象中,还是存在于原型中:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function hasPrototypePrototy(object,name)&#123;</span><br><span class="line">    return !object.hasOwnProperty(name) &amp;&amp; (name in object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>name in object</code>–通过对象能访问到属性时返回true;</p><p><code>hasOwnPrototype()</code>–属性存在于实例中时返回true;</p><p><code>!hasOwnPrototype()</code>–属性存在于原型中时返回true;</p><p>因此,只要 <strong><code>hasPrototypePrototy()</code></strong> 返回 <strong><code>true</code></strong> ,可以确定属性存在于 <strong>原型</strong>:</p><pre><code>...var hotyan1 = new Person();alert(hasPrototyprPrototy(hotyan1, &quot;name&quot;));    //truehotyan1.name = &quot;hotyanhotyan&quot;;//重写name属性alert(hasPrototyprPrototy(hotyan1, &quot;name&quot;));    //false</code></pre><p><br></p><blockquote><p>更简单的原型语法</p></blockquote><p>每添加一个属性或方法,就要重复一遍 <strong><code>Person.prototype</code></strong>:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype.name = &quot;hotyan&quot;;</span><br><span class="line">Person.prototype.age = 18;</span><br><span class="line">Person.prototype.job = &quot;Student&quot;;</span><br><span class="line">Person.prototype.sayName = function()&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>减少不必要输入的同时,从视觉上更好的封装整个原型,用对象字面量来 <strong>重写</strong>整个原型对象:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : &quot;hotyan&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Student&quot;,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p><strong><code>Person.prototype</code></strong> 等于一个以对象字面量形式创建的新对象,结果相同。</p><p>但是 <strong><code>constructor</code>属性</strong>不再指向 <strong><code>Person</code></strong> (指向 <strong><code>Object</code>构造函数</strong>):</p><pre><code>...var hotyan1 = new Person();alert(hotyan1.constructor == Person);   //falsealert(hotyan1.constructor == Object);   //true</code></pre><p>如果 <strong><code>constructor</code>的值</strong> 真的非常重要,可以特意设置回适当的值:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor : Person,   //值设为Person</span><br><span class="line">    name : &quot;hotyan&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Student&quot;,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p><br></p><blockquote><p>原型的动态性</p></blockquote><p>对原型对象所做的任何修改都可以立即从实例对象上反映出来,即使是 <strong>先创建实例后修改原型对象</strong>:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">var hotyan1 = new Person();     //新建Person实例保存在hotyan1中</span><br><span class="line">Person.prototype.sayHi = function()&#123;    //给原型对象新添sayHi()方法</span><br><span class="line">    alert(&quot;hi&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">hotyan1.sayHi();    //&quot;hi&quot;--仍然可以访问sayHi()方法</span><br></pre></td></tr></table></figure><p></p><p>其原因归结于 <strong>实例与原型之间的松散连接关系</strong>。</p><p>但是如果是重写整个原型对象,情况就不一样了:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;</span><br><span class="line">var hotyan1 = new Person();     //新建Person实例保存在hotyan1中</span><br><span class="line">Person.prototype = &#123;            //重写整个原型对象</span><br><span class="line">    constructor : Person,       //值设为Person</span><br><span class="line">    name : &quot;hotyan&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Student&quot;,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">hotyan1.sayName();      //error</span><br></pre></td></tr></table></figure><p></p><p>重写原型对象</p><p>切断了构造函数与最初原型之间的联系(即构造函数指向了重写的新原型),</p><p>切断了之前已经存在的实例与新原型之间的关系(即之前已经存在的实例仍然指向最初的原型)。</p><p><img src="/img/RWYX.png" alt=""></p><p><br></p><blockquote><p>原生对象的原型</p></blockquote><p>原型模式的重要性不仅体现在 <strong>创建自定义类型</strong>,所有原生的引用类型(<code>Object、Array、String...</code>)都采用原型模式创建。</p><p>通过原生对象的原型,不仅可以 <strong>取得所有默认方法的引用</strong>,而且可以 <strong>定义新方法</strong>。(但不推荐！)</p><p><br></p><blockquote><p>原型对象的问题</p></blockquote><ol><li><p>省略了为构造函数传递的初始化参数,导致所有实例在默认情况下拥有相同的属性值。(不是最大问题)</p></li><li><p>原型中的属性和方法是被所有实例共享的,对于函数非常适合,对于包含基本值得属性倒也说的过去(可以重写属性),对于包含引用类型值得属性来说,问题比较突出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Person()&#123;&#125;;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : &quot;hotyan&quot;,</span><br><span class="line">    age : 18,</span><br><span class="line">    job : &quot;Student&quot;,</span><br><span class="line">    friends :[&quot;A&quot;, &quot;B&quot;],</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var hotyan1 = new Person();</span><br><span class="line">var hotyan2 = new Person();</span><br><span class="line"></span><br><span class="line">hotyan1.friends.push(&quot;C&quot;);      //向hotyan1添加了好友C</span><br><span class="line">alert(hotyan1.friends);     //&quot;A,B,C&quot;</span><br><span class="line">alert(hotyan2.friends);     //&quot;A,B,C&quot;--结果hotyan2也一同被修改</span><br><span class="line">alert(hotyan1.friends === hotyan2.friends);//true</span><br></pre></td></tr></table></figure></li></ol><pre><code>这个问题也是我们很少看见有人 **单独使用原型模式**的原因所在！！</code></pre><p><br></p><h2 id="五、构造函数和原型混合模式"><a href="#五、构造函数和原型混合模式" class="headerlink" title="五、构造函数和原型混合模式"></a>五、构造函数和原型混合模式</h2><p>是创建自定义类型最常见的方式。构造函数模式:定义实例属性;原型模式:定义共享属性和方法。</p><p>还支持向构造函数传递参数,可谓集两种模式之长:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.job = job;</span><br><span class="line">    this.friends = [&quot;A&quot;, &quot;B&quot;];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor : Person,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = new Person(&quot;hotyan1&quot;, 18, &quot;Student&quot;);</span><br><span class="line">var hotyan2 = new Person(&quot;hotyan2&quot;, 28, &quot;Engineer&quot;);</span><br><span class="line"></span><br><span class="line">hotyan1.friends.push(&quot;C&quot;);</span><br><span class="line"></span><br><span class="line">alert(hotyan1.friends);     //&quot;A,B,C&quot;</span><br><span class="line">alert(hotyan2.friends);     //&quot;A,B&quot;</span><br><span class="line">alert(hotyan1.friends === hotyan2.friends);     //false</span><br><span class="line">alert(hotyan1.sayName === hotyan2.sayName);     //true</span><br></pre></td></tr></table></figure><p></p><p>这种构造函数与原型混成的模式,是目前在ECMAScript中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说是用来 <strong>定义引用类型的一种默认模式</strong>。</p><p><br></p><h2 id="六、动态原型模式"><a href="#六、动态原型模式" class="headerlink" title="六、动态原型模式"></a>六、动态原型模式</h2><p>把所有信息都封装到构造函数中,通过在构造函数中初始化原型(必要情况下)。</p><p>保存了同时使用构造函数和原型的优点:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    this.job = job;</span><br><span class="line"></span><br><span class="line">    if(typeof this.sayName != &quot;function&quot;)&#123;</span><br><span class="line">        Person.prototype.sayName = function()&#123;</span><br><span class="line">            alert(this.name);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = new Person(&quot;hotyan1&quot;, 18, &quot;Student&quot;);</span><br><span class="line">hotyan1.sayName();      //&quot;hotyan1&quot;</span><br></pre></td></tr></table></figure><p></p><p>使用动态原型模式时,不能使用对象字面量重写原型对象(重写原型会切断现有实例与新原型之间的联系,即现有实例仍然指向最初的原型)。</p><p><br></p><h2 id="七、寄生构造函数模式"><a href="#七、寄生构造函数模式" class="headerlink" title="七、寄生构造函数模式"></a>七、寄生构造函数模式</h2><p>基本思想是创建一个函数,函数作用仅仅是封装创建对象的代码,然后返回新创建的对象:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    var o = new Object();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = function()&#123;</span><br><span class="line">        alert(this.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = new Person(&quot;hotyan1&quot;, 18, &quot;Student&quot;);</span><br><span class="line">hotyan1.sayName();      //&quot;hotyan1&quot;</span><br></pre></td></tr></table></figure><p></p><p>除了使用 <strong><code>new</code>操作符</strong> 创建实例并把封装函数叫做构造函数外,这个模式跟工厂模式一模一样。</p><p>不能依赖 <strong><code>insatnceof</code>操作符</strong> 来确定对象类型(返回的对象与构造函数或者够着函数的原型属性之间没有关系,即返回的对象相对于在构造函数外部创建的对象),能使用其他模式的情况下,就不使用寄生构造函数模式。</p><p><br></p><h2 id="八、稳妥构造函数模式"><a href="#八、稳妥构造函数模式" class="headerlink" title="八、稳妥构造函数模式"></a>八、稳妥构造函数模式</h2><p>所谓稳妥对象,指没有公共属性,方法也不引用this对象。与寄生构造函数类似,但有两点不同:</p><ol><li><p>新创建对象的实例方法不引用this;</p></li><li><p>不使用new操作符调用构造函数(来创建实例)。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    var o = new Object();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = function()&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;;</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br><span class="line">var hotyan1 = Person(&quot;hotyan1&quot;, 18, &quot;Student&quot;);</span><br><span class="line">hotyan1.sayName();      //&quot;hotyan1&quot;</span><br></pre></td></tr></table></figure><p>不能依赖 <strong><code>insatnceof</code>操作符</strong>来确定对象类型(返回的对象与构造函数或者够着函数的原型属性之间没有关系,即返回的对象相对于在构造函数外部创建的对象),稳妥构造函数提供的安全性非常适合在某些安全执行环境(ADsafe、Caja)下使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解并创建对象-完结&quot;&gt;&lt;a href=&quot;#理解并创建对象-完结&quot; class=&quot;headerlink&quot; title=&quot;理解并创建对象 [完结]&quot;&gt;&lt;/a&gt;理解并创建对象 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;ECMAScript 支持面向对象(OO)编程,但不使用类或者接口。对象可以在代码执行过程中创建和增强,因此具有动态性而非严格定义的实体。在没有类的情况下,可以采用下列模式创建对象。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;工厂模式: 使用简单的函数创建对象,为对象添加属性和方法并返回对象。(后被构造函数模式取代)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;构造函数模式: 创建自定义引用类型,像创建内置对象实例一样使用new操作符。每个成员无法得到复用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;原型模式:使用构造函数的prototype属性来指定共享属性和方法。组合使用构造函数模式和原型模式,即用构造函数定义实例属性,用原型定义共享的属性和方法。
    
    </summary>
    
      <category term="面向对象编程" scheme="https://hotkang.cn/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="封装" scheme="https://hotkang.cn/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象编程一</title>
    <link href="https://hotkang.cn/2018/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
    <id>https://hotkang.cn/2018/JavaScript面向对象编程一/</id>
    <published>2018-07-26T07:04:41.000Z</published>
    <updated>2018-08-03T11:21:32.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解面向对象编程-完结"><a href="#理解面向对象编程-完结" class="headerlink" title="理解面向对象编程 [完结]"></a>理解面向对象编程 <span style="font-size:.5em">[完结]</span></h2><p>JS的面向对象编程和其它大多数语言如Java、C#的面向对象编程都不太一样。JS不区分类和实例的概念,而是通过原型（prototype）来实现面向对象编程。JS的原型链和Java的Class区别在于JS没有“Class”的概念,所有对象都是实例,所谓继承关系不过是把一个对象的原型指向另一个对象而已。</p><a id="more"></a><p><br><br><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>JavaScript高级程序设计(P110~P118)</p><p>JavaScript设计模式(P11~P18)</p></blockquote><p><br><br><br></p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><hr><ol><li><h5 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h5><p>大概就是下面说的这样:</p><blockquote><p>面向对象是相对于面向过程的,比如你要充话费,你会想,下个支付宝,注册并登录,绑定银行卡,充值。这种种过程。但是对于你女朋友就不一样了,她是面向“对象”的,她会想,谁会充话费呢？当然是你了,她就给你电话,然后你把之前的做了一遍,然后她收到充值成功的短信,说了句,么么哒。这就是面向对象！女的思维大部分是面向“对象”的！她不关心处理的细节,只关心谁可以,和结果!</p></blockquote></li></ol><ol start="2"><li><h5 id="两个基本概念"><a href="#两个基本概念" class="headerlink" title="两个基本概念"></a>两个基本概念</h5><blockquote><p>类</p></blockquote><p><strong>类是对象的类型模板</strong>。例如:定义Student类来表示学生,类本身是一种类型,Student表示学生类型,但不表示任何具体的某个学生。</p><blockquote><p>实例</p></blockquote><p><strong>实例是根据类创建的对象</strong>。例如:根据Student类可以创建出xiaoming、xiaohong、xiaojun等多个实例,每个实例表示一个具体的学生,他们全都属于Student类型。</p></li></ol><ol start="3"><li><h5 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h5><blockquote><p>封装</p></blockquote><p>把客观事物封装成抽象的类,并且类可以把自己的数据和方法只让可信的类或者对象操作,对不可信的进行信息隐藏。</p><blockquote><p>继承</p></blockquote><p>指这样一种能力:它可以使用现有类的所有功能,并在无需重新编写原来的类的情况下对这些功能进行扩展。</p><blockquote><p>多态</p></blockquote><p>允许将子类类型的指针赋值给父类类型的指针。实现多态:覆盖、重载。</p><p><a href="https://www.jianshu.com/p/50999d81eeb5" target="_blank" rel="noopener">查看更多&gt;&gt;</a></p></li></ol><p><br><br><br></p><h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><hr><p>每个函数都是Function类型的实例,都与其他引用类型一样具有属性和方法。函数实际上是对象,函数名实际上是一个指向函数对象的指针,不会与某个函数绑定。</p><ol><li><h5 id="定义函数的三种方式"><a href="#定义函数的三种方式" class="headerlink" title="定义函数的三种方式"></a>定义函数的三种方式</h5><blockquote><p><strong>函数声明:</strong></p></blockquote><pre><code>function sum (num1, num2){    return num1 + num2;}</code></pre><blockquote><p><strong>函数表达式:</strong></p></blockquote><pre><code>var sum = function(num1, num2){    return num1 + num2;};  //注意此处有分号</code></pre><blockquote><p><strong>Function构造函数:</strong></p></blockquote><pre><code>var sum = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1 + num2&quot;);</code></pre><p>不推荐!！因为构造函数定义导致 <strong>解析两次代码</strong>影响性能:</p><ul><li><p>第一次是解析常规ECMAScript代码;</p></li><li><p>第二次是解析传入构造函数中的字符串。</p></li></ul></li></ol><ol start="2"><li><h5 id="一个函数可能有多个名字"><a href="#一个函数可能有多个名字" class="headerlink" title="一个函数可能有多个名字"></a>一个函数可能有多个名字</h5><p><strong>函数名仅仅是指向函数的指针</strong>,函数名与 <strong>包含对象指针的</strong>其他变量没有什么不同:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function sum (num1, num2)&#123;      //定义一个sum()函数用于求两盒个值得和</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">alert(sum(10,10));  //20</span><br><span class="line"></span><br><span class="line">var anotherSum = sum;       //声明变量anotherSum,设置其与sum相等(即他们都指向了同一个函数)。</span><br><span class="line">alert(anotherSum(10,10));   //20--正常调用anotherSum()</span><br><span class="line"></span><br><span class="line">sum = null;                 //将sum设置为null,让它与函&quot;数断绝关系&quot;</span><br><span class="line">alert(anotherSum(10,10));   //20--正常调用anotherSum()</span><br></pre></td></tr></table></figure></li><li><h5 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h5><p>其他语言(如Java)可以为一个函数编写两个定义,只要两个定义的 <strong>签名(参数的类型和数量)</strong> 不同即可。ECMAScript函数的参数是 <strong>0或多个值的数组</strong>,故没有函数签名。没有函数签名,真正的重载是不可能做到的。</p><p>声明了两个同名函数,结果则是后面的函数覆盖了前面的函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function addSum(num)&#123;</span><br><span class="line">    return num + 100;</span><br><span class="line">&#125;</span><br><span class="line">function addSum(num)&#123;</span><br><span class="line">    return num + 200;</span><br><span class="line">&#125;</span><br><span class="line">var result = addSum(100);   //300</span><br></pre></td></tr></table></figure><p>将函数名想象为指针有助于理解为什么ECMAScript中没有函数重载概念。</p></li></ol><ol start="4"><li><h5 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h5><p>解析器在执行环境中加载数据时,对函数声明和函数表达式并非一视同仁。解析器会率先读取 <strong><code>函数声明</code></strong>,并使其在执行任何代码之前可用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(sum(10, 10));     //20</span><br><span class="line">function sum(sum1, sum2)&#123;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码开始执行前,解析器就通过 <strong>函数声明提升</strong>读取并将函数声明添加到执行环境中。对代码求值时,JS引擎在第一遍会声明函数并将它们放到源代码树的顶部。<strong><code>函数表达式</code></strong> 必须等到解析器执行到它所在的代码行才会真正被解释执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(sum(10, 10));     //&quot;unexpected identifier&quot;(意外标识符)错误</span><br><span class="line">var sum = function(sum1, sum2)&#123;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>除了什么时候可以通过变量访问函数这一点区别外,函数声明和函数表达式的语法是等价的！</strong></p></li></ol><ol start="5"><li><h5 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h5><p>ECMAScript中函数名本身就是变量,所以函数也可以作为值来使用。即不仅可以像传递参数一样把一个函数传递给另一个函数,而且可以将函数作为另一个函数的结果返回。</p><p>要访问函数的指针而不执行函数的话,必须去掉函数名后面的那对大括号。</p></li></ol><ol start="6"><li><h5 id="函数内部属性"><a href="#函数内部属性" class="headerlink" title="函数内部属性"></a>函数内部属性</h5><p>函数内部有两个特殊的对象: <strong><code>arguments</code></strong> 和 <strong><code>this</code></strong>。</p><blockquote><p><strong><code>arguments</code>:</strong></p></blockquote><p>类数组对象,保存函数参数。可使用 <strong>方括号语法</strong>访问它的每个元素。可用length属性来确定传递参数的个数。可与命名参数一起使用。值永远与对应命名参数的值保持同步。<code>arguments</code>有一个<code>callee</code>指针属性,指向拥有这个<code>arguments</code>对象的函数。</p><p>经典的阶乘函数,在函数有名字且以后不会改变的情况下,这样定义没有问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function factorial(num)&#123;</span><br><span class="line">    if(num &lt;= 1) </span><br><span class="line">        return 1;</span><br><span class="line">    else </span><br><span class="line">        return num * factorial(num-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个函数的执行与函数<code>factorial</code>紧紧耦合在了一起。可使用<code>arguments.callee</code>来消除紧密耦合现象:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function factorial(num)&#123;</span><br><span class="line">    if(num &lt;= 1) </span><br><span class="line">        return 1;</span><br><span class="line">    else </span><br><span class="line">        return num * arguments.callee(num-1);</span><br><span class="line">&#125;</span><br><span class="line">var trueFactorial = factorial;</span><br><span class="line"></span><br><span class="line">factorial = function()&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(trueFactorial(5));    //120</span><br><span class="line">alert(factorial(5));        //0</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>this</code>:</strong></p></blockquote><p><code>this</code>引用的是函数执行的环境对象(即<code>this</code>值)。当在网页的全局作用域中调用函数时,<code>this</code>对象引用的就是<code>window</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">var o = &#123;color : &quot;blue&quot;&#125;;</span><br><span class="line">function sayColor()&#123;</span><br><span class="line">    alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor();     //&quot;red&quot;--引用对象是window</span><br><span class="line">o.sayColor = sayColor;</span><br><span class="line">o.sayColor();       //&quot;blue&quot;--引用对象是o</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>caller</code>:</strong></p></blockquote><p>ECMAScript 5规范化了的一个函数对象属性。保存着 <strong>调用当前函数</strong> 的 <strong>函数的引用</strong>。如果是在全局作用域中调用当前函数,它的值为null。</p><blockquote><p>定义<code>arguments.callee</code>属性是为了分清<code>arguments.caller</code>和函数的<code>caller</code>属性。</p><p>严格模式下,访问<code>arguments.callee</code>会导致错误。访问<code>arguments.caller</code>(ECMAScript 5定义)也会导致错误,非严格模式下,<code>arguments.caller</code>属性始终是<code>undefined</code>。</p><p>严格模式还有一个限制:不能为函数<code>caller</code>属性赋值,否则会导致错误。</p></blockquote></li></ol><ol start="7"><li><h5 id="函数属性和方法"><a href="#函数属性和方法" class="headerlink" title="函数属性和方法"></a>函数属性和方法</h5><blockquote><p>属性:<code>length</code></p></blockquote><p>每个函数都包含两个属性:<code>length</code>和<code>prototype</code>。<code>length</code>属性表示函数希望接收的命名参数的个数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sayName(name)&#123;</span><br><span class="line">    alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">function sum(num1, num2)&#123;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function sayHi()&#123;</span><br><span class="line">    alert(&quot;Hi&quot;);</span><br><span class="line">&#125;</span><br><span class="line">alert(sayName.length);  //1</span><br><span class="line">alert(sum.length);  //2</span><br><span class="line">alert(sayHi.length);  //0</span><br></pre></td></tr></table></figure><blockquote><p>方法:<code>apply()</code></p></blockquote><p>每个函数都包含两个非继承而来的方法: <strong><code>apply()</code></strong> 和 <strong><code>call()</code></strong> 。可在特定的作用域中调用函数(即设置函数体内<code>this</code>对象的值)。</p><p><code>apply()</code>方法接收两个参数:①在其中运行函数的的作用域:<code>this</code>的引用对象;②参数数组:<code>Array</code>实例、<code>arguments</code>对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2)&#123;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function applySum1(num1, num2)&#123;</span><br><span class="line">    return sum.apply(this, arguments);      //传入arguments</span><br><span class="line">&#125;</span><br><span class="line">function applySum2(num1, num2)&#123;</span><br><span class="line">    return sum.apply(this, [num1, num2]);       //传入数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(applySum1(10, 10));        //20</span><br><span class="line">alert(applySum2(10, 15));        //25</span><br></pre></td></tr></table></figure><blockquote><p>方法:<code>call()</code></p></blockquote><p><code>call()</code>和<code>apply()</code>方法作用相同,区别在于接收参数方式不同。<code>call()</code>传递给函数的参数必须逐个列举出来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2)&#123;</span><br><span class="line">    return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">function callSum(num1, num2)&#123;</span><br><span class="line">    return sum.call(this, num1, num2);      </span><br><span class="line">&#125;</span><br><span class="line">alert(callSum(10, 10));        //20</span><br></pre></td></tr></table></figure><p>传递参数并非<code>call</code>和<code>apply</code>的真正用武之地,真正强大的地方是能够扩充函数赖以运行的作用域:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">var o = &#123;color : &quot;blue&quot;&#125;;</span><br><span class="line"></span><br><span class="line">function sayColor()&#123;</span><br><span class="line">    alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor();     //&quot;red&quot;--window.color</span><br><span class="line"></span><br><span class="line">sayColor().call(this);       //&quot;red&quot;</span><br><span class="line">sayColor().call(window);       //&quot;red&quot;</span><br><span class="line">sayColor().call(o);       //&quot;blue&quot;</span><br></pre></td></tr></table></figure><p>扩充作用域的最大好处:对象不需要与方法有任何耦合关系。可省去此步骤: <code>o.sayColor = sayColor;</code></p><blockquote><p>方法:<code>bind()</code></p></blockquote><p>调用<code>bind()</code>会创建一个函数实例,其this值会被绑定到 <strong>传给bind()函数</strong>的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.color = &quot;red&quot;;</span><br><span class="line">var o = &#123;color : &quot;blue&quot;&#125;;</span><br><span class="line"></span><br><span class="line">function sayColor()&#123;</span><br><span class="line">    alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">var objectSayColor = sayColor.bind(o);</span><br><span class="line">objectSayColor();       //&quot;blue&quot;</span><br></pre></td></tr></table></figure></li></ol><p><br><br><br></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><hr><ol><li><h5 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h5><p>声明一个函数(类)保存在一个变量里,一般将这个代表类的变量名首字母大写。在函数(类)的内部通过this(函数内部自带的一个变量,用于指向当前这个对象)变量添加属性和方法来实现对函数(类)添加属性和方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var Book = function(id,name,price)&#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.price = price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可通过在类的原型上添加属性和方法:</p><pre><code>//一一为原型对象属性赋值Book.prototype.display = function(){    //.....}//将一个对象赋值给类的原型对象Book.prototype = {    display : function(){}};</code></pre><p>用new操作符来实例化新对象,通过点方法访问实例化对象的属性和方法:</p><pre><code>var book = new Book(10,&quot;Javascript设计模式&quot;, 50);alert(book.id);   //10</code></pre></li><li><h5 id="属性与方法封装"><a href="#属性与方法封装" class="headerlink" title="属性与方法封装"></a>属性与方法封装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//私有属性和私有方法,特权方法,对象公有属性和公有方法,构造器</span><br><span class="line">var Book = function(id, name, price)&#123;</span><br><span class="line"></span><br><span class="line">    var num = 1;    //私有属性</span><br><span class="line">    function checkId()&#123;&#125;;   //私有方法</span><br><span class="line"></span><br><span class="line">    this.getName = function()&#123;&#125;;    //特权方法</span><br><span class="line">    this.getPrice = function()&#123;&#125;;</span><br><span class="line">    this.setName = function()&#123;&#125;;</span><br><span class="line">    this.setPrice = function()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    this.id = id;   //公有属性</span><br><span class="line">    this.copy = function()&#123;&#125;;   //公有方法</span><br><span class="line"></span><br><span class="line">    this.setName(name);     //构造器</span><br><span class="line">    this.setPrice(price);</span><br><span class="line">&#125;;</span><br><span class="line">Book.isChinese = true;  //静态公有属性(对象不能访问)</span><br><span class="line">Book.resetTime = function()&#123;    //静态公有方法(对象不能访问)</span><br><span class="line">    alert(&quot;New Time&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">    isBook : false,     //公有属性</span><br><span class="line">    display : function()&#123;&#125;      //  公有方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有属性和方法、静态公有属性和方法在通过New操作符创建的book对象里是访问不到的:</p><pre><code>var book = new Book(10,&quot;Javascript设计模式&quot;, 50);alert(book.num);   //undefinedalert(book.isJSBook);   //false</code></pre><p>可以通过点方法访问到公有属性和方法:</p><pre><code>alert(book.id);   //10alert(book.isChinese);   //undefined</code></pre><p>静态公有属性和方法可以通过类的自身访问:</p><pre><code>alert(Book.isChinese);   //trueBook.resertTime();      //&quot;New Time&quot;</code></pre></li></ol><ol start="3"><li><h5 id="闭包实现"><a href="#闭包实现" class="headerlink" title="闭包实现"></a>闭包实现</h5><p>闭包是有权访问另一个函数作用域中变量的函数,即在一个函数内部创建另一个函数。将闭包作为创建对象的构造函数,又是闭包又是可实例对象的函数,即可访问到类函数作用域中的变量。</p><p>将类的静态变量通过闭包来实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var Book = (function()&#123;</span><br><span class="line">    var bookNum = 0;    //静态私有变量</span><br><span class="line">    function checkBook(name)&#123;&#125;  //静态私有方法</span><br><span class="line"></span><br><span class="line">    return function(newId, newName, newPrice)&#123;</span><br><span class="line">        var name, price;        //私有变量</span><br><span class="line">        fucntion checkID(id)&#123;&#125;  //私有方法</span><br><span class="line"></span><br><span class="line">        this.getName = function()&#123;&#125;;    //特权方法</span><br><span class="line">        this.getPrice = function()&#123;&#125;;</span><br><span class="line">        this.setName = function()&#123;&#125;;</span><br><span class="line">        this.setPrice = function()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        this.id = id;   //公有属性</span><br><span class="line">        this.copy = function()&#123;&#125;;   //公有方法</span><br><span class="line"></span><br><span class="line">        bookNum++;</span><br><span class="line">        if(bookNum &gt; 100)</span><br><span class="line">            throw new Error(&quot;我们仅出版了100本书&quot;);</span><br><span class="line"></span><br><span class="line">        this.setName(name);     //构造器</span><br><span class="line">        this.setPrice(price);</span><br><span class="line">    &#125; </span><br><span class="line">    _book.prototype = &#123; //构建原型</span><br><span class="line">        isJSBook : false,       //静态公有属性</span><br><span class="line">        display : function()&#123;&#125;  //静态公有方法</span><br><span class="line">    &#125;;</span><br><span class="line">    retuen _book;   //返回类</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><h5 id="创建对象的安全模式"><a href="#创建对象的安全模式" class="headerlink" title="创建对象的安全模式"></a>创建对象的安全模式</h5><p>监测是否忘记New操作符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var Book = function(title, time, type)&#123;</span><br><span class="line">    if(this instanceof Book)&#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">        this.time = time;</span><br><span class="line">        this.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return new Book(title, time, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理解面向对象编程-完结&quot;&gt;&lt;a href=&quot;#理解面向对象编程-完结&quot; class=&quot;headerlink&quot; title=&quot;理解面向对象编程 [完结]&quot;&gt;&lt;/a&gt;理解面向对象编程 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;JS的面向对象编程和其它大多数语言如Java、C#的面向对象编程都不太一样。JS不区分类和实例的概念,而是通过原型（prototype）来实现面向对象编程。JS的原型链和Java的Class区别在于JS没有“Class”的概念,所有对象都是实例,所谓继承关系不过是把一个对象的原型指向另一个对象而已。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象编程" scheme="https://hotkang.cn/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="面向对象" scheme="https://hotkang.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="封装" scheme="https://hotkang.cn/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="继承" scheme="https://hotkang.cn/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="多态" scheme="https://hotkang.cn/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Notes_CSS</title>
    <link href="https://hotkang.cn/2018/Notes-CSS/"/>
    <id>https://hotkang.cn/2018/Notes-CSS/</id>
    <published>2018-07-23T17:46:39.000Z</published>
    <updated>2018-08-01T09:27:40.148Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter Password~" />    <label for="pass">Enter Password~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;hr/&gt;&lt;h5 style=&quot;text-align:center&quot; &gt;Need Password&lt;/h5&gt;&lt;hr/&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="CSS" scheme="https://hotkang.cn/tags/CSS/"/>
    
      <category term="Notes" scheme="https://hotkang.cn/tags/Notes/"/>
    
      <category term="面试" scheme="https://hotkang.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Notes_JS</title>
    <link href="https://hotkang.cn/2018/Notes-JS/"/>
    <id>https://hotkang.cn/2018/Notes-JS/</id>
    <published>2018-07-23T17:46:27.000Z</published>
    <updated>2018-08-28T13:42:20.289Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Enter Password~" />    <label for="pass">Enter Password~</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+csWJrQEg4SQu5wyMljP2pMtmV7EUwnGrLLrP/4WjfCspZqW8gnhrdk9eRZmQ1hg52JhPMRXu2VPsjsX33N1N9zh6WXNmRG02vWEC1q/7GjLRZ41pe6ofJPpBvt4pQNmHmqgf1qKM6diqiNiKS27iPokh/5NxgJKEY2wrQa1BibtGEUfXhddJSZlkiSqSaK2Xmgb4FqX66vz29AEH/thWw9e34//MYiPmnS5sbgP8R1J5RkUo8S9Ibb3QVPuhuZ8kFjBzpSwlgPovUM8qaLZY654RELFRRoF1WFL9Z/kVTN8IvjSM/LLH//1kolY/qEWS/eDxIM/KyyrF5HggKHilSkAX1VKcn86c2kI4BHcxLXjrcVeNNKnaRSonEUqGruSZrFW5/FpM8z2UHEUGPQhJMmWTTSlv/gKKEqZll+TCRxbtv6/VDfPo7IOdL+2lInxOcBLmz5b+SYLXG+TbNCezjpKAlnKFGaVkiCYY6mFQqLuZfu9DBP63LJrfveMf1AICqN2Du99i2Yc0+YFK+6aKTiIx9hg1FJ2kl56+kWq6nCkWkQC/y3rq7gog2ER0pb9JnjPfU6YHKmKek9XwYK3lDw3RnClr6nNn6wR0VfjwGasP3kWp71dnaqQ1/hU/yt1uYJ8MZ3j2bCbhcTBrDXZJyb82rE2GMhZiw3d0II5N5fHQwvMyRD7aD5L25tAN7isW1ZxOPYgnxv1sHepTdQPRSekvRJtieAsjW94JxeACuULEt01VSYAJOtVKNXyFKUARh3jA34qQdFb3TuEur/Lvw8IY+vKD6rRzBMBAWKdOrFEUGk+qgFGsGZJdyXGIYIHU9EyYla+aicXimj4mabxoes+sZaED2J+O6XA5o/iBjztpnWhwEizeXUPbF9DElgpgc86QI8Ptv9plXvmxBjNgeYslcjoCJpAewL3fN4HiETLxaEEDF85KSJ4dn1knxqnnpXB4xLdy4iIlzCRd0akqjuOXfP04uzguyf2JJmQlgbQMpunFCgGKrDfg1T5wQWZjqq/KOcHCKVtf6DvHcWgEBKKS6G7mwq4pkxu/MzxiWFYN/jNSgEkthuDnI94npRMA3ZIkdjeKnljavr+KKEKfNKScY83Xtmj+wjHuA4GX4vWC+pC3n5TJt1OWETTy5Gd1u6CCJUC6M7mjok8YUhk0z9XNSWHQjG6dzwq8Un794PEGo6+/nUgVrkizLsPIl1J6lZNK4VS7qTrAsZkTOAtXLnXGc43PE8nSe746F7W8OYLXoLQ8VDX+bO0P3bqX9sKhMu056vdVJOA1H9uoC1KNTJUQ2NkOnncktQk8pSIGP2uGjvovqs6wLxLEGbXAtM5lY8B/r2yxHkPhMHnBuphVqskLLsL1nLBLnJqwk/3w8gGiSDh2esqS219ODixPRk+oMCEEI/MW/pAwslSqbf2aSpRMcWTm2WzmNDByZzzWkPeqtPneEmCn4u8zhzTUqh+gRQzPyf6xpv+9CyDzzT7kNhyD0h8bp7JY85SUuX3w7INZWd3W9Min+LVzCsN8K546WeL8zAxCPuyNgEtw8f7Cs8+hL/rsj6tGP/nAowelW28Z/T7c08TCkHBEoYvqwYbECE8TXIh/SMTK6asf6whCReKROWyv6WvOhWtQlLq+YhGuJialRzchinewqWuZjvtyaheGbgoaPHsXU1XQ3aYXxsctrCdmm1ICwekVVqqGeDuqN/fxvmjvK4Fmb8s3rW4XZl8jIUwzbDKpmXcN9BHp7w4/I1WSEAo3fd44fV+fkiWNLo38TgTYdvvQLHf0OzIW0t99/EVTHncENfVhZqPtBfau4NGpYr0frRzonkSY6G6lDouuhczoL4sFzR6yeqrPR/Xnkyq6Tk9SGVI0uI3mUyFEq/Sd4+5EwGm7eVeCZkcIRL0YTuUDxmHpML8vbkeT+a0Y1KuWHN877DAuVPh+Td1ZLla90Of7Wx7EWuWQIvHRFH0tRoe3i+x9ixXFQksWuBTWGaprYa5KR7w3rM8IDryHq22E0gQdLFupgQQ6vDX8MovtFIczm7UoyeT6QN/QSITsit8NDcLUS95Mb7W4hKoOX4uiFIXCx1gYBR9w7vYvI3gETpaGgZ8/N0e2x2mM/F0IwJyklULjsq3v3sAbzrWlsTIIjYe7GODSKeQifjg+Jqbf1ih6KxqRus03l7N86icrAEGMWNSp93FUt9CMXwtcXVgEJHBJRcjDUwNl6aqkZJcM070FzhHiA3usaZ87vGF7GmJPMLEEIz/itUHngyJUr49VKWZ3ShYgWaqIvUkNuYsKUd9I0GURyQK+Lx6R5ChNvRBcUte67bAcwHtHUq0RtbpOQeuE6oiy5vY2QlE+bvJLehOu/2Nx9RKQAFvS/yb6sg5Ue5Xh21qsQxCRDI8UaYqypJy9Enl9/+DGaDxZjRjnuwH51XKIaVnN7NL1bdGxJpATSrxVw8/vvrp/jab4TYY6t7gDT0oJ9ZhpWKD99fCiS1K0699ExNx8aeDm6NPLbCvqkpBIH3VlAfuL4fmjFSeZ6ZO71I71Fb6BCkS5lzv0Z7rLNSIdDYlsq+9yhO72f2hqFQzt5HYcTV9F/vcqARTNTvolT7fM6kFxJdtileJJo0l84R/uxeGvk21ZCG1kVsR3bPdMoqWmxyEP+CLrJTkBgAF0ssATqgPVCnY24jyhn8Z9fJKo35QIX/zwfcUi1vwSYagWz7k5teVChmayJakn393yq2hb8TDEFI4LdQwv3dzdadFjoescuCtBgRjpksqtigWqrGps3FYZFtqi7VkccSYfeIloCOnsoptu/YQD/mAF16o/roMVMYIsM13uzsJHB97qZqtCfjERHRTlTUxPShshIbJ7dEQLW8dibUeJaBqmchy0WPyfnIYW5cIWkHpCdPfGXXkpa9LPdtgGZsHAy1vVaDFlYh3TpgJdpjiXULVzoGvze0j5M/zqzJqo9db9yjeV4/3fnbIn7tzh839QISl23qhDO4C0nVc44tX7Za9xQ6ygriyB7MjSOpxCS5ER4Vek4M4arVSthmPknEhoEMFGSUNuYhg21q8a6O53M/muJxRdvXWGgJ0TsKUkKtIMIxMxyrNAkyl0YE6KfyXRSzYPnoUMbBRCMzgZLKUdhSMBD7n8a6X1TeSIOu+L/rF7BdRzOJESHw0U+6/nhTZ0hMJ1L157acJa4BmsuoX1TRFxzKaM89iJLDIuvC3P+vWugVX9HuIrauZIEYstiGS+Z8Zhv7T+Y31vs+WTiQ36TtXEaWNCi/CNi8JlYmZmJq2oHyGFxUp5H0VuqB7CGwdudGlg/Lrmqiiew5HTU9lW8K8mWv4d0Gz+9t1rxiIye4svOeS2oIxPz/ts3KWlIgfz8L3dLKBNCA0J0WnuXmmsASlmNun74ZT8+RXs8sLkJspk2n48wpo06ZiHSMeOJvB9asVDBqgatPL1Jcqi2HHwgRzF7DdocTsLrzPBRTa/oMiCQh3KtZYeZJxjqbCP8QxmqwNu+O9bYnmoP5BmopFFuaOcwv3AhcoRm8IXH8kuZkrwIwyiXhOle7JAlCQLxdh+VEYIpoUKIV1Ylky1q42je5Bwe8sZLuoFPI5L50GVfhzP8agXlzUm2QRkGx7ONA25Zejm2KwSVMbk0qZNlOFnKFZVZR1fyR3JirAq6Rl9rHv7TnqkcvEO6/flRvrGV6EkP9Cyv1VHskgHFlZPRXDEyRU0Di4dibOXji/nKNOk7Ydbog6CiQdg1YkbTqPVaoONBC0LhH5FsHjIAM7zkr1iIzMFA37dx6c2ZjIlejXJDpwxAO3Pj5dy7/fVXe3QlwvqXsCnOYlIVoXVywy5l1LDlECLAQFQKeDLc9mgCAaF2uMnUD97BupmClbiAltq4Z7fGMQEkXhj25Bv9iBoD4vZSXe6L/OL6+jXYkN9NdnRyLyy1Y94ODWZDoX0rQD2/mNytNEnG3UVwnnNYsO5VOD+SESmDV+BJ0pQbNGTo5iVfuOTawaRRrJaTgsRtiDpemDjSduqswKsIQ/zpCHgHgJtfPWoSk0g55L9AoaA8enzaYcRbqVPKGiTN9PNTGmxzABSiaojasXY/YdAVTNyz+X4I+5VJRdRj60C2qM5rFEqcXwrdQv4AhScSbb43m78fLHw1/JifI6gCcbdpx9XK6Z2q/mYWtWeklLttXvJIcgf44Yi+i1h+J6J+KVjwISuEV51ndGX3Jd9Ac/MqJgRJ34bTdleEyF8q/BNpjuO552U3l+xYpTj6T+lIMB74GwpuZIbj86OSjiC+BiYbNUShMvvgpBUzQhgU+h90YF1NPn1LvybZplGhlsROs7geT/r94UMktNKeGCEBPDb37t58tWo2ZbysMqvsh041eURImJsXfNIrmt0HlJ/hddkhBRQqKs7zPAryzPvgJY6TfGsTyel+BPa5HRGrtGCASCIS+QJSuwLSM/y2yy7UrLbG7aFDN0STmnRmel7go+/NDBIGVSzSSGnREqDXz+Qh8mv3O3dHQJsBsjMHTnCSBOqXPFoMWqc+ZEgd8UJDTwgsw8ETwJvYSwppOR8ru26RUe+W1/Q/WEua+clpt9Kr2wYdGd3MWXxPJTTSWx/W479Y/iwTFgu4gOObo0866IS5nRTWJh7uP1c7w9NRDNouXXWGjdgY3oquOFkLKB1wB0wPSdbhLTA1JucRUqvK+XpTco3RPqeEcsJHWB7CbdQk9PFL9Bq9vqDYfNmTVS+OOlRr6gDFKTm7NhMbTfQnvv1hv8DMxld6vBOiKM2+Qj5ey0QaYOyCKt/W5sPqCN8oINvjBtY9yM537rbzzwoengcOARrizUiF36FjA6qXpNSULiQWVfR3USSceHSHAKRSoR1C62CD6UTzYxhRHuuT0dIIkgY3j0l9R/KQz5iw0JG19oIz5pZcZtG+KF3VpYr7i5YIleYaRsdsIsrH/22J5YV7Hz6BQFRWq7LqJyJFRZwmda3n4XvbyngZywWlG99M7DPG/oYVFHoSXo2DiKRr/kPZA2G8zPK+wzbaPVXnL6yvw+f/tZCLE/lB7bCtqKoPAkEZHAu7crkXEAh/q4rthzt9ZN7Oq26x91jh+myi3Km5NIKPS0h9lDE95oLH79se4icx5wOZKtrLO4JIElG14zJaifjo2FeV0ch/4+bTIrI0GcY/tJpMhKbnX8Qv+18fmpK5+OxajZqhycNASFhEOIw68EbQdx0puHI+P0E+uc+bWJMlu8sZ7N8I9Hxash4aiag31tRiiLQGXWaIomXi88ojTQSGXEmNAHtDtFYTBMX808d8gcNFbKRjb7aQVuNLl03/W0Wl8sh6LwF4NAOH2o3WRqjYzOnuy0p/iMs+L9NI6a+/wSLrxNrE5XRTC7kMdnZPQNs4tvnDxiJvQD2fkipdHZgsOoM5ZvPf7636VnqQs9cLTJSzamDvenvGGTb5rZj77WRDA081XgMsgYts4a9XN+R5J8/ZeNytX8MwRuOG4eMsK1ru8bkvJS18kwHay50uGOaK7MOP3OScVfRJWgpMOjOIyjYvE0ulwCmmzPEQTCDCDA1ieqNf/D226C8kC0PQt9I+M1ibAyEOPIBXd5n/hjZsVEnhSmuS1K7KhRSeZDPa9QtUVH+6qt9Cirf3WAoZKzc1ED0idycEIpbdtQVrbkCEAZCVDcpxsvR1hYPfiuB5+QqJfGDcyTSNOIJoFeMogiFbFVuVN0BcLvx/W9gU0nr/4p9790ehc1irX1Xkuz4pZT+Sbj9hZMVeQV1EbWJdpjI3Kk0dtwxhrshtHR18Cn0o3GeqQEGX26BMuMn3uGIBmo3HXkfIbMf4q+4x7Oi2r3lkdyzTQDlxFLqQGrOvWUxN0B2uwScZz3bimb4oMMDNlA/mTGI6GkrTjDnlIzx98Xaz1meas1VLg1f0wVikk5Ps/0tDDZYbOfUq2SNpYa5MEypeiq4gfTN5u8WVDgopFbJya9yy3kZ7OSWxrR/65e7y+lWKNYskodF2AJCIni2JokMdiZMsOSPmDWpwlM92iDcL1vHyof5o/DnFzSmcOo4DVkv+quicINsClxKRJFVBvh4fKtarllnm0LJfDUcgC2su4wmiB1k/bnuy8PsFV5L9th5AkxWiJWd3E9ln+C2Jcvutz/+N27sTkh/2qh0tuk57lhcAH9T2w7IVjh5r29KWdtims+X6GTZlXg2C3qp0WTl0YSlM5aI2r+mGqCseOgu86xahgL5Xr8rYvtWeGhPlXxDsEW7v0A2SZQwRfW+9HJW3TyEvr2VRXeGv0/WYPIKUM0mFK9V8BJw/nWQrg7ogmQI9uYzyzDn+ad77M+IoexZFMALx1QpXBG1aACY6YBnEUiPNrPtsXKBbIY5D/FRg3JTDZdR4EaMMVFlQMplYGE+c/iKxk2q66Bn119BLl5bp55tspjtJDrovRJTOndINTKraL7ZBklCcuLJ4OKK9Va6lGOiXpzNFci8gHZush3l6CgdS8XodnzqmWQ+OgoQdBhN4apJeSDanmRK0GaTpUMcNI5PYPWlTpCovlaMLz06GJiP1ZdBr3ynnRH21TxeEbXKFZeGEaA/kyj57Zqpv2A4cdXocijhJdVSyrMmC7GCk1GgrvJyycxSRcEsy+a1w/3AbhaE1o69+lpxfmi30MPJYh7haNq2pVbdGVYX0gtE4sRHInJivNu5kg50RFNQABSi15yio0HWRSpHfa/uJ6FuIMu/76AdPrs0eNFcyPQzTpvS2MfR/eaRmNDZdseaOO+ubdSpAcZBlzkyMSXto+TiNWDgtviEvbd5EZdP1Wb30HQO1XrZtC6uhHiXCXniTDD85/zQrdupU6+AAX+b8vhB/nxWPsU4Ub1oASBSAoQOKZwCJC86lzGDVh8W3C960MbBM2O1YzzydwvvxoUFou+7r3IWasRhrm7V9IVHjnpVp0xWut88KfPTytdOPlIHWibFENvlmiOgS8IAY7+DcEKTb1liN0DCKyvkU98d38EZWDrSUZV6SpPYXFEgGTSA4Hyc57M6Z8SRIL4soYQNyCjCb3w2U4xzin0FG9CE2yeHEV0fiJPCiKjEFvaGPd1hsZwltlF+21HpOFwvzxGxvgWsu1hrW0a2LPDil7va4L4W8EQgFRj9QaHEqKuSA+DRAoh7pM2O+PS8eshDsPL1DAvyQarhWRHq66+KpXpQeCvULFx7hTc/DYJfdYuRE+OM5ApF0bv09jmGY35wEy50B1heehrfvuEfJvgBqFjX2L/rClL+JlB4gr4Kw6VjOR/f9xaVnWxAzFOL4+i1B6FOwuzULqwJ3UFdGUo1VRmWlp8AibBgRwwRWZF7LwpI6skjlCJE9CuGQ0n1nY8BXCMN5XBRLSCRc+o5X+UQkcih3I14JZKUz+GFdg0hdaQgBiGziHDahclu6OLPWLijWr20zlBgrwQYJUqkU0d3T0R50zbOU2k8CGDiu3ZYsJ+S8vW3itF5Ry6H7Tg3VUxMXCDenhD+vwpaG6U/TxBSznaVEMFLjxte827ctCWbeOJCpko0n6DelLzZxGFnU4uXsA3fMnO/3tpp3v2Wu3JdciJRTCsupPqV5iLAzqmu8eg9VQLcOhcf5A2Q5r6qzyHc9OuVhLOMO+qcZUYT2r3dgPAfCv6gV1JdjvoFMVrM1F4+y5aExFes+KtlB7sUgZbuDcwVIyaKOpsjh0jfp94kksRXydbzTQ291U1dxAbp+CpNAyuRUtc5TS7mDb1/8toUEOxfnNg54q0vL0TSJ7qb79aweSQEDIf/V8589Ob+bHikGMDQWMpWjRSE8RI0ZFAxsyj3JgAeounjhMph/kWm4/XtaRxe3zN0tSMsSg5nfAz9NIxQ9XJBU2mlHMvMXTWQcZrk5GkYnqx0EW5hThUV9qy7R95YposTQLbKIqI9qSHpj+5C6hAxaqjLpVbq/vFTl+/ziRrO1x883ItjtPO2L6V3NIDt5MgrQDUUrABimeRsppPyMkWBcNV6eRQMKzmOB9I52/Nr6LH0RqcD8hA6DqAptVAYkYKIWwSlzoe+0Snhf8bnIElnML6y7fb4EbF1YD3w83bu2Pu9SDKOLh//VBeHpECuEeeTCGxMSwZXMmVVoO3oBZa+u0GjyR85J03bitDlX60nNfpQpM1Od4B6lo9ExPzN6t1qZLLZ4iapz3jw7qRLUI48gPFKNlqdGYbSsPTSO9kYt6KAa5rnCzKWbV8ThegNpGpsw4CnZ9UD2T3p5+F1uhJG5qDBp26rPWmxYzXL8gFan0CpHBr71Cq1rYAVXxswyZ3Ji4AWPlCEZgpzf4ZZ3PyBTulrBDAHcS6rXxARRZ68cN6jk5JowrutZauUCbxq2Z/o00Eo5d/RH+Gaoj191FG7iGdjSz1iO5v4xL52XJ0Oub7cmfO16gnkZIBsBoBzDSjYaw9/9nZg22xDYkuhhnFS9trr51/L/5dYAKQMOzWoWyclQlccOpSXgcjZ94AtN9e5BJPhQv09Aqz5eP/rx88LBP0e/s7TIAn+cEC5oYnc9j2JhnuR2/2GsdPBjkwiHZBeiVngroubkMobipWtZuOi/TxvY9gBMyEiszRSVBcGjtRS67TFWWdM8fV4TB0f9XG3mySY7lMNbypXe5UDLE9RAu9j/UVaXktHzM/N9mSdQ9aQqoCNlxk5v+65IrK7fw/mxmKzqTN+XuAz7YjkV5nzes2Nqko1XXw9Miiw1OwMGDUrG+LI1eJ9l5k4Pjf30ZpoLxs3ksuiakRrkQ5q7seA5DX32DK96YiC/2V73le28LbtmojPzbkwqLhuQS5lS/t5xqTo+IDkDfjI6MvexGnfObHjQWLGzKndfbjIyTAZ3OkISEpx8j+eu3vsn1zzBXEaR4c0jGbdmO3eZCpmrnxwChcdKJ2XnJBo8nkfNd/zz9WRDGbhrafANSFD1ajFnL4YW8j9fbbpcwYAF5WoBObk0gZBKhyzDOJ562xSaS41VBr0I2jOboViip9djlSAexN5LvjAAxvKiVcQ3cJtoMQdChkWUbdkjlKLufoh0aMmAWpmAd7rlR04aWKkWiY5aMVZ9AADohSeOe5sVJpkvz9UhpMKfj3XitVgzzXhv8ki89nYNTNIm24KtU1mErQvMKBjPi/WdO09GkAkZ0RYW/fhuLdl/DjcZYvrlJtKgKYtLnZ3wAH7boecTVfsiOiWoz547CQ/rDY0JrdzhhgWhMHX1VqLpl/8SH44qgYappA+YAibs+TuxUQmpOLelzQIX2e5Hc7Pj5ARfQ6n01EWAnWUG2UuXe9SGXlOT127opFQ/bhv4v+14eOnc6x0asC+AZsORUTNtB3GVFzpYwWSROmD1u/QppI7R8lYOBDFTQwiAYo0cV/14LTq/RErHxgmgeqH2HqXkWmy0bQaNVfYiGXCdiCA/PE1CtcXNpSo4flhlx3THM3PG31IGzdORuz/H3qaXWBUxI4V4GpnsFTfjWRufvpDvJSUr3ph1iZnybaeOb+wwzwtUsNHj7PLoMMDo0HvC7xgg0QaUlDu1tIEmHgwiceVgZXLq1xrps/440kFiGZYW1Kve4w5Kpe+o2nKsErhJNwbl6IadBf0pMtDZAUpuLczkP7R1+3YWXV97pU3il8LyEmLSQnJJafWk7dv7PUCSxSw6KL03ikQnxcs+G11/Qf1C0AEjZph7pSkAbhss2DZQKRzYSmszc7M+x4cXV970IZSO35p2bWJcq9alQ6NCCvcyavO6CZf0wjpiHn5+OVQznuJx+Pn3rkFqwDVhCFRHjSNgubCTKM1gbn2Pi1K3B9zvGzr5FT8c0qrHBojYCfWFgx0mEnImuswKZoMPmQhrIv7GPgPA5rEsxUA5ptb101Uyrdlz8TLcWJpn0I0LS4oJURK/e6KpkxNcovFEQJINOnsnT85oeXi2kzlBWSHRJaoFjpwiIALXXMbRrqvFKkKx81b85ZaA1B5LAy1VnpsRH3WY9VAqW4ZmKa8Ku5+ir3RHu13glFZEETJ99r7TaTlZ/MDwpf8kt73GT6HRTPIeDhWe3iCSOYN8UEqMNDzxH0KLKBujdp4BxOMhPGAefqeFd+EGeW1/YwG8A4sP2LkZavdblOZ+1qAzKPnBKunzYK6+ajpywN3/g72MQ4gCjtNDlV3qvNqJmpwltSbLzVldwKNBO2EyTGC8S8OWRXC84kq9WUyluOa0cis8Lhqorom1khbEXVqAeoaGRMh7KNpo2BfD72421QRs8yvnNqbML8Cc1rOgZIK8vHoscsWqry3JpBi+/TWKWAj15SBC+qpMcecliGdirzySxV75oTpp9ySOx/3KvUJgWKXMShy24z2Dd/BIxaNcEIhVnWL1vt0TqtsFZI0Ht745O1mz+WG2SaNx8zfGBTgpSEy6NaUlJXUPtIeLOiU82G4WW8jKY3BlkjKwPjetZs0zusxnPCunDTSRctL+lr0UJDNrij/TTYnzXr6Kd3/VuKIWubJ7aAwr6f0vXl7CrpUFGAvZU+zBydfmaPWz8hcekUs0fL8XclIjHAJm3FG0YaOnvWDR9InsXiCSMzWANsO3Dj+1U8s7E2MaReFrpEF1SHNzeUyABQZwd+ud4BkfzXGPPM1dnr8cAxzEdGHuC5/sXgL7HrXuEI8PNV4jW3TwtGXUxzkLyXArMROHrJreXajULCfhr3u3hSgct4fD9/BslURGCfS6K7A3pxERq6RH3O2m4qSaqkQkUmnKLEcWit8uPZlXZr7dblUZmF82KJmptLTL1Axqil6+W8MT/3qCW25+OUSOI+z9K+/oCWj6oIpCAsW47MqpSkeqN484zeQdT90QD04wD06iRVVpMugIzoxW3vkpQZXtS+l3+Ao8FH76UPXv2xABY6BQk7NIBrVbFPRkpK2dg6oSgVVyL3ACoABi96REMK2Yn1ZFEQaU4tCWNaOoVMyxeSy6W1CiEurrXft5kIVjnPH+SxKk1bXA6lkdFvFYBhNU0+Ck+jrpH+1TLKAkjaOoAq6ge47yDm+qwHcgxhhGrnMYy+SbKDEf3negZM2QCYeEAyl8TDpg3RPM0nupG17xRiG3jhzpqIVol0Zlv8IXVcKKFU4ndqC4fC3XHvt6pQIwD3hyLNj8QfnA14PS096x01QK2/HQsSgm6KJ2cjk5mbIhZN8jMKRRhE5ElqnOmyDXlpdnn/TrDvcKUSHFmbHJah88YbHwTNG6t4mavvnmaJ3jpTbmBPEqVTdqh1OTop3GTmQyzE9xdfIYGlb2jh4udP3ObzMhL0K5A52PN3tXwHZueJFUuur9Yor53/ayve2Lw24bo7hwrJYTkm8bh/+02rofGQzEddvb3R8npcxA2Tny1e9eFhonji7A826DKd2RzyUjJJHZIjnprKg5hGDiqK1agzSZ/T/71Hd6RZXgXzlFI9oYINQY8oSkQJwzn2+fdQd3j3Q3EAbtLBpuNdTm38TBX/3t/T7Q7vPKun19yFRzG5QMKLXoGPUv734I4oYg1o0LYfQ/FG+F5TDqh40bgkco+7f+vmQaRv09FVuTEOXQh7H+lm+QfHnoF3LmOPfxCZfaDhZHODp9Z+8+rzZpkZhL4vIu8ykDgT3DSPb5N8SELMEqIxo0cwnYArxb06Dxw7fwfbm6TzJh9Rx6ZgUbiV6/rEUg7ecmWX+M/XEjQmxEYCmTrRuPRhuF3IHDZaVccikaZFgdpQzvFZF2Vp5riExgdWwZ45T4Cb3Y1m9TJ0rdStpIem8+g90EmLCb9Y0PZRJw6WlY5WL5l4w1nZA0ptt33pZFLvzWinBkUjTj52/x+V3zG+//AtXcYEBpap7qL6y6U5fAiorvB/dqhgHI1+OXCCGD1Q09vUWW44+jEV4z7vDE3fgh0fp5Sq+nwyfH84uK99TQ6MOVmIHgC/LL8NzwEgDGcTzaKj3mu5QR5d5oxZN0CsuamFgFyqu7sVx8rLOS1RZhpO93NC/hDeGs6uURnl7u6dKF9au2C3QrPsvPqk8lXg1YF4tA15xNyIyneuo0Hy4iJwczDro6w940QH+djW3biGrYeXlH2tjJCECqAuhdBYQoQzkp/AbGAVjm5HZpGcZc8lM5b1OZijUNvKfdcfqXm79ZTdLelfvd8sC9CPSzqfXJC0CamPaAgH9/n4F/vRlo/il3tYkW7ijhTbVC4ChyLY3/M+HsKW2UKjcgG4SXCRh/I816KgMG0ywtnM6Rh/8r3e/HLu0WxdakygV/P8NXxwbH1DBUdbAjPr4WyFO02hN+7ey3EQTjPJPQooSCgugdQ+4tfJZQBoWv9EEvt85MYpfhJ/xk2OCLfBFxqY4FgRzFTZ3Fwm3/CDR+jdqdZZA47FDUksJYsPjXwSrSU2oIM1NAg2y0YzQ3vLEL3UdQhtprmvwXlYA/E5pl8PvPVWPCHYlUdDWiOUeXF4GUxXDoTNKvrkPpz0NhtWAeD3UWxpbun8QvwQGVPy3SlYPOSknNvoCV7x6MtnTsL6NsKs4dGMwRBabXVcGrduzSOYTja5R36DEtH1/M5WfZbL34WhCiERElrR90fQWNTgtmV9xc2PXInglxOEcTGddCCDxccBzNrAbgWaFr7YGhxSOCWNaFeAmNla+OC4YfyVAj2AFhyPEknhIk0qvRPFVD+mDOBe3vycOMqoBWFwC0GuECQNs2rtYfHEdpPdLUXlpVHb1HhX7cviVaEmO4qtgjVESR6juAkX60w6wRoJGe63Zkmpn4AlZSAAZJP4DA+fkzak8gRJ6fjktwxOYybhpgiFx+ou32iVo8xD+9p+EKZJtPONvVZTIy0U9VQ1n6qIVAqAEpHx2nO2pXbz9HYA/Hpq06fgmkEeYk5VyigCcwECpn3q7tr1SdsHQZzr7DENDuAPNaYQZOHGviovfk62kBRqswXVx+xEMTHikFvjRAkXvuHdr7cQk0gnFiuDsLxRfVQgrRJX1KvFwtf4FE3P7CBUlD/B3q6fhDkOc1xKwRykQFT1PaVPg/PLfJZTjljeQ/OYQHNXdkFsfyT83uWBVd5NfJDfhvuKngDQ8OzDxez5h+GCuX07oqktg9OEjqGCIUscw0cCvYicYIxkVYiYMzTGYFWt0CpDKPrIUC+RiV/qbK3gtTcBmMQsjL0l5D/dXBby6ay+U3LJPb+jmJGS1vuGp/keq27CGhzQnW7a7c/MtYbhBGm2eERsMN45oSDwvkDp+UooSvL/BSlxBjoAnmW474LtsHDADpd7U5aQyScKZAR79lGigrukC0263vsEgiVXNkV+wzvj4dgbm11OuNCLb1A/D9ir/SBBqIrCz3/F5Ilqid48qjLB9BV4WwkkBJ7dCCcuZl1fPO3x3+z84QORbIp43yeZthEIXDF6AMQuSydGAxDEZgtqpfgOghOWC4mw/E8SfuTJ/xKoEk8JKGFtczX1ZzaPFgkTKpFx3aoeAqGlDYXx7Ky8L6s7PoniGDkFL0fpNQ/UnmrvIirNrFjo8/LIM+kIvgDteV63AtOPHCCmAANF9swwuSTHGuozyeW4fqu68tUK94Ep3Cxwn4Oxsaig2xgCDgPA4TPCK4BVL8ZLDA0cHSMvFfcsxnOZ/fq/P6BJ5kuXUWn76KzkJ47g7sCf20UqMzbchujC0gqgtzA+N+avI0P9TWddrG6xrIIUY3Wyz/P03cgg++5P+vhpniVZyujr6wpUPK1iSXS28sdUlF98/8IXz5od1RdP/2K8j6BaALfV4ntMBJVp9RLwkZXFydP8rA0wFupRCtM8f/kz+qdBVg6y7jAzB7BTsGxi4TOH5lAnGK9DyvDHvA6iIbYQVRuFkSpJGa6tJYLOuUEpbKeN1zWiXlKegcuIoCWGs9ATH68FZst7sPI/rdCYRf9h4DFasTBPikWWw0ljUcEr9zAAcQMWstICiva2uxYbAfjCvPJfHo1819mxDfU9uVPssE9Fun1qDKjHXhTHJnBGwN3HI3hEeJ+ldJn7kmB8p9wm740K4OIE6glO+Vo8J2x9xz4GcIELtiRuCObzC7469mBQYSVlyFogrSwUNhDDEqdoozj2750ft2veERgrSJeFCLsMuwJEXiN53QJ3B/d/gMwYcBYJvZDhM1nBlXr7i+Ogo6B0XR25OE3ltBW6Nc/LIl4y+1LoJGKDuw1n0kGVuAJeF54jT4ci4uOhgMHnzzcJc3j550dZTWKd4C7Ss9mC6B7LKo3wu2uPth9HnN2R4txoE07zYwQxF7BXizwjcQvebtzYwQ4XQLD5kfP7qpucdQKWusAZFMxDHd5QpIzWy4nUh6pHsMvePUzLcoh9KAAA2HkMIhW3NV1dXzHXwBoJoJ+KvYZqje2RYNO2rZFzOxjGE/WlvAuPVi+NGyI/vtlkt0I3W2vcCIy1j5drE7LOoPFIWUqIus/DR7guSmNk/gWQetjlQqfzLkzKp514O6/6JdfC6+jhAbks3s/jvz8MG7WLMfwfrsXBoUWOzjoTO8dfe3GZTfVoJiujAfJjb0xm/IBlC7/PJRftMPfLiBJkNSwF0jAL/A6BpEtvJ5kPv9BZgopjidDdCUWohDMYhVOuR0a5f1A0DujYi55J2LFjj/FjkjvEreaZ+guIAIdX/V5fu6Ml8e2AaKNZdIRtLqGKDc4Gjad4RNoP1cKaV4CsrPH2SA0WLvesFwsvM9VxhX4nBAsb1qAP/5A/slqZMv5oCDEHhW2pcdWETJvkgyyt2VdvVqCF7f3068NLOQCD0XfVYjPN2290yWA1f6xPJrxhTxouUlg5fzmP+JSvCT7DE9cSX0pf8ntzAiaoDXrUaCymE1cViIviDlL9niNB3g1VCvuXnZmjLLygQXHT7hU0tYe50D9U+Kwp4nogMEznvFDg3lWJqZH9sQJ4QA4cYjV1aO9UNr22Y1u819G6RyT9emu+mDVM/bGRGhaXxwfLt8xOYST1+I3KZt1EgpbIPE54OJBPcxdACWNF29ZpoxAdX1v6PI27dL96k7nSsjpm97LiNCbLBSC0Z7vcRCSDX9L5nKYn0lSpTINpv7h2kUGNPlafPI/TcL9xy9ITglui7FdgCbcyVANvI85gI7KqNXqYItvVfF1ZOQf8DSlQFcOHpY0nIcvZ5IBPJXjemAl57eKNggULpdvAU+BTo+lK2rqLnpCSt2KMSRB9HZ2bwapdxKJRSG7rI3oMlL3MJHhFmC3I8clMY6Kb54fFAhgq8irkw5Q+3MbT25C1196mH0XnIWNrIa0V8EcKMUfx7YKJuPV4n0tbqw+S6F24AMTt9SJyQO+/ExmYSc7j1HrW3S12vSraprV8QBY06Dm8TXYzZBp1RFXV39K0rEt1RQ5f93b9Ob8DBXBFMJYhMgMzH+6VcifvZblsrYxWvUYiPJNZy4TVRtB4Dnvjn7wdRpSVtkqevDgTIU7zvlK2FB7tTk171SY16tLnnmpiV1yZrLuYrhRuyE6D0madQB5MiBOTHseHXU3p5itKwPVnyNd72ryvJzBGgPeX+kyJyNR2ZOWKiP9k/FyOHxZP5k9NPCL835TTRJ5zGxnpRdu9j4r6X+yE/ehezDZXZsZMdp+ekgLUQVjU5cLTPO2ck1aohExWhk04e5l+XPHWp3L+dLvW3i3GmesaJVgmk7+ea3VMU3m7F1Y173n1JDPovzWp0XBJH84X7KCsOl7WEikohyZb7Tv0dQjsmiayo4lBTxzJmg7QA8TmiKDWBtdyInbqNfllJ0vnp0YKEM6MI7MMPuMv9ZnjOVOSMN/W46NSsoxvIOh+kGmkcGEkGBXLpSUWpYnRZrHr0zS6tTvXTXB9NcaiCag/Sv620salBZnhL5C6Gps/6LMO3Wi6JGYNjCEeKxvM5SSSnSzg3L2GYHgkJBwKYCHtS0NaZT7B4RC26jhYm+sMSvZf/wS65+9wZa+ICyHHpBO2Vmm8pL4OUGIgNndYKCGELOSqKB7ymchQiYP1Awz2C91d2lhs8l4kqA63q1Icm7F7riytlZxCkPjSRSXtC5HrQy4AawfhXyEuhgOhRPlVJ+wwCezNGjePY6s80br5+NTPKJSOnbaFlkSTVpL9xk+p/L7OD1tLq0r/qkdE5XxivMX1Y95R2RpVkRisuToc7M4wNAARdHe5p4/pHUC9edpC5Hu7fHvzIXP02AsN0naQD1U6tv7z3wqwk6ZU7MwjSKzQzWTXpX1IMhjB5F6kkd7q7UnApxd5weGgJDlZpJFo34drI/QHZEnpfcC7ZfUQ8Qb28+vvmRxALvBd15fjqSPMiEZyly1EJuqwQyaTd2PYoxCMz9lYQjqbJSToYZ/cR+W8LnyA+tpQxkH18G8Fy0uHrMt0nKZuPn9HnCN4KoBqR86m7VfptfjNt8oG1yzREtgrpmEQQ/RBMOs+O+PQInAohAW2Cipuw3VV5q6vh8Nms50ahgOZ0J5f1qDndelVJFLKjzqGs1EXPPFTp1kcodZb1+i69jBhzFpIshJnuwPsBxIh+MWMbF03w+AUBlqAGBpkKlxeYJ7bdpb/t960eV/r8KynQTgSGN8R8FEN+a/jr8RdwGXgMPVRlc92KvxeQ68dX1KRGvBKk1dYBgFugGCy3EkJ2KX6bUTM1IDPzDU7sVFfK6rPJNh7rCPyL2c15L8FKiDmgZuOpvlawFPCD0L4VEhqPDOGpFGIZ5ETjf+z/BflCfUIZqM1nhX0io0bbSYkWwyh7LZdeCC+apQeXxUb9LbB+jE9y2HP7+IpYUKo9UbiDF4Kt6LEHI08DfT8GYy7GPlIkVL6sxCAc7rxHOlUtRabc+P+rgTPjzKfHS6o0vU+Xfu1OMF4dyjHhqWx26HIjBk0/yiwFeAXDm0+lsoQ2IS8T1TSpEZCJQNiLCm5WtC6DmyJ7KjpkukJ6IK58DKldz6hy+DmSAYz2QKVmiMCzxda0U+DtMACB0rm2IUqh6qysMnUVZ1lugo3LMW9hwmKXzJ2SUqVRwGVj24oK6kqhL6UQjPtyt5hZJT2BuFsSK3IVz5tVd1P/7BhszgDHwslD24LIV4EF6Z8OELSZdN/DlMFgSXYMCXOzyEA3R5h8YfSMLRoEyd0fr8PVuVo2MOl9fElAWKGmWFIXW7HrHxGKUTB3zNd6pma6u2ccb89mqVGem0/DglCJfPhJN5xglnx4AJu7yf82skRRvHVfhSPJ9nzQTpQEh7J8ocOzhfm6faB/rPY5wRG7/6GM4v9gjOOuKl6jhHZ35ZvUc4yxaEU36zwjI6Hhc9DGVR0N5ZZ9l1NQBshdVpDK8K02k922/KyMBlM6ZPeHYJFLvEbY4L3MhZd888qNsPb3eD9hZ/f63PqFVvy+tQYxIrugQzXArlKUzhGtX6EBeTE6YjFAComyrABBj9HX2rdlDObzdThugarSOn301bwMgMy/J/174NxNZqx6LErkzShHvXijF0oMhklM7Ygj1n/JBjbCYAaF2Cptb8h84aQSM+GGleuMyF1OAEv2IWeT1YnMzexnLp709oq/IFc1SkWx/iE9CUWGBwbqZE0vdNM3Ez1I5Dnj3jRKxp4c/qw7sanOdasP8HNlwEFsOZAVDnVI9PPNdtOlEPI/RQ2KKf/AJEBnsn68ZY7Kp1hL2nUeTqsGvxBa6PgeiVnMdaDR04jdDsdPubhtFkmhPVlOXbOsAcxodlzX20U53JrlL/jzbWMxSmzVwJwCVgRgj2e7JDc/JHCC7B3UPfkKqFy1dTxdjD9MvqnbZsEEIaoMTyYOCqhheGcUWBudV1hO5n6rWralSqsINegRNJqzJDX/23aKOdUesKn/Tqrww1Ia5k/a58U3SRV4ciFQw5KeICj+PHfEvUyzIB027lRs55EW4YBZ64iAFYmNM6bsTwgqm9h+uIPUKXLrZStC+XjjtnIzpYNpJpob2cFuj+QBjPvgMfeO6JifbQz0y0Muh2rvnHRSheFN5c/lxqQnSZ2AhfuKnRNGOyvdx8yHDw5iAUOIGNMT7rfehGJdsP2XqluKGzUPbWCqBj/TeeDFXAlUiHKSb0Ln+pMpTUgr5ywq0RVTAZuqbpzj8nrb81y27qoKNkfkO08x40jG1K/8aQ10s8ysW4mDARkoAvrXUz2nXC2Ay5wZSh/WrUaS6MEkFdz3ZqOme5bF83JA18R1+g/iz0UUga8vKx+OaiupQBxXbmsDS4uWrVlb1kHKj4vSet5NGSYtSnTaZXJovx4Ro3EoNgGNYwNKHGtcH4tapus/plxM1uItP3Iw9oiO1ZVWmTwZ/CqYiAACw9xZkyZQsqMtewmnvCIydfFXufZUL0TURYblcOPwNy6ElUvZM+Jd5D8vB2VY1gZzAMz9MegwMcrhIhssd4YDB1iXThCgFRY0R2YjWCcm8A5EIGv+skknYJwqCmuYirzvQM34SJPD8BDGbYPiouTUwbYbpJHj08zRcBRfnljYjLTWObuHBBPJmwDrdn1/iFd/YIkP87wLh0ywn4zC28fWyPn0KarLY4SHfLd2L4a7vt5UdgIAmKMxckg75F5WXy83DzgZibJj2oAD2g8GsLgwpRxb6aGJhdvisINEvkULRPb6z7Di3MmEJRhwkyxqIiGDBgai+CDXOYPX9RvBPGpJ/Qj9rFqYOU6txikJa0vnCtYEi7qexmbstLEA6pdG8OnfHIx55JY+oWLJ1Wj2IwDeQT1waPbbk+WB8POsB/USBkH7rxI8r8esm4GF3F6wxP6igvsoD9bf9AqR+tTiomBmwHSoXYyLmzSVQdEbqVwIpL9w8Ga1EUZ8cU/IZYYkPuNGPsL1sFmgziSLWv4bQE3RMHzXz9GseSRWD0GrqKLwkHwmpGscPmdaOgSnXwkjXqIcwr3BiOdP70ZBx1y3HcdHoKy4Jr93grQMJrEYDEFDd/xaBICugrijpcoFw7EpS/1HuztzBpzAnWGhS2fZEyvRTLHVRRpFFtgAGAe1gov9jO3PQzuVfa2jVyPkmaTnhwh848rztCl5Xpl+Tn0ap1Lhl3s4aMrvRrU4+JXYPtBKONPW3EqBxLMrUlbRz40QO1Kva9U0WGk7Duh/8vlFMbzhMKAeXT8CWrSo+uYdAhiKaj341FCvJrIfL6SV5H9ODmcNuSr/SHo0srCBZwWi7U7YKI5IgMaJV8loe/FJEzPWxD/jpssFvnVY38MjZITko4eKum9CxmkSLLL1F1XRRwDnr5iQdKU3lbs+n5G2ZWUrOM5vBYnJhprYfBjXzZwfIeGjDX1P6D2MIaewAcq6sCZ9glCdT43nf3d29SOSZq7EljR4VXjTy8D3fD7OY0rcu/J3pC66Ehh1KlSZ8beP5ULpn9lUXx0OG2X6n/wPWxjIMVTkCkh3tULEejzVUtGPrIkWvl51YsKT3CdOlBGTATf84rdwBNcDBBxSbRFbfwidvT6ncFX9e4LyhXqZh6o/jtBJJe0Jhqugl0A2dqSeQls7+mDPjdtCkSDnGDInSDK9wl3tGGxR/0c8XlB3k46aTehWOID8kpLz5SnUSGc0vY6jo3aI6oRvKQgiAXcaXl2dQiSy5E4z7AT5fmx0wHPOdWs5vHDo5ta35A7ziSzQjnE1nnSXrwz7GLAhe6hMZ38sLo7GvIxWNFF22yjv606t5WucedIAg7vKqFhnIphdGkju7YAfr1YaeC29p728TfFdtaWFKUlcBH+fZ4AUTy+k0xPxRjSqmntxE30sPIMbCX5MbJC/7vOrcs7PuSzjsmeMXjkVSvTihKhN6YM2Ybw4wnMswXE0FI22qhQE9/m5IA7qP9iBfMdzguKy/O6bFrXiMOUVrbFt9ZswC7B0j2Nd7NmLi0x150QXHwQBeIQm5XUKC8+n57dFMelDUJQktacNwt6CpRZTGgizhoPs2ovtNBLZgXiIye33Cv9vB7Pbeuqcr+uVEjXMAXe8mIcLXKDrkAaibRtdZj43oaRaeyfDZK6weDRPnZzDQDUQ3DxZ0Eg0bVGLZRNRn8wDvPYMw4+NpZdet05AoKnT1f/tT7caNR1UvmFuZ0Gdz9G5x5h8fTb8DMSWHOr3SOqTy08uExm7aG8jtUTjEvCb6wFBGaZLD9jv5SbFfh3JrP/khdRoUpT64pOoBpFl3zPSincWBSxvcbhqh6OTQmLONz1sYJ0YrYwQNuuH4R6jpu7p4FWrWGUvY3mAg5iDOqvB+mBbpr8n6IvWczktgIqljyzHkl8cylxdMCSaV1ZeK0i5wZgRTmEtTczKKTt5fKQtgrHfo0KKJ9OnHuK7PyrJniSgQVqh+dhyQZBR/yGaRiij4CTDiGSoE0oChAXWyjvQLYnPwKHz2VVc8fC4hk5NL2L4yC09BufbixOMnzTLNkOVNIhWnXjfIpzBRkGltoCSx6dyeK9SnEJJw7956TKC99hFuPAbb3j7A3qje8cONlQaIZRoOZXTLhTr6euR6Q1Qy5PN9nRJA9DQMhlYRH2nQZmwZcnTNS32TDvVQiX0GKjGalaHL3qVOVMyT44UgxvRs6+5VGwfI0Mbi9kLpe1KWdP2BOMJw5Lcma4k/o/ujuhyd6YzzHFdjpFup3vVv3UsVscX5aPY0qi5yMnryPu/6V6Plv0JNNbo/vX4+AqIoLJkbqlTdMbGaZnV80Pu79A/EgriPjtTcDtDol+D0vK3QaoKWMdOIafLnORIL1MCEteaecM3nko/YS8sbLW4IhsuCrXUy6AA13+DkSPMwDdYqmd+HX3uuXwllRYcUWa3NRCGkfANF/k0z1jDWj6uRF6oZorpz53FYSqrDu26w+D0L+uhwAVpkFPrspDCLPVDtA8JR9zGS/wHt4ArCk39sV95eq+k98OMoTZNd/VLGLBStzGXgNlPnvAFxm3psCqslZ6DmvjoHrDvI/yT1aKwcLbm90UaSTSVuZCXELvQx7Ts1VM8oNlqcSZ2mZNwlQqqmWEhCmNyG7iePt7+R0vnJUSGl5PQdQHzR8fevCe5RrbgBStR4FCydCVQCS4kMisOF/UTtcwb45/i1AOBAgF9t9yrcKRexrArFekgdd7GEsb7EOHJcEox/hB8K5lnFNH4+aDHAMaI5NQH1lRPdc1FL3nns2nuOY9sHzE3ILJzKKqDY7zHbLUAO7+EZQyWi70qnz+sQSjWbsW5EWidc7cjCgW5qq9y3099h0vHiEeAZll0m5QZucrbL6/D97YkWHmQ8Mg8VT2WyfDsLH2F7+139RtdEB87Cg31LyIUQ3Cnzb7NZGdwjPGFkLVzC09FN9rGColms0FHgjUVfLX/x+Qm5EaLuBFYRfmcJQE6M4vW8XpoVJVpHKguO2XNd0Q1rvhhTvUMqb1cVlvcHaL9tnSBYwpiipoAUesz5aspRImpGHQNWwD9ekk3kTA/hXr79O9OFcrlu4hkm901PM26i8hC+yS0t9Qrbur0Cp3N0pOkXBNVUIIi3OhB1hqcWohO8P5lTb2dJTtp4o41EZ3qk/1v0nVC8qWaTrR4+0kFQk9DfpSnmgZAAUgJZ8rJ9j+DW7rzC8vgUE18+Zti1kWuppxPgn5JUGv6fpNqfL0YdqQ9RdD1SPjcpIVhBd9vbi9P6v0VmCSvQHQeRY+C0TmObAVwoRSYjZ7VNSxe051AjVr4DNy6bx6UpcvEsqMQ6UDP2v/+0wEcXZCqGYRjy6EAbVMjq48SEx5rJGr+QavqgX+MO/IV9B25qQP0uCFNOX5M4xs0EiRf8KG5BR4oD0ZqkNzObqJShRS4BcAr2bfTf4rtmpFFG5NfXG8drY25yftbwXwFJhKocpx3T3I0Il8JFyJizFZ9pwo8Bnegad85qWYmSSTd+BoCH0XrS4d1SBZQVRQehuXKvfl0KsIj3QPK1GhooVOZ1dfM2f0kpDUFMYpFza2sb2t2k6q9GN233IrGG0ilWN5zG6YlWAG5ajT9rGctl9+uUqZzcfFOe5OziMxV/J/SJQCGvWt3vyxpgExNufP2gkesRaS2rHKrAU8q3HiYI8yPQ+Jv2u6EKULgtEbIBK+yJjr5M9mQSLc7UuOmM76ZsM8Fm4qTuKdh6OFi2N/bf3fdc8658kIgHN3Gi176gKXKMyS2nFbz/TP0iOD8Hzo0TX5Eye0DsWP80cO5MpOcwsChV4xV//2ouRt8l4YYvoaXZ7yg6nDUOt1k0Zl22R0a6xX++BskjeRUCpUh7obR12+zoeqOC1ZoqtTgtNJeyTk1poZm1cNG56j+A2W1o4Xjshmk3cmpwDYhwzDhdZxQiKmciJU0nc2mLPZKivZ4pwiEAapvUbUL2UJF1Cq4Mpt76b9UctIn901PZE0+7wH7TzJ9nl4cKHMqN4Ky2rAFlUfCEkuacC9inueiUt2nTm7q1Y6pxAov1wzwIg40bqTCEFKcL9Q1ScNtIvixqwv+K0vD3nCSE71Hee4JTsnziNPVBj6q3lCUGgm6H/DGMJ7zR4ZV50qgXiY9UVGuC8AvcFGlFgddAvncluP2xrejJLTrCoOO269F+CleTScXAUNN/eusg3Ct+2jXcxKAGuYInFdUx6q7pRCP8wB4VorhWipKH79mRvHW4jVpwTlcQqX0dkiYu0+jZWmEGtyuLOdzvTd6/YvO9hjTO+L4qpMP74UnbAHzuewba/RDiKyJrD87CnkShXTE8h1y8mmDiYEv08mQscPKUQRPhRo9gFwFXi1pcZMf1XISo7TJrqPQNbWyVJgzw8jm2EYnHuVHQCLEj52/Agt+/yBfC/BCvq9Qij57ec7yEYYwGnxLVAS1YJuU3+alvXkuXC1zDvRYJFHBCpoUspgTmAEdiYjET+OaQNWcTs/lXGuU2R6+jZF2W6GewVOf/BOfFshdELBmv8/OwnJtWg6w4x6RB5XB5K+YX09mMB1XW2LNPjz49yzzeKYEV0Uc2rUsQmLuo+dzxgYrUwwFgMaHSQI/ir5VJjuLiNM0cJCi/VxBUm6mw6Kft6Y51l1PmgM+x7dORBkq2wGyXzuNzBUobVz0CQU1vEmLxbZn9pdKSu8wHWAQ24p1c9QkUaRqzDyAnpUyRkpFjBpBzfDy2uGAMtcwiLO0HevDsvFEFTB6TD4hQ4X8QG9KKlQ9jV7VK1cXuJLFk2j5l3p1MPsMtQ1SwDke1Z4krQrOiUVjkIqXD4SCO8P5rnEmIUkj6vUssFyUXPzADOdcruuB67hyJbPyQIerWTPdbmWWhgUAaHuT9RiIwGGlZdG65xwqVmbfcrTEA+CgEVYyVqcvLTIUZVIUyh2+fI/YdLHBldL8szUIzCDk+Cqsl4FOu+MxYrAzPSiciQ2jchJqRsPf4Sp9avIR4mdP4dy6FKqRHJRqLHoA2D1kHd3Vtcte6nvm1cA4fR9/gcKr5U+02dH2UHTap/DpbZ07Hjq4YmBqHLYAVU6W0JKNA10Uy2KPmVS2O/ssyv/xqESaHm5r146VDtM6TEmTEHGles3L2ZoVQ2luldVWsmJWZ+HbvK2LAU5i4jVixorD9odaInXWooi8+93o5WQXobobT+K9nvagvgBaLfzbza4mbWL+hVIE2hnpWXyMTKCDmBsdxVsSPjjmnmTdS28ch30hyJKN/mXo56Ifwf4N2jA4s/u1dRsVGc+gxCFm8RuuxVCB+XgWQidl4+TvtYe6QFkBZ4ci6e28P8csxY5X9sUJCMCPuDIAemhw58jSKwOEMbLYAIHuUm9fJA0QcS9CycJAC0JwAJ5pLmJwxvGhITXEbYSnrI8iBnbbTl0WE85cwBh9aMJXMYaQTJBdrU3La1TUbzaVPnbVZBjTmxifx6twU5p24fTVUFFzEvffNLj6Z1mFy+fPSb9ZQjIX6Ulyqay1y/fZc+KLNGxRKH0vh+CkjD5NRz7ayn+FPeaMa5wAXwwF/6GoxKZXcDXuDzuCnSRV8arbZh9ffW02Mry+2pJnmS5prNjlfrB8QdrVpk5vL/BRHLxplInVTFYzyUBnqozOaXqBfCcTpsE/dGig/LVtygpnsaGBxhD3rAcYYNeWMSzKiE9QcjXIFbbtYVJ3WWv+EGw8EMr+BcU+cWA1ssj0/gOCwHSuY+EJtIARMUTUzUEciOxLyprTUa5yQqdA3bMi7q330+47lznMzb6BJi9fQT26esIYUfiy/bP//GGNr7Xergaw0uZe08Oz0lFRKs876seqGLzXLXPn3WcT/lLT45FMRsD9T+1qH8XIC7OwesWCCUBTUq8C6pkWWOUdxssFc1B82B+8hPKHNCUtcLSQQnDeCUcG02J3phFQEYVPOtilZbrZiHQNAE4bLBYt7zZo5OE0OFqB4tSrf4Ax/0QUc1XpLwNUm0Yv5YOjeDPQHGjxNOgcy2YYFjRYDFYbsISc0NNEJIW4MbC4UaoZ0BoVxeghAfSzW/SaPkbJJfYBMFTlqsm6m8P8k1e/UsDQgwUzIA5lMA8h3JG6ZnNd/mVAYjTJMvu7VOmspxn2npdi4PTJTkORjlQyRG2UlbbX+G0KvlBI/hDC6mEF6iwYHTjtPiQs3v9AaTNbhaXR6IcDqKgFGaqwMxhum4QTsyp0ATbcjZehFiGMpDbeQFXsTin97sfPjSyhar+sQHyi7JOtzfww5HitPLRToS3bwTh0L1UWHVIQcuVwY7Vn2J+t+LNL0eSF5/p5kLk3i9Vkodo4+q3thgfK0x+rAkH5ToXUtH/aYuIE0fSNB+IGRiZ1+74zSRGjIpCQS8hG7HtoUF2uy/A0k+uc67h3NoP97WJYzFt+8AdDF0SSsZ1EQmAt79+Mp3G4NBjCKbWmEVRDAH0zzrsA/xmZYmdi8fAVWfckIomiGzqnGafx+RLWVps+o6BarBKuvQlZHm8gcXyraqHo1sObmrMk79ppHsNS4MZ2U5m56rreFFglqzPPNu+XlYhgf+koHKiUBP9HXR7u65DuwdKGBo5OVllXGE9oofLL2TUVzWUXsnHDDx2EWRxWnf388HizO6uNQXZpCgInVbo6/msyMrlA6DjbLMHhAFzmi4ROsxZm+U3iV3XcqThraZdLGoL42ZI2cPip63c+cKS8Po8IvOT8X2YCO76b5ggiQdwDRQx4P3/ORCg6GiYvEMB/L2nGdTtCFTNa2RgjOxHM6qowyukNeYsBp5ld5/QZO+Rcy13notEMenhFxwKs2OvNzIf1w93G8OpqkGXGj85BRUypyljJkTfOW4cEYoKqnUMLROqnAzw7lfCm6Zt8n7tKSpxTozTe6+4tqNZUEWwquacd5hq/4JeCpjOfdh8d5SZUMz4lRDum8FOpftCfM9CrgdBulqR5qLWGxr9NTMv60qLUWp1XeDpe+meB3Og8DMi4TkftGj/2YmyptvFWpzRYVtzCdAfRkKt6nvVRgMYNwJBjDis62LMp8U2W8qnUwY2BIVHy1P8E7s0wf3HaNKBW0N8YxQuq1Xc1Nq8GVpNw2DriVXZYqymCcX+lNTjVdK+Uzc53rFQff3Rn9qlpKbBV4oKHsmMAZ7TeX3FbrRDWP3nRY9VpD2ogR8bEpeGHt06RoMw6mTnmkSBYXsC9o9Z43z48FuqkSa+k3MLVIWZSEVRVnDGHwHmaETNzkpJ1BrCP1sjx0F/QUNmXhbQS1/hs34nLloVVESsltFczW5rsXtralM/uEZ72eih6UE/bAn89Ec/dFFdO2fux76PKDGU80KYgHzLr+tw7gIqujXzieeBw8Xj9a79SG/qMB7PrdwT+sMkEt2AmXRI3/mXPoLEhr2yuJLcLpsB3Xbdjuj1QlO1tlZtT3bqKr7manq3at4Lc9jSwe8ApAw/P8/WvLc8OEJIk36hEc0Hl+3rloboAVTK/qUzagPzJes2rlzSdXIRFvAQjIpk2BVf9omzIRX+OJIjZ8GkYW5esH4ypOmpOx8eO6c8F4NBVFTsqSqy0bCTZqq5TwXuSgT21ws3E9EhsS/Vj3kGl7GSkOwyQZI3CZ9UaypgAD7XMB+rzmuuk9M9UC5N+/gM+BiEr3RDfMCXDypI6WbnDaA3zzAFKSimAT+fFp+SY6MHvVWtWbUHnOzaAUw7aHZUKgDxnS3oVz66BhOo9lyzmZppA72scCeuSqESi7816VBdFax5fdyHic6uthr0lnqv01Ajg4L+I5k5FnL40h69v8PY8Rtn6YV3CX3YF6TbayAR5AL6BKErwRvsP1SdnzbMAL51rSpcCcXMZ9Bs6EOd4qfdqi27jFohRGVS4lKL0vsa9XlufpVMR1FbqDZfEMXoXd9tVoeh45cS9YEboZpTnXI4MrhzOjKdMW+SpZgKrupWv43sexr36LrcnNWQUFDjckomUIcmlDM+hcZ6pKNiOi5ha66ISXWzoiH+n9C9PcEP1h4vAofI6osvBjZcOePdgikDpBuizv+M4dH7L0PWbYBD76igpGQn7dMbI1F74zgiIMAijOxNnjxyS9UWBt/V+wpB/m5Q3DNJGsVhkGKUJXVivaYxCiafQkYXJ1fyPvEYbM6h2gyOOHINH6sadCvYJ1DslbUvYVCbihFsNLcTCMY7H148kttNfeP2KKWA3u5fNJMJi9gV+IKDLWh3ihMK1vqoDeti+IH38w+UTbI/77A3Y+Dm84LiFZB2zrwv6AroTTmkKS9x6Pg5qMFJaUAI43ZRsF/1Kunz4X7EN5CD0qbHEzDqCvLsAIVH+FqL3Y6r43QfGORBUytNnUmeP9hD4kZ0zz24uiCa/nrdHUBJUEn37PUCpQ5+nt4IqlbsBs4JJNc0b35PP9bDmGAQCmf1K7VxTMoJiHsRKVh57VlQ7FbfLrE+4DX7zue9vaTwXZRqfVA0RSpecR2kEGah/ldSCW5BrZWv4cnZ/JvXQOSAfvz41zKFQvLAVgz+nLLX+sWsmDURh/DY0OrYwIvRmZSTBWPq7dws2X0ojCXIKYMPx9WqDUOan0eVmFE97u1F3Txi+zzgZPU/gc1VJHOt7+u9y8G+xcXzFjIbQZ+gpN1zHJIhPO3F9Y6he7Dpct7U4bEjI1cWltg6aoCYz10OMImHktW7GTUDNduxh0Rzv0rId5kum9848DN4qpQCgdjWobBQ3Dunjl6JZSecaHHIj5NtWtdv17ZTAS/thvfNpdyY8vOh8t6ozUGC35DSaFq2CC5G4xgs6zWgGosPgsZaAnBQT9zZP/3g36ew9Wa5abtB3LKzzq6nfFTRn6TLLFMGtkJp4N7X5YOAbBJdvuDjtl+OQuJC7CKPDDN6pL5SmHxK2jjOMF/gL+EfMAW3AphbcEsYuJMxVIlghoZ08XnkMJh5cChxpESEv3/IP/hN8nkgf7pBm7ZwA9UHYnxqfxhW0NU33ZPJQ43U2kPIagwpfHretVslOTeoKSiQRESBPctmYVBOa2G0TdvNOsnlvh+W6n8yfdPZwkob+IDKc1RAAP74VSwwN4dYSdCVhBrmgoIP3xcHGc2UG3IXGFXp327Hn3Lsbn3q9JEesVuvkq7+0ACwnS7rT2IRRWCHM5GVKV5s6NyQvZ2Rk1VGMH90P8W1lnhR7fcJzMOMBp7YD4mfQ7mjUAZ5umj8I1W4aCa590btIZNc5l6AiRTT7A6nvdfoprqIF5Z6xdd25EXeqko3bG4RDAzaAIRe9IC7c62W1QtzlwyXIKQyrfE6cFTRQixcGgfB/dQY1kYZUpG15XhFolyIsbeCRkrM1km2cLF6lhml37IvB9JR4dY+BTofk576C1/HUC87GYu758AHEDMnj09B5MuE1JqKDFwUsWbUFkmD7x9r0dQXOIVljWWX4Zxa9/fgqr84ef1rEsmzo4k2iDD/bla1fKhHhJ5LYvYfcQ8ldprXWgybSCToyYnsvYiYi5NeeoouG6lUMGYTsOnFJ/oMIGh+FpTum9LLnwtyaD/W4ggjqK6SNJ4Qj5bfUlakEtfe9xlKNSt4DkMI09J9F1nHN/WUqf1XrIdlEyld6Hb968wasdUIvdKZ1sujQU0ngOiNYrZHYt2NIFr4n7OsQ1QxJEw2iag1LJoajqy5lNKebDYO3qGGMiBOf4RgX6WSvomMYFTFpmZw7HFB2T9MySzezolLcjC/EqCFjzp7MYB+SDUPCzrGbccQyOaJXjACfXiwb3CYvTSyooLq+7Dwrgm/LOt80mUohZpBNW52JVh+zOYSpm+DJhgoMbzr0pJwtsUwQTHK15CRiYCpgIZhWLr11/tzthk9dK6NRgM4uEm4zQitig9BvaRah+hSjJAhyQO+/trdmFMAF9h4o5Ifnn6WlwTxabWyzmiL2to74NSjZ++Ehaxiaad9aUkk5RjFMrCiiMIbrM5x13cVMn2Skxjng5UGSQ1GD8BQbpj85bdMeVpNmCnZF2+5yOA99Cl9tIBGiHAeN0djxF0/av2aiL/lcOo1etv6oXI7sE+t4TzpbTLEkakLXfrxOuXJzzSf84zp8i73w8ySx05mh5drKFYrExz/WJ1+pi0v+gs42ZZ4I+E+Po4+irl1Cj+NnEqYI4w5wzKLJCLJoHKKAYs1Gj6oPXPTWTKiTjNT7ipAj1fEHxyWqoE7TJ4NbgWfJUqSulBhqyGyy3Da09aiZqc2wH3evaZ6zUFuxiUQuCJzyAIPb+TSBerdx9Mu7HYPeCDd87ceaRRf6gzPRtNaE09HvEH31BJUcrwn0BC33cN2MUYCwzwexCw6mdlvLbLEMmuVj2+av/ALIwWU8parIH5nvVUBI99pFtT5ALGO6/Pk4Ogv4so00yhCroZ63aMH22rTOB3Kw7iRnCYfT4hg9Gqq0qCikdeMYgY/cygtFg/XA0L6ZlDbhlERpflDSnhEv3Q48R5A7aPxeWwzZ2Q5StQq2IECRoRMDjtRpaZqNYuaCYHsoHnDtWEMSUDIuUXD2FKhJWDdm3YsIiPIwYDdbGYHz6jEA+bGlYkwUT3gHLZChhVrhR6ULCFTDLoKMkCEvlVsYbb3gEyRIfTwGiN/3gX2ThfKF/lKS8tuqPGUKbn85Jf71SsJqDd8a07aq27FayzpAxob0ecCNKiVGh1dKQ7+MnutggX6YsdLBKc+rpGYT6Okc1q4O0rzoNnVZvO7JBmwxRz5GohadGcFfI0iwaHlsOun7ba9+w/tuYlzEBiTzaCuLuZfpCQFvNTWWUXDLbnqDej3miC1bY25wqXCXyS+mKoK9wp21j/+5iMBL+X2mfSvqWhf5hn8kIYH5MDPwKIuciZtdNVSdfBmNDh6Dt0l7oS48JDPw166ijbaOmHFdSXslsnKwLvJSsQ/UrczWi+92ag2jGdZuPSDGVVhZgfBape3mSv4c2ZNDEfmWrTlCUFwb8UQa/coohJVHE6vBHYHw37NiRQ+shSgTMF/2jAX4S8hZJiAiEzqRzDIgC1EaBdPp4c9YefMqEwERG6U7ybosEQPoikay6dBrB1NxxIuXKV/a8PSAfHefeRkd0T2bdF8KSDblq/cR/hnGjOPsh/VBcwvVrFUOiIYd5hhat0Z0AZTFBkQd7FtIAoy67WFeT9LK4ZghcgwXCX1ATfI5lOC4VyiR7zkgtILX/kYSflxfj07h49eJmE2OIRRLpRfJ4XsrvFwAZD1b7OYGfXAUKNnrLHLkzL5FucDdZMMDp/2GcjZIuzg/ccyxKgW4uRWxberPAqca7o79SkLQHhWVll327yiD+h0s8Euqd1lzeRxmkDzNLBxmueXhBP0hfxkXIVhBCe+rYt0HGLjlcpzPY1v24GqG01NQ0hqvUBuzCdKwHFIBgQfsETj7R2uKXEw3orsB0BevTh6EHQg/mayTTktSSV1Q7/3Ch1Nl8DLsO9K33p7lQW/F2c66J2j6/0wRasH+QjFil+4FCF6L/HZnAT/w5g0VtKARq/e+O+6a+79QCD48BUE42oAmmv/kHKlJteER5v3+edEMZlpoYqmsspjBX/waFr/ubDzLRU0JwoNECY3RDSwlpW3NvFO2xzlcpet3JOY207vSxb2KMRCdGXyVv+r+2jdq9bClSoaiooARIQ7CvTWm7j2UQ99U0W2YbJ5wwezHeOUpwr+R5wRU3WJAy3nd1lZH2e3ld1VbNfXFZumAaenbGiVlBCZbtywpKDuEMEYkabt01Wjw5Pf3BakwgFFHLv68XZx0l1dcf9ItqmrkIVy0gm5kyPwx2AI4iyCn8MY/oYGkubwkpSOWC4NUU9t9fs9yeO0d8qluyZ3Gs+ovzoa83cLZjvZsijPjwC7vB+0QX6tE0nmOssvwdnEdb3hpVIvATqPjD7yvFFjQggFTsusNwZAqLRI8wA7XoqbOtr1v0psl0Are13bhUF0tIgSiwxO6flWqW4YwiDElXKoydK+VS1o80FodoWHlYf6GOt3rnmngp382gAnCTgFljY6Lv0tkSyXxIQ3bQnRG/owlTrvHbhHcTnFqP7qKWd99fdKR+94t1mPaUWvySDzN4kX3kR6IX2Fh1/h4nhheEDUFmd9Ngz5voFYXCfovGasi4uqU9rcFUbTZ1rfbd01ofKQuZmiEChXxXHozRaGhrDJaP+1gVofXlwf6qFGKLOGzFFH/bwpvTUbZw/+LCnvLH89Mvjv3auksSKwasKOs+oQN+CqReOLnoHz/cnjNPJX6lewYXFB5OqbaPj3X/jM/9wMuPMbCF3ep4STFomCQm1Lp+nZrSQLbKrPLb3da5lMt8DFnQrgUhZeeoJUUQDbDA86vXcVEV4aWtQFqmzcD/f9HLt++kM4AnXaL6g0M404kdecY8N2c093B5AiYdx+coypKwb7GUaotfqKPmDV5h0NnAN96OX0V60LkP/SlQWL5JMatBMEQQLfCmBtZ6BqoUNfbwReq2hCqxwval+G7mqwSZ4wLjuexSD98YFFc8vD3V2h1SA3xASpZRMtWQqDg8LsK+5P7NW8hUEy0s7MF8AWCa8Vl2GvrSolvgnqALHarpAGATN6W49aNWS00Zc+FvozoLde55s3+yTtCLT8oqFHz+oklna1Ti9YzTBFM2AQcC/asbidDizqjyMoGzTuhdCvdM2wHJeMNpKWuCQ7xD9GaZJaVD+fxHE7Jyc72oIVc4MLgH8eK2spr/Uw3FsFtCsgSo/dZ0Wte0hYI02smhk2+QRLIENU5lEh5B37u0dVrBNLX6t+8+0eKictgQsYb3Fo+genl5MZdLaW0YyAHCI2Tky/KHKffy/L9auAkU/D8aykgdZ7ZRZK+VdAGW1FXCzBSX1yTOvsU3jBNKDoxB2gvF+Vk/Y7/jtf13TY4VV3LxZwP5zhNzRCXznLpA2TxOSj73TqLgnyfWKjEHFc/GYkaZV7LS/qf4gp6VDoT1fPLG4x7iUYZOTIp9HZosjIgadyh7UIzjucqQJdx6uz2UgfZ+pfdj0T0byIKuKFeFZgsNLPuwZoxHNZh6mPXeCZf5ktLMBFT0wvnV/0poYJz8jdlh5LQxZ8uK9nNY/zJij6UuntWXUGuAdTfYtwlphkbx8eoWeLGHIlEH8eewXjdMJHSfQpghYToeg+1xCP5OwFJ71bV8y0C7QidVeolkJOqDwtDdhVDvuAD8hjfwy3584L6RJYYRbWmXkHIqkO3OEB4ch0H3679CreQNccTvqTJm1ep3/lmsne33xrZlUy/GU0FkRGduDHP8c5fUk7OqeW8DQVN64GUKZlZkZLkdfcZK504QfFQ9Gz7xPl2aj8Hy5awXy3nT4VC+8aqEZ9qTzGKEv8kavY88x0ua3O0vefLOPPU2PeTWb8hMHgHOSMpRBMo7iTRPB/UhhdtdZKy0RyjeZZ+k7gGxfGZCj4aI8UtG/SAR/lqw8hebu3qphcljtMmwFIJajZV1ymC3c6X8HQ6HOSAukwqQE7RS5C3x0IItwk1qdHM7bqvvh6v3Ftc39Jl2FEAAfK9a1q7s2ORksEt7YHQynqWDgiV5DkQyB3+UWsD4wQOy4PRENijM0PuXFUnPtBVO18T39tqDUMtagxnPFuuD3Zg1+oLUVAlOTCBF7xrFnEt29S31xMPwvvXtpfHZqjdF0h9vJz29YYpxZcQAN0O4SqS9G5Cco74IqV8m1i3nGxUtXIELHJ8p+SeuuJlzxGHuJ+R3VpEY3nq3i0Tra/MKMbE6niuAvhm0a9ekiuToPi5buCEOWC8Jt0olYcTEfyR6DXO38H/2LpBOCiRW2xR+t0HHrUsDZWsYdlAjVBQb97CmNC6bRQupTBHXl9bnQ4H8KyTd4TN1apGaX35or3T5BA33JdEj3CW+ut9rQxZOzEOdt//N+MuOaXg5c+PWHRS/gA+3fuaZQni6DSRLeCqfWFk9how/9XHR/03JQrm8x+th9a5XJ2wVBRhmoy5M+NP8fzzF874dsSS7tgWt5wQXLzYSf006q9eIVFzkArpiLpYaPSItIdUPyFuGtb0o03YE5KxTOb2vkKx0DOIEfmtoHpvBxghh+h/1C7+M1qgbInoQERsLGZGRJY3IfXoBbc5Btbq6bzhhwx8i67ARhRJPgEOZcDdoU8mJxVyqnjurF4VJcN54O+eEVFdyxhscLCAvRq6tAR6PHuL9halyfF28qNr9GpAUwwD/zt9ABpgVF9niiyXojLtZfeNt4TlDoXKW9jxx+2zpkS7UxoNaCwOljJTyoo9D7bC2p50qQQEZPklu8ykTXHsDB1f22IVAKZ1e4YEtYLO1whw9M9hlID2ZrVGZlPoqko3iLOvzTsmDO+64UJKvQeAwQ4BTSRXwvbtHT/9GvGV0SaFaVsuv0UQLNDv4hTjGuXpOhnV1BJDPZwkqFMpEGsiSONS976H5DfATgRp0IviIIH0Z+Vr4eZV8EviJsnpwXTJAPUGy14ZYF2FD3eKthAaoFPdbugLKnRtTbPi8t0Iie4qa13nYs8xcuC2ytKeHXlTwd7FAIGGyFrlDDN4DMIOh7DTku6Id2cLNkw73tWyR3ODtZzOfYrOJs9rCPN9OURJ5Yi/hp2IacAgLA/0/WkOGwE8TERBlx64YRwD91Gzimo7d2zpe38ACbnEmFWRG+Pdu9n1yt2an5ikgasBy/RS78VEe1huD+vT+lu39uWu4buYR0BPGvbB6R3k5PUAQNMpMyQfG4pB0EUyDmmImKGEVJjjoqWw58bXLIC1fIpFF8Ug9kIInoULaFPRg9iyrKJJ/dogqVcrWbovp4LDsQ7Do5/V8aRHlLIC4Kl5GI8FLYslstk+pe1dwNDnrriWuJmER46HdfJsnqVOJzGxIMY2fj+dTEtuNLcBfebk+RJMhHdbUO+t+5xje848IjsbUSXP8F+h8Vb1r/Ln5iGrXWYsJi9qO4O05B3ClZ7BszfSneSIsAdP9jYv6gq2vGeZFysCMk4njFCx4SINfdMbSnEhCCfJ2ksN/3A4DvIVZOYdrOyf4dX37CXUTsJKbL+5Cq5uvL2Ck7fD7QKW+NFn1Pjq1CkXLIwGEtdMZ4s3HdN8lpMEVS8+RxC4/hS/iodoQ3q72fiPbGi+DQssWR6IziJ1It3lopCsGu7OaE9oLqi6uTLEVpBd8a4a1ci354Qw+dOVB3N9hkBX5Hvkb7OQXZUAqkgbNdWcCFWDyxRetXp77yY5GY6f97ioo353c8mb08lDGBAu5l0Orp14T9teKmKIvVQMdJeX9cdses+/dzQscz9eY0oXEkDXs5KCIKf5iWpjRNGFJ4ib0ZLC6YP3+CL7c9yBjA9oRJ1Gf9F71T/JlpEFmfKV3bX4ZTq9OIInB2UONbFvoyeAviBTTtR1HYuxBTsw2rp4TkQfvQda2h8aemopkcVjQuSuGseF3QbLsegjJYLnJ2HsU9uuql4tieUXarfsMybDPaOJVPiX2qba1wM8f8ZMiD9d1HIixRc1G8e7FUfSBoE6AEef9qxPC2CPE0Y10y7XoXZiRa6kHTSBNBTFp3F0kE+dKVN9xhOcFmzol061+FP7Lmn2aKMFse+v1ryRaf75q4JrXu5L/Hz1P91qL3y13IR7vAZKJH7YNKug6CcH1AWS5CSR9xbJaT6Qw8ElVVut1udstBJlH8QUlyw6ezdbWAqLuizCmqtuyYbVPxkza6lu43meIodGr6q9ADsIxmAh0C7hZpxH8tA3NenWpifxY6EPD2lkoJQK5HIBebATB/dK6jT0u4ogSk50vkigncqn0Hgr/UQYkmETJOkxv3bBJ2id5tNB/Z6N88zugjR9GVZtUhtl5wB9ZwJlaxR6f1d63L/rbYBYHIbgMMfk7ky3qkwwNH6P9UkivkuqkjsirhLVXT9cPdrVDwt1IftnBG74hXujWpTFtA2Gxb2CbzcaQfdq3JgzKlJyO2XJN/VnC+0aT0fvLAndBORKS6+EmeOYRPWEGP87BPRUAxwvbSRGNOtkGrjTOX+KPc9efoE2bkMDJYzpWOOgoIc9gyea0/x+m4WpZ4NVR1ueJX/aORnAI4V1mZg1QgArddOTxCRdIO5PMNFx0rGADn1KtlNZdvPUIaQPAaSmZCHJg1inoDtIHPHKek2SSSgsJmWQi16Rt+RV1GEvGeiOAcsdyLpHF5gQEmLgziMaY836+WChL5LUlXx4bhu9uJ0QHXtPz0EDPyNv9cVE2XuzjjccVXEK3zZjy+vEgRF+llzbSovmi3buPa0QY2JorlhZiC2UoMAJEporSleKXdfy0tGvah9mUNLs6SuiMRDFt9xfTMtv7y9LNmN+sOc6k7RaoruPTNp3Zq0/a9jpxpldB7txL0Tg6A5i+bm8KuhYXf9NrPOQFdREsBfeRVwZiDmysZwwhDa70dFvXAo7PhcOYH9PkaSeRXw8v/zNTtVWQx2F8Do5SR74PkvaXmL/ihQdSfM2F1soVN7X1JybZwxZRx5RcBHmClrEZPPDtXiFXIQxsPbT7EnH9roGD6jvuLwnkS/EaGlPSrGhGM1jOJDLX7g7zAkr1kTH4xBOxzgTGGyPR35Atjr2ecZh2QhGvLMV/CX57I7S6fVfNLaFQn5S2BXCCNOtJi/jKwmTM6KqDw42k9Yr4rlukB1ub3aUvWMni65/R+b8nI8UeOlLdmPpK1d1f2RGT4k9IsjqSloEbtnz85IFWKX9iXeOohkmxMTn4hlt+JG30E8EmSBeHda6SEuqQrjFSSXGXwiixPURKuozZgd4mQ/pVFBD1Ua6DQUGYsEfEoqC2Nu7LSf39yjcmC8MnjJTA1CiBv5cxNmz9cEbpCZRmbqRjBpJDYhGntmSMZvvw+fzrzKWDZ018qTXEe8hbJXPI4FhuluRaoJHuzqyl79U1w2INMSszr2xCOHSxMhThmOvx7oaxtL7gv8f8xaVqxMrNoZKTOFy445MlMEkYFrH1hiyYPfbgqqkoDHLmZaODaYkgN5lHZ088H/FJ3KJRV6rN02ijB20/FNuDfcvuYY+zUDRGH+uOTD5Ya2blEFwU+0vGDBRApUzT6KliKlGAswaXlLHeD00swW4lV49PrcH+CMeWJgp8KrHOvehbtVnO80iYAHoyBJvXQQ605YRFdhArhqDD5rsrdnvYqR6Ye5/Du2iuPV86yH3eadbzZgvZTdNMxGINnYTh6YTvOLa+vCMTgPumg5Rb+aTFB3TBpmakgZi5zNThOEwis0evsPQljXU+P0+4fyoK8EJpaWH+j4Q3hSHddRxAY+fQNKKqLU3/M3ZDqlqeMqTRoYbQjaDXGMgbv3SV777k9hlIuj3bvEUPjyKgOv9BkswFb8eqRssdtFgzmDkJ1HJMIYLRAC3bsoQo/M6a03HwOZeV03D4xPd/9ywUWBtw5Nmj9Pjru9ReUqZkOZRQqgFq6UDVA9Ljz/RfFuyvI2z5ATTjdfxk1gqu8JFhKmOssvLEc4MCHeSc3FcpiM44Od4XyUXRDoMTxLaP84RaeZ+CAruWvUuiOjouoMSRaIo8I9b6S85Ih9v99ndlc1u3w4rwRR7ToB8EqiU8Z0W74rgF/SpR0gHhC+y52T749UEnIFqDlj1mXIjQX8bZbQpEIAtQiG0m46kOX5l5+lgJIxMNu2syFln5QNgWXymQ3kdZ++VhY60aX7DRhhULSneI5tjoDB2sBhpp6VRvSHm8f7tt6LyWIEgAYM6v4vepbfjg6WpIUolce083y7DMOFj4oxW4XrjY0tX1Ll4oIOTCPKRtq34jp34BSrvJ0ioOICc8xlihR7wb98NLU93reEBknUbrGb79uJEj/iv/ntx5rlkxVor5tLWffhYth191MixKAdDudlABL2FtLgKypRh/WRm9RCNNuh4xg11/14rho2pclTXpCzqo60jsxg3uYSTCDZzmlUhL3gw49DC5u1usELUdh0ek/vSKq47bbsxhj8556B0SpDIts/PAe2tbELH9q2M2MRsMB+rwt75Xb0IqAejyRRHlpC8loxlkdWsR8MopHM6I8ENpXGQ/1ue+muvmdbQ9z12fPh14Bq7WB8XU1YdgDQb01jClTAq3/WvBNAlsKuWXL5AyJ6H+F4zUezEYtePGqEfIOSd0YNrF8j1YRpSglDe37Y+O+YNN8TszqH+2NPYkcvIOaNkRBnk8eIovvtmS+PIQIj5bCxJTjIS4n+AEWcnjUHrmOXuhRvj+i1R6VTSqnwEOA/UU+ed+11+zxFc6WQ8sE4DYXbifv0UBn3oEc/fYfMaMP2B7m8oVgvtPt6DjbFBBapUaAw4hB2ipYhk4oodfas4kbfitlPwf4xRUam/vWA4bhu5dg9n8paYUzxTLNTGrep4X9OjijQeB4GGsJeCJFIHJoDjHcs8HNuhfg43X+yUfiRvOiYhIM45jjxvUwKgGXdM4P7WDXwsMuwopDIbDD58N7bESjPYeqWsDFe0lFTQmIPjrp3/zJC4A+x/HHKwY1VniKRg/I8sKdXhqc45XYrKd/1ok0dFSp8iYiDh00ZLHY2u8oXZsCRiMdy4Uj1DKkLhxgdHheNfdHRGlS73ZJ923cVARtK8fiKqhnJZ4vIBGoE8g8kzqorSYal+ug3r7+FAyCJ5FWocFQXOG4rJ2xJy7vnzUY0jRnmQuSddno8VcEkePjRCIHKJ6wuR0AbPul8M9FJPd9tO7DuU50MdhJQlmrXUapPZDIVZbf4aM+0zvMHbfzaKgUc1Qs8kB117f3fzGBW6blaPkMYtC456MZjD42XuwCP0oGya/WvQMIqngJ5OYmMMKZBzRIzrUkm58a/l/iNitP1woMO0hzy5Ou9/FUOr7zl+6IzEnt21ljfkHJDwZ7Q+ieRwAPidjLKN9ajMAYhAGPdIHzFZUotIqisQBSe+FmgCJPhO6cJ6oiUV3N4zVZo12UV5Ee4bhFK49srx0ImZI9shH0NTXO+94bl95Fk0BSyX6OuNb6L+UDJCwitjSgqFqIokH6lZEpYqS7WlSr4GFuZqdGIzy/4ArSGIHKkDoJZP00r6kmHOpqcrkLKmxeuCYKSVNWMDBERCqvrFq4BrMoCNPg18I71I4DdGJWOxJI1nN2iEwOyLYWciwpnkWv6VUf6NesuHYis8KDf1sbVPC5YqQNhNQvKLsNhJojiCp96ErPblU0y1TQJPHv1jtXZrrmle2fCsyPi2UAIK/+tYgX6BNf+G1s7U7JKGDW/+Ddu5OxpWhCaepNAluYQnaqnyosnWbtY1TJdHzHxyJqoytavvWpwHM2nP3LTsVmIQ4fP8+h50WfZUQnNKgttIOhe4RE6nzKFPExZU3b/W9fkYWUZl/af+zOsJo4UfjfKwAeNnKXwyGndewhPVfFBVSZuJG+Qz2c886VaKFCu1X6a+oTZNOaRP8rPBwVQQIebr583KcOqusLQs7AIJ5FnhR5yMW7LactgTEcHHmsS5jr8eWbhS5xUTqlM3EdPP80bV+Y1tuH/FYnsOMVTSCHDNDBdDFsLH6+VbpOnjAJXGfhgdBxj+q6g4ulT8H0umRqhfNIMVfWE94Ctooy/G5mN3U0hwhRanm9pI6eUp/aCyIAK2bU4SZIDT4txiyeIHypJYDHG+1q6t3mQ9e9caWa2kebV85P7ypw9rPO6MUHMqBiOC1R/s2AO+rFEfjUis4rbWdPC/eYO1h1HxmY6QNmLj/YHaBXy/porhaZgtjeeti/jq4u4bxhru7WQYri9KbcCWwZPE+YtT79qtrOpVClG3ubn3uwZmLM5aV0gfclF9Wboz2OU0dwkYCjYK6Gmkk4E11RpywXbAuHpXCjXayrYiv5C3RMBhjF/YS/+S1aTUZ3xqeJ0HWr/DCNiJiL5f6Zl+vAfaw+U0flEXnQNk+g/sWk5kjRHKay6HAISc8dnuCIvK0qXppdASyLDxQTRKzMTf7Z0v8oaBLpcbcvfXKGDCzfmB3LGWelJt/zN5ppfFPZL8Z3s6wMZ3de9VeeME+yDfakxYlgVcxEQ82+xTkE7TwUgkum2voUZ9QksYOgNTfilUvfI0O4mbTY3hsIL21hHjOCMs05EhWHGnSO05UO344InErQSQk6DfUqJyYmYDHjq5WQux2kW/bFkKXcfYnjgKxbvt9f7i0H3ae2zl5AfXDTlb0P8DPwRDJasWVWJNZhdB1KToQJkNg57ckT/IlhilQYJgZKtFdNySNLhXrK266a2Hru3S6Tqbz2rD3ls7PNY2h0JfI2PtLiwvz1J1kgnYI92JVmyIa/1dVhQDyn+YKaVM5L13A0qk2A1O1QKXAhoNfEd2xp2S75XA6iZgGhmDELQetx6ay7ylaWr9qt/m8oeqgsuzIht5cj+r6kYjRiz/e6ZIR1oMhpJBeL4EOEeyDK9y30ybQKnx+ZlZUmMPNZWOxJrNcl24xxQdVqah50J2bSUtOllKlYA7r/WP54XbCza9cmKMprrVIequoVA8+D/YIy8b0SiqCSG9S3iIPLEoiu9qJtgLUUl5GHVD044oL4ndvwaENPtij37dvCcHD+xL+GwaBj5Br0IVIMQKCg9K2F3w7xPtC/KAfNgThtF2Mj/5kWwgUrTkChMWf+p3LrMkr3alMZ1vpIpLUcZYUK0AQuAIHthXfHtW3mg7+524/XgtAs2xifyk6Sy9FJH9LeSQtGOgR/ZNA9qLPzvtoN7kLK9Y7tv5hgvNH9RX2ULnzY1XxHRK2F+7fWO6PQBQU2p/BmDStVvwQQnruToi+KjdLP29YVA5e83VhcX6gE6FDeQuYm5MF4AcjuAOw1Cf3HQEuw6UiGMV/F7uDWF9AmL9/xgFfJYn9vswh/gnG7VI+Kfy2tDqLS3p0iWqjId67WA77GreoQs/hgaP7FwrY9natJcxhbZBlCaAGw+CkKfREoN/UKRCbDlHY9hZ2kkl156yLtEPEmblaLiVFuX69/hdLYJT6Cb6AKGiQ+/6lKhnYza7QxD51C4hRWOIBb9lEuGpm+NGXTT8TuLLIthQNheF7Gtq62caL3LxOfOXmtlIpUi+4C9uWkA0olrWSBzXUdNeyqz/Ogx8NKlX6UuYj7mHhji2iEN8wm2fqZWn+kuHg2uqGsE/ukYBuftCMrtT9LkckDx16Nd1dF/TYVeD73mh+lBdJLg4ieHyl93bnq5s8lIe/H99qK1puEmW3nlSlVF0MTEC7Y3TS1IRJ0cDUCST5YcfQd7VwpW9pDZUFwAG357h4UsY99aGXccahBRv3Wyy2zfck+GLO6n3JExUAjUYOh1RngiFmdNtutrkZlNWgFguAP63IO8EsTrPPj4ozSpDVd6EZwo+ZpQinAqX/gfKDn5S9nKmbUAnwS9VSqgPpAPmPipA2+CJK3ArOFpyNflvqtlEnKetskFzz0p5KM5zoF7GV58iy0k7o0juG91Agh2KsQCsD97uW7GOmMHZnvwSlm9llt2G7LI2T8HLPeHUIsZ6YAnM63NjsmnFXKbmbeuihDl5yBSrI5xHS6T+rFDzq5+hkTVKbpPX87iWggduImtgOKfcQVkXNvdEXfNSz5OI+fpiSUhTg4nVwfG2kP2Amo4h5IBvWUPI7s7aklvlNMYk16ujH6rQ5htwrwlg8eJWoR0CMAjB6SQ/+6X3OYkYwzXtbTmTpqfwe75ucBN/g0LsmD3K9hc/Uf/x7gZUrl0RThOwhh+QEdiNOu19YodXDLcK4dg4TYTRi/HScV6/Z18dJWICOjHxiQIani/cHG8o4SCtJIJz2quUcmkr4dfrdkEtvDv0Zg9GDmJ2pAM0vMEsmXeTrTq4cOTi+emgpzD8uO4/3cpTj9acoz6FjWC4ULbyyuL+Eyvjl5emkPjYTKeXJ4tASvlKUYkgiXv1/yUyQhiIOUiHgRe0LXfASFgmWzu/1kJto3Fx2rd1gnX8nw97+hqykBBhH81QFFYq2KkkRBez8xlFu0NGzj3HWoYfUku/AeZJW9LX6HjFMgxc0/cScVk8eA5ssWaaCg/IUqo+lA8RaM2zyC4Yb15+59su+CltVb7q0rbATZi22UUpVcz6k+S1vQNco0iXgdwB3d8nUG5E+kwsLs+2RPewYZQmFjV5j5fvA4POVIahb9B+6ESR3b1sgSqrYQt0JRwWPLO6oaK8ux6fpAYsGK7RHVlcidV4DyHjtIgku2BIs1ES9ggTey7FU5nwAEkICVMExbaGNWcq6ZNi9A2Wap4Ytzq35i90LvifQiGbkLqe608amV/wpG/sbJBhynfxCGiWMZixei6KDUSnWk3u8kQwyhl9YoJ8bRTYhQlYMEZ6vTag2fb1Dl+P9MOx9REWFpYlQd1XZ9LfGPGzmYsSI4mHvSeP99VR6H2sU0byutdU/JvrcHN+RxsaUp+4XcYNQzFK1X20aGCCq4JlICXrMLxI/xUUP6DL+cvowyUD/XK7gHrPZWqVNx04JrZZtd6aYA1pZapJgrcS9fYmQG2VP86NAEeec1hB9iqB2wzgXap3PyWmTXpJu6FGquXYMiQKxLI7jBmGbZHEn7Y1hEUJtIqS/qiOcApdnjw2sW53o2jORmbDq5uJpjXbQFqNbXOVqmRMd/WLWrjlbfjs/jfGi8+YSqDF38x5B8adsgFet1vRc1pJY9FdBIbw0ai8YFp0QtcxP+s0aS0NDXTclrWSRPtwZT4C23TX4zcp8gi1Cp8fUqShMox+7skXtRKDmp89KQehYY61tKGoT0wmPFif0zJUHaFWMxB6NUKyZl6LqbyB8nbyx1eUcbXC0idYbPb2BiUz3QZQhSatURJi3kgHk/Xjel0l5REbrTnQbxYXCrwA7yGDXZewjyYDRgTUyObcYim+z2WjyHBRPosv7dr7OEIhrx00o5w5TkId4d7K9AEXPpOzFLLNBI4BBUTIfoqTSca0NiOfhNgdM6F1+Rclv2UYkWIF+HQSD4LS59Mm4ppF4w6/73JfncBUu0qR9W37UQ1P1VSdkMSSxe8jgsndmWb5eFS2lhW+9O/f6zpuWFukJOKGlIcy0132RptDv2RlKkZ98jvKT9JvbgMVrwPh3HKdRhCh4fsupaiEDBuMpfk+DnXZqtrfAr1zI5/JcA8Q4bmrIqqWe0t+FuV/wPXXQQ38TZeyauLW9ICw/NgP9PN+cJSPmQ88qvepPIEWBvJ6lQTs97XSW4t4kcuFQUEk3z7pueTn0vn4441FDaetX6jcx/JbOn/vJWRYQJ0XGUB9PeivcYM/FjPs8+DtaWQpoF/XxddZZRkkBdseH4mwgMjeCgbrLN0Mbp4FDHDqw1exDkTip5KwduDFa+MUIRAElCnItuLaZZgbt8lDd8L0A+blIWjCGwEvn9Efv4UG5DYdaxmAA+K+tIOlxDQ7VXQlMYc+Tn+Xb2Np8h7MrDKNS25VgWmgnEtFB/5mVPO+aZH6dB8veRgHl4enzK60frVfihayFUB6JmYUSlFIw1Rc6U/d07N5l9C/hKMEaRms9UJ7CZJCXgZAqE5zrebbIJr0waAuxMCLEA2tWyabtdVG93vjF0tOuCKdclBLEMtzoFUvM+FrX4Srwvv3XMjPpScHixy0vQUXGJIWZNAFQL0FQefPoEfmyAv+HrlYtpBVjh3sfh/Ah28CMIARd6f33Nh+mLa2+7QB3smzOHbU9ehNvIhDLrz8tlLScMpBMFi9W+4mgRC7v8qQ1t75JrwnIIp5IiE/ldqurt/fYfrL7vMQ6J5HpZqBVxAWAFsLPCGHmJ2Laj+f8838FpDq5gqZHM+R9pHtQjkeeYt6uuW4Gtcdy/KiwUwoPyS8KjMd0v47VJkXAoeNU652Sti3AIa0BYdG6OC5SPis1+H49DLx4iUBD+LRntH1fGHQvb0yV8LFtJXn1Cd3XkG07IAmwuMyN30pVyjOaRHlyBkPtZrBBcjbWHpR5Dc9PAwryq7ErgTA/1MKLmx6XbuD5jxxVrl3lYAw87NfokMsDNQfSMtSu9C2QT1lkWcXZtCHkwKo4CcAwMatHf6bEr/MDOnjs8J4Hf1fdYNExkO2ZqvgmHEC1zXaFgp5+qNK7hBXkOOtRW5Mha1tybQ0soF4f3SYPI0JU7+ZQPE8/LunBlIPjD7/GHMkd2LLaPL7lAkd6iQwLerun1pOqhJwHflY4jYNGcGfHPeJE1aEJ7J7Y6B32JHAKfUNqCVf9WB3IiP5NM44IGgo49XDV2C8G+w2fQXDpSnlqIUe3y0Y3JFdZFdE1obWmQH3zHfvRUZC41QyFTDeLWbHBQU6QGSe2aiitXwvnz2up7eequK+sVEHG3tRqpwk/rQkWtM86auxZ3EKZCvgrvpKQM4tCwdm1LoPWdrERreTC6Q4WOGx8ybFEK933FPaK7wKZu1AYTXqPU+rREju4sV4XOnfGdf2mc0TSw7msb4aUl7PiNOe4zlGnLGM6Dk84ikMRRE/uI8v9MhewyiSvqtD0kHLd67G8uGt341qWOsQfyH+be7ydcos3Jiw0apmQVPAuR6u9K9rJx5PLdQh5hiNAz2AzvoXUnH85E4ut2ToI9ijxB1cZGW5cyJCIn7zCzA4Z/RmmT+bLqEeG8HETVLBy9Mv8U7MzuhpGee1xhMGsE227TIFC7L1zaI8SxLltXcAkOvjc2Qj0Tm573eMapFDjBH8fVnYfNvZx2M9IKyk+Nx3TaF15b1xh5Oo0rgvE4+SGEu0e03T7tCpyBm8slLYo/BYQTeiwOUlbUu0gNylt6lV7SpaFt1ZFMETc55uUQRf2LgOyE72FCbpPtVL71rcOVGHDPvGhTuT2nFJnkYGrhquIOlIyqqDEp4Ehl5lOCCEAlzxnso7mxEsMW4indTQQLTb72N7irBF1n1O1hixCkocJZtu/gavTYzbJloAI0ekvkI4qS64fRhDeTiGkQeEur0msHOny2DRJhq/1ttV2AK78miOFNgaueGJTRdhJ99Ig/s6tKgz9JEOhC1j4Jr3vr5mH+fIs3pKI3I35dnS2bxywlOE2U17Pfdqa0N5j66Y1iYL9FtFhYx+kQgGU5Ow91OkDsbjb92sRep4AzoUjG4DdtOwyMSrkOiA/7kJ8fZWqI3WC8GbeuuzuPUU1L5DX8HLgyqAC/SsqH49GZUHmuleFsNlPFMfhhbND+k4HvP1w6FRkETzdjHXrOaDvORfGUKWm+x+RCtvvNx9646NkAOMB1CzMpUl8RPGlioYNaTf2nu6WBsAS8FW4IM04yweiVsZqEPvqpR5EIPbMe0FEm+sRXhPT7vslfEaGxnbbkSxzm/4l9Q4Okv+a1hyzmXPXEmYPJbcduf7W8LTGpOovRNIbKGMXUA0/ApA8x57a+2yzaiabh06pKPuyyfqRVWpi7QpLMQR6bhjyhpDCeqezJAkCxLb6va7pcPc6ala8+3Ldk3UhVzaAmCokHmzpEz+w7m75WAHLiTvkTHnIP06lrw6aOmwYToAALbpB4pYfRR2yS46/aKDEH3465rhQpVZwvEtQ1EJuZebnvn4CSt8X02jIDqi5g2iOn7mml7YmeDpAmgYFeF/mFOJUiW2uRw5UOhcb2CZ7JSvjKoEcMHfsbvH92MMzbfWYeD2EYhYHVG0+5Vpo+ZOpAbnXA0MYQpXoXgBJTuUxA4sSP4YmXV0RcQmpAZmzpJt0nzy+wLhf0993F6+RReW0JUUaEj6XWLEVtBfSZ9m007rD++ZqUi1/1TXZsmXEXZy/TDZb4mmNWxugCC58sK8kQOLQlOYM+LP3VX3yOvkK8CzDER5QdpmLG3U63xwHrzd3CPvPa8BUdN9ZR15WI0W3L9K9YX0QGgKQQynV4RskQWlT0Zn/vVWb3T4qTZT5wNA4nNJD50pW1sQwn5wWKHzZj+lkPGv6CIDXXcpehRfESyigUezyAU9MmPc1KrfF4lr2NfFNYrOfmZQwfaMDMiKK/6u4aMdmfzx5XhM2XpLgmg8oSj6bf5o6JXMvxd8cb3s9i7TMKZd6izhaqYG5ky/M8D/9yP4aQFdJasxCj/oc0/DCYGxqkBH3kp9ZY68TUAjP1etgoOqdMd3vOBisbcXWeo0aB/8jxj5UFzOLCET7Nuc5xkzzsMaYy/L48mTtkg00Ny7o8WbZYTxHPqoyhpI/gKEb/mgdLIU2kqSta7PbTNwRhXuB9WbBiZ58XApEEqNfNKEZ1RCnRwKepnLZ4y7OA13YASqJeQ42/H/ptOoe9ER5I7aWTJ4nnThdR9g9hnxwJ/ux0nOyo0vH2K4NIFAPvrAbi+N2/+ADLumPWAWbkuf6tWal0in9ymgu41qf3wot9LC3RAG5Q27kxJWXGC3SEdByD9ARn1TrYqlXB/uXDN1gPD47dmaYOXxYfGj0kwdyaD9IplSpuAsBV8jLF5quVs1UIQ5rUwpKTxsEkYXyvqGVH0v/be87ce1FcTfz1J5iwjzyCcD6lWVxax9j4QrxRPuKTo81XUGHMIh9tScOWNIcCyY6PafOxTqdfLfEspKkcVa/dsnFt6m2gjOek4sQ2d/bXmINhh6GB8zOvE8lTnfucbSvfcPIycFWcW/EzNuw4f2Pv+KelDBQ2BTZk5iManWKEDRbudFc98O2r2jytwFwBdXz7+Qbw1imyuer3mbLZ/Uxx+eGww945dAGvJ+nwbUy0ej2oVnj98GjS8R6777VeK+fljsxxcJ2jizCZsaFf73tNs3wskPa3+x6+SMWvgs4dCiGVZ93yuUas2tIEivvie6auJr4LmaoYaiQMVgy71zjRLr+cy8Q6kom01o5iGkB/XmhX/6h6FGShVDSGpemJP1F+LlJUOBwije8oIrmwf/8LkLAfL6Zh6tcVv/AKwh3M6FpjJzQZt12fFFYnW5Rn8HHVai39gXVeZUpusdQ+G7GRgWJvPeNUavqK3EwEjuIG7KfNM4ytFozGxlFSlB5Ia497iFk2TYJghL3sX00htVIQE/tLA7sJKhVJv6GcraqQhxfZSdlEbNWqHaC4vOjVE6bGEcCsdPLcTcuh6vmN0Zh6L7bcCNzcWQ5d3K20taiY0lSlI5/8xhLcThoh8KaXTkGXNsvcx6K5ohp5QI/q4fJa8BSIzhOcmf03DlcEhmncBi8N/yfnb/rCdgRWX3RKOhyDBMhOP+g7au/n8MruV4oeCa3Rn2ls2p5W7osLP8Jb53lmbUEE51TE3rVsaOHcJk1SVToOdaMJa5g7lWo2gPf3I+0Q40eWZw+GqTx9wKCm4+YMGIp4wCAjWwXuu0LBv5TT0JiUr9plzrLqlvnOHOwcG6p+XaN/ahmfVqE/YCfATwJWIbbSaAPGpFFD0qK9dAUoFUn8jw2Hvh4fbbMy9n/2deHpaunSsk32Hl5ZASUmkwB+WKkc1jG7kiyqri+3XOaMdACNfIU+betgvwH4X8/vk/5oHF6O79ojihsICxZQ7JQnoMARDteqSO9LXuAVPQK/sHXGOJXBznAbvLHvDZT+gmTUHJDnaj7DJSTYkI7Q0CbDKLkmEjufYU0wgciNisUwaBseYjWnWv6kF+YFtecEAgIiNUqPIyDzGCJ+T4RwHoY2s5kQsXzcMziLMUMsq/9oYnxhFw2jJjxaEbfiJhCJMh33GHxLzNQVNQrdeQJwXsP96CF67cBesLkBXBusUz/Tmi8LY+e24YC+mIPmhR5lPcQtV1CojDxVUuCN2Gx7FQTzyX9n1s+9oQ/DUjjgQ9K7OsRS3orQttua7ssQzJZ86A/8RkH0uwh8s8pmFSODYl/+duOc+0FW6NS4kUFXN6Hk7LLPBZEWlrFIDsoM/T2W1Xon4T/JXGvboil4v+RiNi2NluqqTzJkHqpo9OxQiht+FfMqkTqHP6u8C1xFj7R4vukmJ7wzIHu76ZQ9oS8rM5l+WTiqRjYS/viZJTUJ5DbQrwctKgq5t1BXDzAAHnXo/CiVQlNeiK+082PFxWXBqRKmHHSJ6IEaWFkQx2FLyRliC/C6NDAw33V0OufvHl5hASkwIGHc0Rv6tNXnYduw4sDLWuU/COdaaBAY4oGKNtL+A5I/8Qfx8tnbf2GSh+ySqzdCldJHAYjP/EkFRLoaaIDeeMmawcb731Yi/mOc4IsqPgPMXhZ0pKZ8hwbhXR2coSuYWqiVEfXofWJZFybFediwMUvRBAwjxfwCDKH++auBgDpQENtwf0Q0Lz+JxzTXcnviEjBetRLJAq9FzfXNmTytN0ZVsqQh1JnNybMKrSskz78Kgzfx5XBoLQVDqJh5qypbTgVbZOv8HldLXZTTEbQGKRS0LkGXT/SxKgjjIQOEk7F5gnkX4mReQ+YyWuVTQRnxFKIpdZVY5LCPX2Mws01vhFib8dLvzU8t+y1LMnTn1af51OCY6WE3mnYjny/tm/T8sBNgvUSgZvAI26jgCB9MsufQ7lrPEv5xajofDXHDOW6b0vi8Q9qcSY+rG3o6g0XLjPZ7vK0mYxKIdPpdeGu+FVF3hOmgOZCh2BqoXFuSFdfsoEge6ZNrydioit75og3M7dYpALtrDd8X4zUR6ahdeCkwPkPLjl3f2IttO8m1hWqauGPiQVGWJ3BglRJStnNttWSuzfFizu0cDHSJCpz7WsDI9AZR2ustmal+YaK68E6McSeMq0XlJv/S7aGMeiQmuys1oHE1G8zQtie35k2rzIwTH0Psbe1YrbyqW8WEO5yWmx68Yd0qJmeXoodlG/vD68TCjmGdCXqlfXg7/vi77iaCBYGi2+UEutjNY7IUNFlmrjrDkGBFV5bfZ0WYjCYMWRt6MpcP+usgRlJCjJ+BApdWwPB9L4q8koM8BG1IwgsN5OKX5Fnf5PjO6w0BIt8bVKGCGxbdJSCxpRQUo9banuvg4Cwn2x6qCXXH9TZvY6HEKf321bs2ss6MwBmlYIwqHOHgZY7sHlBHCObFxQ6Q8JAY8aKWCjPVg0TJ0o1rKn9Wri2Gl+EAlqdLmYoINGQnOBqBm+RaIh1CwrSa77l+z3flfHdQLbqV17JHJTWDdW+91bLS8MsPzPJdaBQkd7FRxZvFXIEgJkvXG66JqQNJoFlMhkXSBvPhtIhSKdML0H1yybBFjbo13qKmreHnHUHM0OXK3mOS+3Sq5jPgvaNPRsIJGxUBFOJ8a9imgdECTl9bQCjhT1/pWHlpLmQnL9OWY8V9EH8TDPt6lluqdaOrelOi7olSGIc89M0CIFUnZWYwv+lEL1v9MRiNYLMj+gzXsNgE2amNGnmPNDXWefddJKvozKruO8pxpA/gvZ0VtEJ7/FZTUxPNCvbHXTTQmG2i5DTrs/J2CrgpxEw3v8qhIVDkGZowzwQus4OElfJnm/Ofv8IqQ9rbDk6nm75hkaabRXx8FFgSOGXx8T+uCKKEj9z1IFmW8qhp+gx9SZfP5/kgTZ4HrxWs6/6QoJzdylTM6ClvLRqw8nNExNy4mVSSHRjn/4dF+vgSX8s9RAKG99jCfyEfp+5nHN45TJCKGmopD7lEaduMghzwUnw/0mLKxUNgujYP5JrjVZFt+blXyQRbiert47rvTzQ2ubQbIgh1Kv+E2s9ts4WhAjYZDGdtxMzsoE3D9h4Dga+d4VjBxcOwBwE5/RhXhRkreFsniXHtUQVxJW3sIGHQKHNnHD3ZSyyGbgtZ0y+JoRfdIaP2tYBIzmnn7N8sEMaAX2Mm+T8hpWYULKCSAqIvKw2vHASsbzVMoQBuKd+Xu4n3lv5qO5U2WtwmsjSrqoQ6J2lUkU4ogjSr4FhfT8R6pk1GO/AGmq0iPzh+FaOgn5iNTeCKb7D1chMz9KBQQAg88F3kToQsOdsZfycVmfK2iF/hq8VJUFVoLeGjomchjkfC5u7sIudzuKKqfkazNB9ga412Dm4FauMYNrmvGqmQJC84H2O2ebf8F57lvorV1f83D5Q0tYHMb99iluWwt/xab3W+alg8C0OP9vWVQkNxzvvqIBNOnOYjim6sxE99+kbRXmMQcNb1caBMvFKWByrPfSAIxA/FtqeaVFbdQ9Vw1WtGgBeBHIxnRrpppB6Fj8cnbvWhEBtOpqUHqPjTG4f9cI2/UamDLPmjQDSWE3bbRkv8je95/4dvmhDWS0EVwg7GSpm+cYo1Pd8BgU/G2ABih+/VNxYKs+lBC59+9ysbT4CWCVENI45fxKRATZkHQ1o7UcexOTfrFVc8l5k8YInuAmi8tKvhlWh2Ctx5pLQXmFMzJUN2jOeewuD8KSr5HcD3xpzPVNLzk4XJtd3cwwrYJrnFiwMgC3sa/pwcaUNlGieKEMskJvIoWxa0UT4KYL7lbxC4x8eb6qyO+2dyqxK10PwjBXwPjbdpabJ5cYm9FoQ+ONE4IwPmhhntRQR3kWFy9FfSgKi0Rx/+iNXt45U6WjqClTs0/VqATvtzlQKo217Fl1Ko1rS8s4AnRhuInjiiiRPT6TbsOyitOl8W7spnxXzFcnYwaQpOCjZM+HIMbpZ6bIIQD7sQPJNDbfL+UNtSsSpSrUPp/V4rY/dfehnI8erbNNLsNOLqH22O3N63ZvhA+7hALuLiY7IEPuVVKTbJ4uOhQidRTPmJqAnW+klzeOQq2SxyXQfVDAZmd5SKCn784YQG4lZ44glFiLSunagZb42Ro+sSIs8jyJEyiVOPsDkdIf3D10x/j2j2ThDB1vBn0bC3mOW7m0cKzY2Ba0S7VaPA45N3TliOl78R5gUsedxMv1h/fvholxe19lDE9aWn9XIEEyVTKaMesT7a4fvQtUU32ptDIIrx7ocWOdWzg5xO1siqn7cynz/YVIUHTA1jqbewqUejN74NjbALFbDoZswhXafF8U3pPx6VGRt+kuQx1UywUqPZrneW3fCAFxTnE71SDEITNn3BEkkPutk7BfxsWZ41RJomLwOS7VGsz/LxChN22ddwDyFUJBeDFHelBk3VkohmiQQG4oisQtyPMWjD4QmnHtLVVcOGfDBZFcrhHZahWkLDYx2XDXUdv9pyW8Lim+8EubSo4L6M0qogLz82mfirrYreK0zXVtytEUCWkvJx4V8E34lIpR3kSV0P/uncmJ4VxBRf3rYQzmyDAawxPTaFCzPXGRZcT/nzYCTTSZc/Cr1A0fKLnqaLCJHxXMlst2mZ5egbWHIbPTC4VHeFMw17K1C20sRljNc8HX5pROUSn6nCVg0SpLRSz8XT5xUxiKy01s+JO4CVmTCCrMwCZRlPwzUAE6ah6LegGO89vsKAP9wP22izvKHUT1W9j/acrkm/JJYNLFrI0PdnBBaPBcMxRuD/OFe/ZLC/+uNpA8xhij0HOsvmbMa99nO22DIdRm6sGBRZU71t8FoL2pYEo1DBW0sGiVwBCjM0hhB3L+WUWWJ2HQVrGaoPllknAERjaqXXy6zWWVac2gz0IZono6kD2dpZP0k0biSkN2OCMOrlr26LESgTXW7Fa+e6ITArQbUGcBOqFrLObB3WEgiM/CaTNw7c55vY5UoZqchJLKk85KlP9M/GhehAa0ASld/2DxqpqvKP9OyXEYBaq+mDemep0d/Can+TNdRy7CnVM7eX56qqROl6fl4BJlJZm63hdmRY5Wkzt4/SkekK9hOxyUdwZNqQPg3ZF1cCXu1BucfbGaZhbBmH72IIag0QwAte/H0zEmwfd+fr+uKpUN4qs9iFatXBd03EW+LDNoso7lqjZjWYHh/ZPlWg3YkqIel5jwhLEiFgTgkXqHxZZag9ueZGnTH6JT5LUNfUZCE2Lsk5e5c7i5zphPUfTy5ZyAZb7FWq1HcAMpnFOETvC/xCA8lisAMOHK4JlwYAGER2NXH/PyvxWvJCzuYl25WBDY0aQJYrWqXlaZ6h0Hb3D4iEov7A8tb01LKlagB5mS8ggyqYq/Yl5Jd0BDOmcpbDYm3uK3NQP9Hm3+H+mataTgNQFaOV5fCw6McOR82WaStM5kKXW/Rc8/QTHnmpE6s+RgMXuzsbHaY0XmR1UrK5B3WbttwvSy6Zvl4hJMn5bnGh/0EI0A11IqQU38mE/w0RoPKFSnasP2Tlgz1KQ/00ty9VP/Q8EHFiZx79RTPn2LKQYASoyzriBz5XyVjFPiCpchPdkscuB9P+NVhLGXq2zPBEsEvUpRNpfGHng6TLxR9Dwfuhfi657hg9DeXM0+TKJMGAwdX9JeKSkyKlt3e0shsMRg8k5u6ilFHqV6Hx05K5bhsIhXYcdZ5B2F+3uuAWYd8oBFNwgL611nmPOw9TweCNDo4A+dBT1HdlH8lSZp5F9N9DCKFpXI+msL/tWjF2mF2QH6bVgHf6Cs0U5fumTRXVtdKaEQXWr+At9BzYwLZ2Hk+q7Qx0nJzVoqlXMHzIauc25NbV2kDc3CtZbBt+r6tn541lFSZhpBYghdlV1XycZXwqIYEPytLapSToVvhVlJ8pQ+8/1p+5LGCDbQujTLcCu+AIFy7QelQ5tihRzFbThSEJoBscGqETrO6VlSaI0pnLzlzqeQofqYpZoL/Xqs50z+MdPNsG3SjDh5evhHnBtRzyHosvyAPLXJbj7o12aJY4xHy06SG13exsPPaOJml4z9TCbonO1vIqjMfRQk9nBo/49S2KSOBR5OxBE4oMlokj4VULp3n+zlDI9napN4/tsMD1CCOcFMBvhYsO0cWQaFk5EmSyjxYxtmdwjV9/iSg4ES3uPlXlDVQvIRSXwKg8DhTSAQ8WViBKqcVTV9b/KZhBhvItMt2K57u1w8VNwCJ+ZIBo5Nak0RZ2U+e7BRynhTMO2BY7GrQk7NYNsx0Q/3h2Co7MF70OVC+Y4BL8JgIBgYQIiHVQm+g7sa2TIACy639xhCc6z0CcbQIjSdL/Ub8L8l9wJD6jrGHBcLZq/SKvc6t/xkeaEZdhBdl4CSqjNe/aNGajlivRls/Qu9u5Esvwqc0ooVX2EAwYQdXL5GC4z2cqyJwP4nHVlDaN6B8cSaZAhaL8kxtBBaAUaDWFFvW/4ho/tPOMqR+8b6CYHoqtu3zL5v13JZmqtg7wIs6usmOPoxK1GM30xqeYnpPmCExXQguu6WWX+8oioeJzwcnfY52GJ4Yhqb5xRManDO9vHwde5Fu6uK3D9tMIyGDrgzs/z45+KLR6Pc4O1QdZbgjIJCsipk4odpYXbbR890ndBoHG+6LWBU16b5U3bLPM3SsXueVbJ3S5W9otznIvikxw2/ws6vi90fjpUrbm0m2vXYE+36SFTMCfKxM3x8EjjnpdvtzRzy8+DEAWNQ8AFPGG2xcBc4XDauOPxuFOCxtv+wx7HiIibTiY1O/LHi9jW4yZ7fnb0N3IBGtDisGZ1DLOJlPSDRF4G1uepNZ+qMVWYKtLwPh1ypQ8R+QM6ThxVpaDrTwWX9QzvzpIu+oDmNyPGQjqLeZkdEvdqqvwv1NSVaidpK9ZrE5JcUbCSWfnWOoxmsvKc+xyNhg5ZHo8kMelY2BUuEE1keJ+QewJkKqDMninXlMNu9UYufre3R85c4rbw6riomdWWJ1f9plow0MKEO7Zf/7it0t0V9UpckkBWYNkKXkgIh5FbhGTBiAEGxj7aLKqV73CqzXiw3kXueDm+f96gJq2kspYJfDBTxJk9QiAoEfJ2TTI+uGYUncDOxYvnHhn/yfZhC4Uur/7G845lS7/3SmVDNt7KahKLVgxavkn5GFCcPSWn7/kvDadA8lwUH98PkI4gKJMrmYCviwhSlAnViqOyzPsmjmP9fgfNlL5QlCBvGHbQ3edcE5tGK1AhHu3duTtcIh5tEnP//itU19/fXOWUHXwcfJodXO4WWh+s3av67cmJueqsdk0HbmF99vI7BqdPCYqwO6p/fLeteEYDfuc47zFa57NpBJYGyyhET3tctWmTC9p8cO4haeFYkz9iovMMh3z8z9E/+8x9NnvsECBwjdU5vJyo6uiS+YXE9iBCnodUKhVO7C6DGdh0JeowTm/8hNHmxyL7QQXTHPaokLBRjA+uv8kFY3jcSXcK2WTj/jrMne85LY8immi4549dUpqQPMRIoUNQylKm61euN5vRj4i1uAVhCImNBRJB5g28ppvjARAj41YMz85pKU/imPoB/31Uw3b3JNw42wONNTuwFA+YS625Gv2kH8DCyldw3WhI8/d+WK4MvKDOQpxGsbu8nFoPvTU562IBUQzSWsbPxif3s9ApSMbxEAaWKxUfw8CNhUXDjP91n+OwfOYQ6r0OqvxZp3vRj9QFcx0CVjFNe6UA+uXTj6rSLYq0jgBkfA5DCl9B81roCSMIru+rF4FnNjdZgrEVXryMXlEUW3mdmB/mMchj4A2NY8MeCv9t2Hh9cEpbWFlJSBf1Ne28HPR58LDKaMkOSlqJF9dN+/u5zGSxVgiXKxJIfgq5WsS89Jmb4GPGbO50OyPXuKXs23Kz/a0D7P6Nz7ya5IC9f1bF0PLIwjY1yQBWkgmZo3xLzAFWQ7a0tfbKvgtxZn2v/b41IaUnDEMycwuFKjXsAavfL/zR7VchA23Jy3+qD1bk+V27mkPvOlzMMyAg4LD3VujEbKg+GFK/GaYgDuLqzjPkBB5GFgD7We/6I5Jiw5wVocd6zlOrloWD27+j/i2SxDE3zVxKbWJ5fAWdcGy2ErTvVmafrJekHxE+cLxTUvG/zo7voBhPSWqdO0GLO/EgK9YlHg0nZCT9nE8tUCwtCQYLLc1Cqwh/yczTOFAUIiVqZhHzbW9sxW3cpdoKHoKOiPranP/yNWon79N9YWij/suWUqh9iLqE/FO+JAsdtb/H6AxvhJyIQ3Aeh+inn44Z4XAoZazwEizQoOB2Os9cIrj2CPb/xz52fRKWs3EWaDq0OFyWBGKBaMc7CR8jjEJa5HEXDtJfj2kQhH+n9aXE5kynwf5ukepFYWnOChXqHbpUUEWI3rYD5AicZlPBGSW2CAeFrA8kokAz3pPcXRFhgbENbfpHtYQYSFDBZQ3cBVJCP/kne6K45pCQa3hSExrENH67hj3ZiR9QD44K3Q8zrU692y9/nKTS/Aj8EmYdyYP2Ai1PPKEz3Izo5Q5AL/Zkuz8gYDvEQcf6CsIWxxOjJXru0UDcpbJ3qniUt28bR8GUJpggzJQWeUS0Wnnqn4Dnmsw+YFpJF2a6DX9hZO7AmCBBmb7QbAjYA/MAsYhqKe2LgKBiCivvdk9TzHCui7O3GYeOorxs88BOdedI2nHG36zi7U9afcFKG2jj9LMSqa3KFwrvMrrsJ88b6jyGHicIe64YfJ9R8IwBYFJPKC7dcGk8hcWysy+9dm37lBtlicEMRjLHlQrmrGWj1FouoZr2LxJdWMrAOOvW+VT0XMfYrosrJxnt4zikDchS2VnzopsqsbnUZgBKfDLnRs923qbfOs9iXwvdmmnvcFMwU3RjsOXWiLaqrX/An+2/8Pi7VxI8tQ8NS/qseIu+Vk3vFMGFeUeaGgImAiWmZhFIjfPlnfLQdPUUn+T189KCKNRAePp6fqZih/yCYvlKQzFR2HlP9p+s2oE069xUkEhSYKOLYiPqEVFgCN7v+GKHZx1pSvOiHtnFlYWLuMCmyTthMu1NBWEwAqeQXynGDxMEIyxEh/HERzffmF/UWm2+ywW0MWk83ALGhkiXXAL3mbk6vRuY3KfNIz2KUyW2IN9Khv0QMinjQiYAI0dmzgCVezea42jZreiM/tW3try4TIEcx+UOi+s0XYvSM8KXc1sH9LIzmoNkbTmxJvNdOg5XD7ZmSwbogltaJiGNpS+/GhWUyZqNb92l0rQfv7+QT5omKmpu8ir/NTFmJfct0pjIvJQepRzB3z/e0+G0YDL/XkinPZA9SoKPPdwMbQS33GjUlTOHhuYDxJGTL+JfNGmglkkIyES5eoBrAz+VsH3DJy0Atu1Z5Ek6ZWT5AtVD2Ds55W3WagCOdP9sakfSd+NPx/ZhDMSbEEhYZ+0NQRz1QariT+Qg0w375fEWBdveTcMO23qDmqKxSZWLzXvMy6OnzLIyOF28lp512zIMDRhISOz1BEEcBxDs3cFwNWGWDjnxdhgvpAzpc7vqA7NwJAAYoGCUX2Q1x9OwLupgulD6wUaTRsMfgL6DJ6eac1+zhVoMiZ6n7/Cku+PL41D7oKE6Nyia6gDVCkejG9hLwNQiqzJoV8RRFAS3NzySQZaBLJIRexYbkj/nVSqEJCTMA3wsKBpyh0TEzz3D+D6Xne9nE6x8yuWBoZjmXu9looxL1wt7yvpl7g8CRztl5EK7t26mktQkKjIGjw1AHTzwUeg1Q8BOVIAsnKE9eiwyeXHAMOdDX1aL7onDFaEOT0L4lEZODTfRB7aYYNLH5PcrMJZmfDAd82DO1x8aOxeVkrdQLIByUCX7HecArt8Awyg0uGDNZgbPoBtDdtsS3NahNGb9ey0rVkp3lYZjsSlyrEvTzILxLIXRT0ZhSkoYAot+ISn96rg6qFnTaexl5cSeYdxTPsJa4IB2I9eJeKlIyIMiXDnbeyqBTpmWgGOxYfECzwgP46sO99xPS8GVu7WmQy1lKB0+pQ7hfLZ3rq2UeNdCVErOPiNe9v3h4qE4zkEZ0uu76hZjrgjVLI30ZX2TRsP3RQbjPY9fmH7HVdpHzwRrEqxrGzSJYI1yCSkxP9tI2wHFhIxarj1f960gqZMdvJRdhhuFoQcuxGtxUqNlcJSmopaQe4VZlb0TTi7yADkS5Cg3hlswQME8S09UHSaycrfiXad3JVmU310EUANLyEjmtL0z4SD1skUk6gZ3oljyGdMKkxNTXadgeuYy6AoZqdd9MyJvMk51cBJK+2zGT1EiZwWMOL+hSMPwLAP3Ewm/3WzFL7O7I/u3Xq4uKsa+sa47fACV+YByevL5E/wMdmQ8GeI6RMHRif6S9gicCBvQfZvpd2kURSvg5sT1tTECVTjmR+rBiA7Wuicrh8ERsmcWvE2QJfOsGwZYaEcctcVGcxd2BHEHJWc/B5CSbm0BptiHGG1AKNDmZuko6j3HtbuPb05Ak3PeZ0o5jX6hWB4/iEuIkZ+dYcQNEU1yeK/idykpP6wAQvPJZgdi6chC7tLdwlVWDkMNxSXYEXvLfEreanPqoRxU30fuKbn/WJjNuWUKjpJjQhEuCSatCCVvkNrDd5/CDFrv02s1xN5kS2EZjPH7uAEu6UQnklss3Fso0DcmPiLHQg2kZUhn9OmDbN5INDrGJ0OlGC05GqQnud/PUIZ06FbfVke/uCZyvteF58nnVbi0qXUI7CuxL3u68IVKyliAZdVZwKQlmw4bwVUohLqaQZaXFAYMZ9mUhDRCkW9jhDI4iBZrVWhKXi1tLG+j+Byv+gn6QHBaC0bXo6iRl4iSpbZHYQbL9Q4i4IKJj7aCtR0WH8WGUxWqFqqfQ1iw+7Jm51Banxe2jEMJ3/R95wnWWK6KF7e1pp0v36uy4KBc1p7OK7lRsf9IkPxiPYO90xZlgzt4R3X38pt8crPyBq3EDvicyVDu5/xqO6x+ui9jMv6mBMhfKBJ/M2w09U5tHAUPnd1U686NJ+II/b1DYJ1ewJ3Wdp1EPs7FxyHCHddOpq+EI+RS1c5aX8h/juQSI28pmZnXmSdxx8uUX2qDAQZ2kXs6vlvwwepS8IW9WCOEjc7p2hM4dZu9JNJJ1lCQUNUXOnxZbFIbknZSEOKR2Myq1wDWw6njWkr+cyxW1PRm1KQNljHt5NIQQ5StQUnJ4T7fbVXjTlfS9aIPr7rSZSNoLphjzvoidRYLNu8kwRDfE4KGx13IEOJWetVMSHaX0rFYHf0s1N0cnzUi22hGo7pGONNGLS+krrH1a/h41yqdX4PpeVA6L9cr9QAJHD7INFcqnrCwBtp0bsbPDJXG/dPrqmbQ24k40YTxtlWJbrXPUdsS+wW1i7TWMvYfzIgsRqJ3Zca9AcZRabhCq9ypCHrK5zqss2DFZ0bEKTfvJ0dfD52cwlX/Umiqn5P+ZvXicqNZStzSuk1Y1Y295goF+20qfleXAP3SHXO1GkoCOE07gzCU/YwLjx+9j4F1A0juYnJpOi362dvP1+xA/OFUQLNqIn6zaHCrmKC5PvptJt1UWzdnRT9KonxSJ1NGAgd4H+DklBZrogNdFno9Vj3wc0c4lAHCqqe00mjGaqNqnl8oG+rTSC3TFvOBUi0aOjSSmRvM+Gssd+6hLHoZ9gN5xtrGWk4S/FAY4rgwzFTmZEccreagv3XqaZluFUPvLXUAaQ0ZC+24kg7FeANYo2Ac+A+kglrESznTJwCdpZ8LTZ2KxHBDaEn6pPEIHf2OcdwoZ5+NmsxS1NMDRO9eD53ELbaGfNMb51/bXqC6bodjvUfeGaGXywVe0NGiiB2OTSzgnocU4GjlydSpWBpNyvbMTvpLhqUE3dyfxkLxb+K+48WaJqD+x2HFHNXQNvznEB47KjJ7EWlsSSb8yb/Lx7OlBdbf4eDdq5m3smwWFfvRbCuWnIEXi3+rx1uxhcnGx+d3nfHa8RNE+mk+JyFSqgMYHpPInbSCo6YdKuGPTx9i8+/rPhH/GVCHtyJDMAX4Ah6mKdm1+qEgsK+l6YfKO9lZstAByq0LfjLZgg1f0gnpSKJ6Z7Fz5AH+OiFk246M4HdltfmZfS+tqZEoZtZYt/N3fy3XS9tJsNTXm967RtG/tRsGLlW+gqWQBApuvjMRKXR8HaHa/zSmtez2i7shnL7AkJEDbO/hPQ3W50eZhsF3rIlISx2MEodmLClmRSnCUsGlL1Vt19od0F34Mz7cibeWrW+4EN0bAwPIK0sstpaZ/RbDd+xjVkDizb5Rnkncs3lS6XcOEFQulC4W+r7TZSvWm8yHe6opDBNdwPw3oO3IDi9DkHiQIXxK0WxkqYdfUPTv8XCDmZ+uwdgCVpddVEBIFP/MpBqOJyy/6s8eg1C7h8KkPVqNbdXdiq1GOdmxREyvZ9zC0Ki5KNJBaGhNqjBKrucMxe2ZH6mDviGhz58ZKOl9adh0K7mY7KevgMOfmHSxJ1WZ5TFpgSgtdDt/UpEhZkjvGzLGkfDEWcMgbkqOcb7qbm+XGy6BVg2cisZBrhWsIx28mLHay19CMFVMWm4+ioZBTJXpelRVDU79vDxaVjTwcdRezA/ErYuNIioezJN6W0G5Rwegl8vcCBYswwV45uBRY7H865u6sg3ADZqjWQH2P4ykkuViTWRMFQto6WI5EFEWCPjuLZQYSJLtRC2iyCnGD66uIAnbK52IPWfvgbJMow3wyKT3gIgKoHxEchxqAneAWZAy2VoTL7TuGCEI7PzRowQKE3VVQfd+W7P3dqlLCd27gpozQ/RYoEu+x+NaGCRLIZTEcHIDSJ7iGvhpmkyXCiuAFVnmOAns6xw9QjRrFB8uT312jlXtoy0sKSaLvM+yuOVGtB6Hl2NUKIlEvGHAT/g3T8E2757ZJIWUkLiNCosd7+1u83PHQWu6TUclmZ37dE4Qx4MUr7YAdMo4EVpuHRkuL6UoOlJBGfiy7oL70qF1XJkrxUfs64H+cnO0Q9VdwoeRLS4ahqqr7cj+ciZtveLsNdgoZZaRr0LQ+kkUx0XBVUzClWJ9EDRxW1TWZMy3QviZVzmkhRLLDtbPPHb9pTmD1HOKiaoljFdHgUgClfo5Q0OWbHqvTmnjLZzM3ZdtzGuNVKNEYBYDM6gKUtzVrHI9Iy9G2eGvG7+B03V5aUJikf3sUAr32pHb+6i7zi8grsWRxixdiT/w7uvPT5DW1Mn0INs3GQVEFvQZCeWrOIZHWJDAj5YsYec0xiiKxWhRxwujmoJPoUqY9ZS0s/cJ5/Y6lqi9MLvGWOLjGfaSe22/hj6AhVvO7VE28xRJbsWi7Avoqn86tDeqAOIdPqhdsTxgqlzI3eGgi9IldVlmFtZPdS0j7xbrQHZFqFUXxWjifAdP6Xf6pUcT5MaA7K6JLhxGP/Gt4sGY4Ns3PFmFrUlDyfusQn23RJjfleC1p1MzvXKHQ1YP3gwKitpgQIbcwvDZ7sstJX5GeIXvJasthjDRkulBZYRA+UdwwcHT6QqFYj7bcdMTeWiUDcL+9IwR4dqnu6ao4kTRw34rxj+ziyNm9CYau+majUyNobXOh5HeopEDK6PfZTStlk3sR1DLoynSZXLrIXiUbt+t4TiNKeSyeIUiUIXQx0XGrTePiQUJLSw3tHG27/6PxVEHglgxG3SgOlmIp8s0LYMT3E7CWxsyrB7RcC3TR1uqqdh4d7FatgmaCSgrqKAZ0TyuOlFzgjwNIQT46ffN1lT0YqBoeMT/ZvyLTPta1bBmZEdJaaq58yRvdFDwuIz2tPMw+1Ls5ZKJHet4SnEp1TgzVWcaqI4ZK7R/FqSgcBuSglEXwhh1NJ0mgab4NQZvYDX9FmdPTgF8WbxX2v4RXFivodKgnkObnSi1v14qCe5kRzThZ6Z1yih2BnUpkxbN/3JPHQeGBPXAlDHhcoLp0s6ClZ/Uu6OdMYQ/ueLq4leoxIVr3Q51BSSm+yAxSixa5yabCoBRxp/Zey0nT4XDtBJUgJE2h8gC5YIVwM88bsrOcjxL+wX+pLEhaB7Fz+spamBaCnRKHF1v3v43JllJajkWhbxkEre7o0GKenMDEwC3v3CMd38XSLzZXqbW04eryRyJ5Cn3t1b8+FW3JlGXahO6AoyZ1qOMY12OqVu0qIx2ypB+fQWfHC0G9y7BOKrUMMlIxCTJnNOOn0hzk2RrbLT5WL+A7eWl4Ivz480TWtO3U5VW9OiON7cQIeUK8gHj5Jm4mKnWNjLk2x4rvoVroWhvY4LSSOMTM5d4kFIByn127EVgM/2DVfeNFGmiXrSx3CavEahdb0G3MbtCkD+dt46te6HVtRFldv3dytLw9IELepP/Hj1ypub2nqDRsgQAiqpRU1Qz1rvxT1AiPI/mMNsMhT1hNO3q23YL1pAGnqNZKbt1dfHU22xAF5Zir/2wjVvJAqdKpO72zk1rdtRi6PXnWvSPOmTVuAgxxbGRViiTanHiLkrtQg9nP1tEvnWlcQFg+Szzj2DfOnWrea6CNDkYd+utUMe8jzBr3KF0OUlEC+rkzxtY/dB2joY46gRczgISYbQLIpvCB6K5fWq28QVwRjXhfcpKdGkjHEflUQsB0akWUuetvM1NVoRbjuk8KpPl5apvLLNKmiKJqhZEwXGtmE6vKQd6Xr0wBTyC8HyBdIN74wGs1WXIexd2I2QNX7elfRtVHnKGGJTCkXFk2s0OivdstwU9KdVz4CcPa2M3L/eRFUEOZp8MQZTyk73MEY4i9yHtemXjsgQTF5A3zzYQl13IO9vGn0R8wIccxaB0Pj3HfGUApmspqv3bupd09YbjIg7klDQ1V8/UR4GpyRpSqu8EMMCVEqHjNSdCbTbWZ6DoQSMAIOS3Cwv2un3ipvJ8PtNZFCn2WMZf27890KHwOSIz3QFEG9unWLIwGSamckayZb1blbYVdmYDeMUeZx76z4Q5asIaFElZ1Q7EGlEmZl3Cctr6sZXZUzOXliaz+BADVDaqGUSQMnSzCUei8GstN9lkukqhsZYLWMgUyoukAQcmyMyn4CR07n5FJs/Fcyr08hqrwC4a9GmlYP7WhNpLjy1wrlmuHeyCmAE12L3RuUWo0yZeLV8D6MXHcso8CTBU5LTrkEicpxKUgU/N7WKEBiWWgBFsr+aXAsci/knriC3gRckP/ozEHL5jQKjWK+7pWBhpL6df0lWhYTu5mhEyJIEEJXdnKldc1UFbUw2aoZv9aQiSO03g0vwh/jiuHV10ElLMD3s0eEo/52tWTuVlQ3f6UtnBt295UdAlQf4QYKx89NICUeFSbTvLyskMOII3DqlFyzmHVgTz3lxdCUhvC4uvogtIe1c6lZd8onjrDUs1Ch08Qb2gVNgiJ6+Y332325Lw08MmR7l0AA0uCXRxw97sTTqlqGQdoIji2DlhssPMK/ChS+W9NR4SXfauGeAyMzrpzdm8488cVfUM2jTU0x5KYAPJJ0VUm84yI4j6hMBYJ0Jk+vt/rwLJzkp43T6n/x9VtliXDh+am5KLCG7TQGJK4O52MFZQOmbJpflZzrABkoL7AqwEF1rATyy+pKPKhDDGBNI4S8+FCqYbqspcPo3KLqDbxom90SsU8oHlj35xiCTMauQO8NzfL+5TXYcCn3ViO8CIaTkyvvs6JMDmUgX0W4ziHKfVxN2+hDvhCMyS8n3vv/vgaLxHjYLrgNim8g0eLyAwcofF286qwfMWk7ImaBVQ70B7G1fANKgmYD346gRDhZYZTPjMK+TSD/NJDmK86nt5K3cPsicfJRfpwEsRKtn1GK2Za4wySjOj1xYY5TC8fiduzceowx96Bjog2vc8v/wLCkq2f2sZxdMrwnPC4hkPmLEVsc34M4qyXa8SnAUWBo5FTOPIqe49oESHW5bo5OCz2RxEIF/ByKJeI3nXiT1TwrkT5g41n74/I8LHnUEHYg+eRK+kqZ4Vg/N8y7tgHvYi0QPbWk/dMZ89FilGPKD3veBz8QQqEVQ6KUwDn/xeoJwxj8axn7vvE9gNAmKViNS/2VkHLHxrpQuDRV/e1YRT0dozPu/9AoQM+pMoEoXiLm7i1Xmzn+aOvQjtFnM/Pk2ajORFJKUCEy8Q0+1z2tR6XBRlgVrVJJcqIuBLt32c3pfbKIGDogvVMmgjveDCJEbtbeD0SB8XWjL1ZwLO1fNYIkk6UTcl6vbsAPNoYLEKsibn9rWNpsB7d8gAAss3NbgzceXsj1sKeO+r/3QsCHTn3EO6U3gzscBG59fsltXmTR6VJUKqLWeEPPRB9ztXts+neYpm1lFeEFxeJ0m2xy9+b+zGhb5pgFwtOOidhAG4+zlpl9SO2Pri6P6Ww1Y92cH3DOxbFdAw9zkETtsF0NaYC7nDb4kvZRwWCURhAZd8vCUlurJMU1hOS3rGChpPJkqV60aeVQdkxDIavy7wakCDzTtaMDk/UImuFK5Gs1pv2t9Sz3GotBTelBea6cJYFM38DuQkVjEJRwk/57l79QSQU1iUoOBVZyMnLoNWCnXZ5SiRJR0gVcJFsp2FYVgxfCMYh1skDfwXRTv8RAhzzGWHFVEDh1vhijHc9MMtAp8wrmQ8/4+Z62OXukCcnOA1tMC4xpeJD89HrajbOc012ykV1ztP293YWIb+M/yi7v6ckh3qB7BYKPlFZGtRCcDEhrp5k1ZOGPRErGTPlT+5DAHk2WzcSgD6NpeYQ/urnaeVGYZPLWSfaYWeKOYihV8zmP6aTE59ljKKUdti9oDkOV2lpDI9+StYxBpg3u71mIQEVXxLqdFiw5nBaIRGLppnKWNIjiPSuiUnCSgNrSh9+7GyDRvXAI+TbImBCKVFKdQN0L+C5Es7Ff/wkHo+HJTipuwzfMbXIrREOjAADPMpXkqpcbjhnPNYENJQXRsEwu9FOt6tzSzf2kf2hHzcYLEGeB/JDrL/vGcihOVlF4aS3OG4Hu8JRqUziS4mJYS8trGlVetEybjRKk6MUYdcRAOlBXhXM5WwGZwMBCgQdBOBwkK4AXsM5rVr/e26ERcv0ViOAYySBERofHOxEnyR921Sp3M7Pf3HXUfSt91z2uyfpKScsgzKiO6R19syKwphNxrp5FYr19uDYRm0qiZNTx6ETriLSFCaEki1WpQlpULU3FfT/j2/uUJHR0jeVmh88B7tAorge8rc4GXNv5m6cwEEdwt9dKoPrhSv7abLyYufvm2wYNfGYPJB+v12Oab8EVBaBOR1mtvFAbtGsofAEYvzxd/W8lILCn0M1Mlaj6Xhn6aICboYKZDUwSMIagv9INE5wcj1QUUybqJqxAnGL0sVFuEKB9kW9OW0tlbiu4l40KQvVeyhL1tVY3vaocZ8pARjY3j4knZ3BS4K+zqpeF4IcVHZi+djddmbN14bj0Vm22C72ScYfGSUdkihsg1p3ED36eSDXKUDA80wLKMejU/JABP6fEQB8tzm5XuJ1/sI2hAbzFfkPCURsnx/e9Z0Eez8bCv3LYVaWorDRaKSRDLi8jw16Q9U+d64gaqjdGu+DZ55YdmJCBDTh2uKAqlDcCrGi/r5kEV4vyZZNid0Wun2TB2Wi7LGQYLxUR8LrZINEOY61BluUD7HmJLAkuP5QblwzeSZviV3Flon313AF2byPqr5txPoELjIS9nzkQuLa9KGS1Kg2blNBsV+qSxF+8oq/AFwGAHLREm0IIuUS4kCySdttJ+xF0L4eXJbhbL4HKuFL5KQcuhQ0yhhy6J3kpuAaHvzoCgszbNoxep/UhlTf9zKv756mKm61hFvKWJHDABA4PDk+zTm4b9LGCFouimijK3WlRdAEsQ36J/r4vuYOMrfeg8eo+L5YO1o1wn82oRX4xX/DFeHwX7Lipje8RUL57GnxTLMb4aXuzyd84/C/3LXbJRnqa+T7XSOjIo/A2C/qbl/VNk9GXlGbcI7xmt3f8AlWGxv1N0TKlbv4vr5h4noAHzdlQyjgQiIznHO0F2S0CTIjmMgC2gpzjMwBRDIDaGn9mlM71ZODYXlGSwcQf9ltICavpzSUXV6pjP8IoE81ZbpYrbWOljLdbQPrBLzKkWa+2nR4n+aD3yqPZx9j6A9aoMh/7nnrqzvK998qibVXQZ4KvUsUGT6hE831r+AysZRyCLluu/bZxN4lHwSOxzYcreCEY9cGJ7xvesIFzlC2N1AF6jmX/Y8ogOKprgYOZSXeawdSiJc3HoNgj7xpJ80+MDa/psSPkygYYSAHVnfW41qIg9lEijet4Xli4v62e6D5FixZknhmMmetWNMy/LcntV399BwcbJ20XLnNrVw5ntoEforoSw12+GrUstD7ZDn311UNWntABn5NF031fpgaWJs759qA79M3cUDjh4P00RGOyDXutVyW+yhqjMuMgILwrh1JmRbtX4pJniCKgooQakWvI8FUprkHF15ed4HaTblwB7PI0kQHO2irKDv77Z9xvgItvhsX3GbNKlCKzEOrrL+zryAAZRke9wUkAwptzldjNDBLjdIkns9DStQ/VJaE6boDaQM4x4EF3MO1e++cML2FYL9NdzfHfaioLHdgiJn9NVWmhWDxRaqsteghrnmv7BMA/93IHCtQyby4OtIfNmVcnlPTwIzfBar64u6oVWpJMJtw0bTjojL1BSyHXG26h4BfRedSYHLyizUxP2KrC8SZk7o9zOpwtFbU/BKlQUZLxCu5fvlL9eq28LQfxSr8BdIc02O2YM/Gci+0mpdHhBr6mv6SqVWmlyUulGy287EDoUjxvRfINCV+EI1y4DlItHB3f0td+N2D2sI2Ux3Gl4fKFc0amV0YsVErWFU+8zX1KpdDuOV4XoCWmMpF9t9l0vV8P8kT+vtXxbAhT3bgipqZrJhhVSA5y7rCtdSag/veGy7MQlUp8z+1RpOgqs+FaS0jg7IqKFTkWGsJtPbCowDIwhVaElug7qoEM80QFR2KSp9/LAvHvorVBlXCaaNg6VgV3e+PaT2rcRVV40e+A2v14tl6rm32tHN9TwF8WCfkv8MlF7uPqn4DIOUZCVdMrFJ9/bJz/2Xh+Km8c43TDoTc2lPoM89LC97UvDcLMDkIimqI+LwX9LiCWRcfoNJHGHmBMd4n45F0JfkbjNuLviMWTLAbNPuhjstgetAi7MDQF48prY8F+4s9Oxmjnmd1EF4uA3cMN4NCxck7lAmzWkkaiwIRTXTNHGV4pZDznuJd2kQfT4lRU0Q+iCKGROEqFX+LdMTy6eanB/elJOv7zUQd5cQsrsBzk6V6sEAeIUqLHLvW3WMvEd2njLsMvMcZpcK5f4YV6p4D5DdXb2D6xbW+x2XrOUoZP1Hy6XIlPNaIE8pb5tDcwo/3mXB+DrUMYbF1ll2iyymsBZL1qkv2O+vza79Ef7gZgsZV/aQGQNW6drb8MUuu0x38KMq/zyRZ+b7KTfD8BBObG5z5cYPtAnJi4D4w6lJ+Uxr1oMzmdH4ZCHv8CtgICI6WLVkcLiGpUwyIIfizBkS5wrnzuBCyiyYMyBuhJoY/CtJm3Z8Oq7m4V7Di1P/ekwk0kDlRj35WjsmH8fYXQt2o97I3KJ76BYHXokqEdy+Ru+E6GXwysVNPf6y3U6BJ0tbYD68U7GWMKwHfUHYOynN1W0yEvjaN3YLmOno3kJhXhzeEn3+lQt/YcY6rUoFU57zl+ztyrOwKMFvVZGwxSmUx5BLHeFcxuKBpHvHRNrgJ8fcEqIJFAyK8eHSsXaJ9R8xACQUxcO5MfZ+Yyv0uHBX+v5GKgHET6li95ewxWiIcnT4c1Vw3gldTFsoqTgDeqJBoCv2wwhnIKCe4916r9pHV+ZUiA3bBmEEwYu6K+32rUpBz4ghvvN/razEJpDuGXGJpC1+G+vNqQaaPVOg6tIA6NJvV5OB52P3ruB3z4pIjX6o6Cg425CqBTtLvKg1OyVVCdcaH+H6ANwf8txNGB5M+9HOz4aNAhMSVTA1cXiMg8BOxAPGEGww/yrDh1CcWyiCtsvXAUUarsziR3jwkXIbn4m4c4PCIxjVyi2T+igNv/hOemqetwNOWB0Rh4PGcVPypoXLuNGU5I5XlQjLQ/hj6aq6IA/vC8gsPkhtZnYU8wP6ni/Xw8hiXmH4yVSjwG2tgl0hsVtw9RFofVTRBCSqmHUy0VvQkJgFA+NwW4+7AJGn8RVXD2t7UgRIVq6jThhgSh5imFUCfcv1b4mOirmXjKlxcvz9uVZADHvdvIA/ax1d9oppti0ntPthMnFn6b28FkRUTsZNMR9v9OzjbzfKJ8CMvsfvJtuhzhfaVdz3D8OG729k14uUlCiWx5HgByGx3LY5cX5KAm++Eczm/SWF2XifSjIiVfu7UGVi+XJn5mC1TQaxxdDRYJt/jOenJ2+fwX2KSw9eNI49rd2hX0se+6lBUgHC6FSpRo4IC9UsL9rVdDS5oUspwJZoH61J9YfCTkejcoQeSA9KHIk1ztiA8izIoIcCE1oAFVsrJ+rTEbfpAC4G885bj/cLTA0nok4YMY99sYIU85Mwn7quTNW45rfx88cMTmayUw9xXonOGcuCo8gbj0yb9YEPSpmcVUt6YmZgHnOPxzLnleNDfjSZauWb7U97uxK9JfdZ0dthr1am9AHkKZNhbjSvsHtxBL6rPcGVBNVXZr5awMe4Xbc1/Q2Z66Az8VQj4L+isZeYZGvwCH26Z4R24Iq7JtJmJlUWS5KletGQHmrkNXa2oY/+zE+zjFm+93g78b+nltdZjBsSwEW81HY3A/GLJbRc8BX7iJDpFy9/ggStMTbjEX0VSvFDKLkE//SQLXx9ASoEXNkW+svkKPhudrhqkcErzh0THpAUBSRwRAOdccHqF44ZfhxPthyk6xSwGxDtGvb4kqDRPWrIixfynJU+LAnUYQWYYeNavHwyKoeUf7TZWI1OPYXZEBjE9PV/VHJEE01oiu2pPRNzE6GNLFZ9TYs1hxmJqasNILseHW/lNqeW9urRxXI3iK61svO309FKejfD2CTQy4P7D8xEUChra/msrJU3VmzIwVQ2ItSbSwBOeV6oZcmGzYoC+V88jWkBcJxd6m9S/suk6pYZghGb9lm7LSBwyhnEUmvAkG/gsdAD2MHYRYEwlEd72PgpXf7hhnu6R12WOZcZmp8//6kRFBBavImYw/Y9+7PNZ7xLwp2OxACpmjJFUKWytG5IdUyxf2eOhwFuAz67e6qjB6VyAadXjRl+HqoNVuOvS0tq5Obfopy5d9DOp+2bJaYfkhQWlazaZ1HXAzabI/rdGvZqdaphGnfBD2ujfxTuYL1JiitmDUuD2ob266teIG5jGWzlislAMf9TwUH6s1Dl5xJjm0XiGCNggPy7zsjUFsj7leqOokrfxfYGiLh2naq6xFpprNhQwxi5pb7JuP0lCMav/FGrNyS43iXVqlrZ6yQjYINgC6rygpWRAwfy2YD0zj3U47a01yIvuFt6taAd2iD3ege2Q7NOPYxgNthXBez07sQC3BUq1DzqVZJNbJMWriPD8enRKF2qXx3I41Q040px6edhjYnoi2otOYZgHC9TP6DzAU3hERU1pz/Ga6WGQ2OKbOqsk9GjUlv1EOgJJCHZGsqWp6ED4galN0ZCHkidyqyzwmKuMeBnRud75SB7mP4JOiVMaaOeP6qxEIKgYRGia/MNlzYmVIuVBqstQAGYnk5DjTPtLk9zMMwEtnkQ8Zfu85M6qDXXJCb5mNSq100QzsjHeTJBVgrEIlnTLh2uGgUodx57KzsLkv+AomDQGpIacKqKg5zCjS1b5ib1ULQan1/5OO1cCM3QLOgfrx83gc3oz59kAcfPUeSKOOSI9GzG7aZabumw6ybUga8T8rd6WQCA3YvV9So+hqnLman9mQWUlECX0NM17aXg/ARxSjYWWTfTLLQKZuJCdTKy7qkNT6t6W5hA/icAbSpuGwn8dSqAZrDLnm59YgfrZGsfMToSvnzmtH87rrK01KIa4jnCah/MEgzfbRjB9wwSI82Jc+kUa4rswWR6X0HXDBaYxxbwe8Loxci+UyQf6IQe0+JvL96GNDB+3sCkzY8vG2q7n+lAxCfs+r4Xd9bRIN+kL4r3ZJ+rN5ude8xpJA/21hv1Y3qB5UD2W/HHb46sr/1u2ZmzXpTAMGLlkM/3x3Li8rtKtVwtBSUm3tISxZIrhphoqwafJgqf/OaHAkIbq7jGQvOy64tBoB3gF9WQigmMzcaKXWhJyKdWKhboyaFGGseKJYiOEeRoIyP14OqsD2kv4Mj4CIDc08Tcwxr2GMlhujVcuU5EgeRTgIMy4uRocDIfkc0WcdWiMCaSmLGOEBpXOe83xYc79iUq1vMVhjUFKh5C71qRP0ux5mZvB4rfripcDd55Hp6zLIbN2pBp0XOrTQeM++RS3UmaeTdCORL0pif68aeZPe5FQmbZm9F963NDlgNUIrpVVgl4sehs4HWdP8pSvSUNG9lRUyt9mZsOZyZjj1LXwcHq37ZnsVoeWeXevi0vieXLRioah+crKgRGTPNiVC0sbGURi61ueIiX5meGjyn/A799X723XrZq9tmsC/p+/58At36Tbbk5RNuYwt5+37kVa3KmIkREFD+Dfk2A4ULivimVerQuKlZc3PP8qdcnuRM7w1hMOlsdjzUggvhWewgiD8rSlrVB4TehdditjcUuqJ+YWqWW2pivn/XdepN3RkyxDfvwTidoyJO717iCeHt6vx4cx82ZoO5Sck1GZ1Df9EkanpgB561xLrmemR0eMa70LUE5y0/kQp3ZFSivhGYtQsaNGapgtzKlJNa7wHx2jdTKl+THtgRKrQssJ6nKLiezKBlx3LcbHCmr7f0ZQPnVWO+6awAdw+b4XK4sa3fwlOwJ3xuOBtDSfU2lg2kUvWWtVStnOIM2bu8z/6PhqKJvQmKR1Cxny4VLC4pWc5c1oqXnSdxqKYh9regVkwJysXEu/QYAMWa/THIXymQiRts/hURppKxr8Vc/oHY7hg0uTAHnamNFMZqu9LyCzCaTjDemsr1VYV0IbDlEyWGTGcJkN2TjxyZQfpOttaG3QEG8lW6p/mVDPwes3PfPUvon5taUA8YVq4lMJh3k+/mgwGliitoLNA0vZIdCC6RO8bxJX8wH2+VqsbseTxeuFtjHuB2O446H08tOHVL2iBR157vywhlUXkYfX2BC/ZEzYFvqaESini+V36LARFxh8HVkOjB3x2V+ubwjoOHaL15LEZA4UiPvAbUf2xhrRg8wLiCH5UODrHRi072I3OqisjWPi8W3NScMav6itaKjgEEOEUWyAfhngcU2ldPubIbYitLGerQQnI0Nt0ptlQ3HtFwO1XDIc+JmjXw3G/Pre+TUTmldj/ybsgijSGq6/CnqbJLXQljBVYn7413JuDTl9BlXhMycKLaREzwBfJo2HcdolhLm0fgqv75mefzW5yMw/JqC8CjFM2olsKgZfdBi0smL+zFazs0h9pwgHofJv2ALtDk3MBVavcJGphmjgLeOHXAnZNRyr4+Gax1iLj3gYAsJ5sHFfGnaUX6dK4jF+m5eN04p6rpVN5AO9KQgAdhz6Zly9TLC0mAozJ40SgRJYWJchBVd8SzZT+4tLaeeqVagWC9Q0uw9aFpv0RzU2FCo2qk/NtJtTVUczgMEm0X7VI6jpxkOk2iYTrY9ecVBFLqoJ5k5mxzekNyVGgSiRJpAoodEM3+7iGAiNvgKLv5MgkrEfKPKd0Htshm9prXsQyiFPiRyayEnUFtMCLbV4lNrA0kvVVPHTqC/rFFFKobt1EpUHrPeciagf31D2OLayPLou3LtqG3fsyma64AJCXAs6Ares9EOdHgxk62xla1kuTp5xiiuNUM4gfcXV5tuwb/W5J0pJqVbkyzNqXAfooNYGV3oQLI6WTgWxsRXK5ptQuJnwnZoCNHjrIW1W1ji+76uX0Xb0ExFlw0qJN55OScnNRjkZ4L+sS3z8F2v27bcuOfE94ZvqxA+Jdg8sqf5sruye3dx3HrebP09sb00unRn9bsZUlVYOXHzmWHedST6F5FYjYAvuI9HUKNlDhqdfxOvYD5p+phELy+ETJcUpR+Yt2PVyvnkgFiGihlw0EDp/aie5Z8uv0+mBdkVUuZinbS0Xu7Xj3vAD6160zUl4MJTjSzXuHfQNd5r5RhF4e8tw0XbJp3kBHcecYMGyGqsSUkNZ7gzcS98LL2FM1yDhe0jNy+XRYwQmihW3WDDusV60nN4hi4l3eFdFhmg9uGp146AX2i7WmTkj1D+CE4gQGIEPpWCCQatVOMStyFJ2air3oPlaKgg6B7RYC3v5auVdmmxmdVuSRCmH+FbJaHYgQiuxx0N62vvX0UiwT3+SNNQ58oK/Ifat2vABLKtFRpoO7TNsTXIKGiPZKMf8niB7f2xwj5xzcdoQ/wLJMzB6hKtZa2tNxlIC1/hxQJkB6wfX4tIWS3r4fZxfsEH2CvlxxxDr0WU4tzAUXJ3UAjDGn2w5gV068vf7AB4fmKKKGsCUypQAHjNemnERqfgptbAvi7Q5F7kD5ndQBAzyq2pvZd/cD7fsybBnq4gwV9DXbkfmM7V2zJR43jtrycgMlpz/NKH7VPfM+2QJsZz69o/HPwuABZs7ABX9NGdsoRmXUJEpCE5qyxPox0+LXgqaZbOFaSVM9S7D1b6SohGSEn/GdYROY1NMbcwA2wzsv6WpW5D84tavy8xM3P+TlL8MxDeVhn1cajrMpABGChEod3i3Y1E8hClIMbMFeEJWeG3EaqaaZfdNHJOZVsNOe58LWTc/By8Zax3q76hjGl9kpoEY3fuPdquA69rnppHqLhjMxDTfFW5iNNOQrgqQYEqNxhTDr3V6WOqRNMX467kBrx70RZdLYLmdTbgztBa4aL40CbN5+lsR9nzRUALQXudDKeqPm/98uEnnWfjpZvSIKKvMZL3GhfbSlb7V18c70MNBkDNgYKt3N/8cSwd1lZaTfOJEOcZ69nIp+nBDTiC5NE5EIpp7wIc3Pd0QnChqcjWxAkx3OXhFyhPwpoWPGAy0YqMzoyNhqchyl0lX26xygCQpL5Nw5G7iVGMT/Hy2++5s2mfhvVphsH2oqUlnWoY8BKFwUtOs0XRtIJ+YwGUFaGJtFq0/EmTOkSApRZ8DMBzTAL53ce22pTUnYIH7iwNMzv9zmn4fsAwidI8NSsVR4VqaGj/m6AmYsCHnuAu9fix9JTbmi2Q5F2+SVdK8skcwolyjSzVSIGrYlm2t/bmz/QIdUhdocQBKxynSRkNoP8F7s75LNOapheBA6gA+pY6JOu/QRr7jCzrgB+i2zwaBnW7dg5Sr2bzilAHE3osvBkf9ohEKPvpYQJK9pKblpx7Elc7VHW158fW/t+BCo7GsD/nf7Bdthfdh+tLat54+7JrYiAwleYy1urj6GrlKGcbq4WcUoM3eTAnP0U58zpa9CBLerwsz9eqQSjqQFsDGcI4l/mcU3rk8fzINFbS0JtYCNIV6mALie49zQRA7hZVqYvlD90wEP+LzwDZ3LJEnWn+34XcLGTOZYZYEmYGJ0oPDR6x4z8D9Rx183zqtZdMdMnh0Knc8W8ugy5gnEkkRT1VnItR0MjVLIG5ctORbsj2I0IKCDaiJIRCyvGzO6Oioq5wyQ+VXH9Kc4t6dEW7KV4xG7ro7TpXAktcDv+5GWu12bKAVdaUHoAnx1+0FhHOBqkI6531rqR6Wmu93gGNU0UquXE7S6OplNMvosEAkY66udtw5F8TfPI/l4RiAsLtrPhTJ/hAZtzFCnzqCDl0PAQu9+0tqJ+XITxpTGaqiUGnJrA8EfEMttf6+IIiqvZIJWosd6SKPzCjsmwL9H/fYt6RbbVn2TMq/HoRPqLxgWWSZxz2mIlM2Otc2LenjEXqXNCrvMztddA1nPyoIbmkuXVbqhI0aA647QKCY2R/rO9DSasMsZbOAWSgG9XLGyYWaUX16mtHATL+Yl57Mxhc5qhUXk6JQBxa6hBtsyYeo+ZEbJ6lJlxrJvWR9DEfDFgfzNnTsC55GdvH4iYVg3TAfUK9XEKZcz1dALdASwxYXmy7WCGlQ+TFrWS8rbJjSlRC8jNhiFn+Kwueho64Y88tN15XNFSxF1AEY0UH0cT+sYEMPcjx8lDMfthTgfhkP1dMarkvQl2qKpANJDtEC6I9o3WRY3FLNX1rrNdxtpJQpjII15H0nc1kiMqEOzMUkXkvXhBtZx7pcI7Cp/APUeUUGbCV5aaJWwRY11y1vCAjcJF7HdNg2G+QGvpOHHm6roolMkgeVGdEyzCPlYjDz2Hrdlz1NzLlggiklnmIcII3/4oOIdAYdjZKEy7zT/m3y1aBbkaLKC6rpx5mzvYaWr5oaCTZJAo5+FvavhNxo7V/gG7Yh2IDL3/zKFjiofzVp2j726IiHolLEYSKrKGJlJOGTkealOLbJwyz5vt+NkbeBc6qsbKnhxLJP3lSt20b6vpu0UqmhSKt7P1UcBQEwqLovjKr3obcZG2YUNAss4h/FbROOgj1wIw0bnhA/IMMLp2ljv3kxAQ3yGZSBO/FaXwLLif5o66GgsfqNASqrf8lzjE1sRV1+39Sz1flM5GpwaGWkXlQ7iREMWThvYLPs01dCwyvaZLx0x1wwunzVos1zOaA7T/ZaC/MXd0O7nyIn4WpnhBWkkLqxvKQSQ18o+mqb/dHRV1UbnHOGYSQSXw4+FUm5rzSLOaFIYFMsz/jtlcXTP4CXpNREg8IkCxZf+P/xnjcZ07EdK/g9Yh5l4YfUHmPB4+MYDfQYgu/3GPATY1j6baKGu1R0Pb4IJDCo1RSNgtxCTtRjNZE6oZ0XsR25Nqsc/pOM68Ow1Df7jyhLD/vwGS6y+CDK/bOxX5EIlgSKjfTe6Lq4wSRecB4qPSvwYryjT9vkdg5j0XFICAOc4S1yLH5cIQ8HNQ1a3nU9XtoG2zAh1COF7P+SSTDx/YYpTV77OyjiR4zT++swL2iX6pg5Ad0gUux7ivStP/7fxy9ing7Ios8qmRhcIio3FFCIRD3s6p2/9baBOw+RAp52zkjRhrnXVZiYZN5glhde0OCmK1DGvQZGwbWqYoDfQCbS2JFnXdQmxmadcPGnWwIx9s1BMsGWlTFld4BiuObrF5YxcMt6yWP8IjuSwhKzD/z27NtS6j4a5Ej4u2CRLD3Cs1oSSmv3+2DNEME//JD0jMeipwYf01H2LyjJF6oaCgo5EGZXAjj1KkxCbbSQeAoEl85eihWbSVsaKu7O5RfB0OSx4PcNkzpGWvdvte10fTB9hBmfah/av7tUtvAiGtdX2ZVDFtTefTwrSlecVDj9XaOdkc5FK3TkfatnD8+d9vuHQ4zcRaiS7+zcaQam9W45lUGIuAc8eNDeSLfJP3H4ySaE+CsQVIGq/KIGNKOQEKl0NQx/Std7k1bUhlaEKnrSEUhzBSKZsoLH07zja6NItflmQAG0BoEgK4aYGA7DN2A2mgS06qQ9ldmzIBe+1UD3H/PfgW7c5Sy+h9vvqIFYb5K6OSR7Q2RRTETIYSlrWAp8C4Xazx/Vysg0MWRgLUfmDlwQivffwdzhX8a+s19s4fSdHarVkIRPEtTB4YUMrsIH0R9TNw0rdPi4am3oO6A/5F2ahQJfdFs6Ug903e2DuuPnCoF+HOV2mQLXEhQt0Ioz1YiyBlIq0+37SJXUCcDsTDpesVi+CIg2kFriHpNP1apDmttS4yqCaSGnbW50SlFQObgkcmQeRIgB3IiGN7xiPpQ/XXtckNcNTxmL85Ro71vvLnD0QufN8+E+wYatvzLKrM6YP/JrI4PkmWhGGjbNlH+UuMdlS8mGPEv75IHNTj9yOX8/xwT2cU7GFfOQeQtf3rYVw07hfQxah2f98Y+ooRz6+vQIF1dfDLqcCCGHEk2LbvcLfdRe8hPzzyP6F+5fA7+GYSAvQmlwC9vWxfSRSz3YFUckNhH8uIKGaDfNJhe4NIAZObVVkM/3QqEjW6rq6n8eRsW4+MdFKPPvK1g0PMjHx4yb+33AUtehDqzXeUxm8bF5ssCj0Qp7ozMH1AON2YUQPIDXwukgNoBqn2to9IPEp3TTXNRM65xxUShohsoSAb8MjbivCb7pvoHVPsHjCO4UC4wdmEyInZjMW+A26nTEFbGw1z+8tpwYnnoItIGeGEStmQXQAbv15kjKwHxI7stz1ASX3fZRDCkDKzR1upHiHtJXchJyR1fKPV44HuRQDwX7kLpm6GyqGxT+ri/D1DzQkGnNduQIDDNZo3t10dY8OzdrU5ByZE1IHGSMOLt3WEOxRSyGF3QGmNoHmIr5qjkbC6Sz15BLt3x577FFLCxwQQP+Mkqk8g8I4jZ3jXeR81UZHZ6Ts6HREvpsVHt7qrrs/qUDO3vllS4JxJovmvA7i/6fhXrTaa/5Snk0HlaT1hp+F5H0nnICpPrMCNhcvsNkUH4iT9QeO9pc09wS408wlTvZFVp24KSEEuEs4qRP9XVDGW0PA/PvNHBvkcYsTF61C62qO4YdItb97E6c28Vvz7CO5oo5FqJMA7Zk0tSAgs3xiFuygVa1TipyCtaAwlrFB47bp2mgu7sgTWvK918/WNIzcaHGdXrnybhRGnaq3n8tGN2HT57Tr4NZclQvsX+ktmzVIcka9huIZxcVk2okSH8U4p/GYB5tPTS0wfH//PWhqtTiJfx79XtwgUemKgAnVwmZEaTrix4DJ4kMM5KbfUbU5KmAvYma5R609O8pkof00A7atdPpL5kA6VnqL024YlYBRxlp02NDA7EAkZO68LDGBJv17hFNJxyCHuV3GdqZ2DhAAm5ohDnHAlUc0yRKf71uKtS/OpNSmtaTMTHcMf7AH2vAyhJFyj7NpLSm4u6j5AHmaP5csHjmuoDcPaoql7sWj0a0nX7ey7rgxbNUztOf9UZIBJ/5BXGh+sDJbvuieBofgizvyXJkV+BmLmy2MsyjPVzKEroOv+JWEq+H0qrlebkvWEaYrRy+wXFjzgAc7FGMOi//rp+Z2doCATqlwQDnHnmozk7V+YbFpP5YXzbl5sfo/cnnT9Vdj0Z3JSlxUxDaXhMkX28iMByXwqeTOmMI5Abk/x2i5eiMEtXLbs3TzMPtqFsuBA3EcOVgt9WGcwaXlvUMLbHnxoyxX99gxAYA83x46+qXD6+NWOxT4oag6o8fksnSSaY+Dk5mUhj5549BFSRhVaX37PV4lo8jmiKlucPugrtihPtWEtOSqNKYRgnBg82gnfR7BeyKo2qLA0x/wcBQfYWPBBCNxfl2toyn+AnnD22MIdW4mP5YvqJL/ktCmx903Us4qTXHa7Q47ZrbsAZ5tNms9kadmBW/0Pt77hJctoheNnLLuaAkvec/znXxZKlglBgI1bP693YiU8wfXVdRI11s4YgzXItfm7xW2DclfU4F3BjsaHf4YfSUZrQ8PMkIZMKZlgoXHQYuVRL0L/DFTS+Qs/JOuIZvGAKf8gXW9er5Rs+63yS7E8TrhARwkbIVSGUPHCE2u0ltUswnEJyhw4M8a9RCjZtzAb9E8oUO2ilLuw6WsZQlThOK01o9fF6mxbfs0FyYh84R/o5o4UBnV0m5FhOH/mSzEGD46xRax9WMcLTQyIuk2tIvmjcrUQHf9sokH9riDIu1L8S6vwxPertcTYhZeR2DELuRzkya/7WSF7OGEgr/GWSjTmOiHR/P+CTmPy6fVkiKCi2vUeVKGubQkaB8IJmL4uv9AU8J0dEsfi39HvZMXBN0guJy3bL0VumQJb0CkhHRvY7Lah0byrVjA5tuB1oKN0NVhg1a9HmUgLiKJi9iwdpWtm7D2FJwYWuexN5z3tY7R4B/PsKTiJnq6/b4MJu6+tND7BsxnUK74vsG/4YD+2TdZQ7ZkPOKFj/BAz27tQp3EoNXrl9+GjE+qyE1Rb9q3c+i7Q07nWVXAn3gQ9He4SJancbz9y+3ZglToCRBMzXID3AmRLGfYI4oRXValKkBfEV92lq4cXfifzDeAPG12wiVU3y7h52WPgwYvOzKYZTJAxSungYe1BZ7qJ3sPLGplaq4wQo+jv9j5igJz4bed3yElOhlAVeH5yIAwKtAHILDfwCCzUffSiYS4y0TtYfhAZGYnHOcCihKfjCUNHH+0zukSLhOtSVaG0CTwZRupNtNi1UETsVtM/BPyQt4WdLkKPH88t95XDzTOj8PP16toJXyAUHfd2bZzgkqy05Pt8RETULCZk6A8aIDFVMrISpav0nlcyjbpc1QAQ3iJDhe98y1JpyHXmAVFYPJF1bhoY6kDQO8mw8P9u+S2jLcbunRs2t5d2rV/k7IGnnzoasV9xeCaABo/tiVfGnFhN5f7yZxCjIBnzePx669DlwbbggUKvtVoGmxA9dFUIpEIieB2j//OkjLghsuD7kNCtck8d9/sCtR/g3GYYSzbL1FSYTDafyafIREhnxJucmY1wJwYUg/wHr4sECvs6lC+gnaV7AcnVTpbUfu2ByWg7Vxyevvr2338dL7BWSeT/rqt5BpbQPgs0/y0QB9iYfWznma823JgAytnYsD8RKOMI5ZUnEqcS9Ff3pX6kjLJBLNGEkjnRo7LKrQCinwWbWFbHOnaaenLLXtbsvRC5W+7WvouYHYe3M4t6IB9OWGg8vBb5P7kddxlrFb5zQ3B7Q3IJ+Fwb6jF2edRMYGLBPevho0UGPoIK64WvkOqwdcU9EkfjIyqZsF+eew562ojyIzThlqySSMxYlaSJnjVLVQrZkW33yilxz4Inu9HXh+E3Jd5G7sFwaI7+hJUbZKlVNgQgkMKgi8GID2weugM/bpdC5WSH0CqVU2OthmXkHMrSsmlO8nxJMCp5I/BVjY4oh+GrtLvyu5zmPvyekIdcjt8se/ydbguXzW2GVbrJm2CyX7un9rcfnZ6SG1oY1Ad+g8K78/iyMpsunVjCQF6CrgfQvkdn4t0UQ3HVepOaKum0S2x9Wp3+ptHwKujU86FX9CYaxNTKcca2EFOCv9rbu7pEqt2887ee4lK9496gjpy2svmK/3D+KYS5s0U2YSZ59GdxCI1e+z5QAa88yB8p6vhtLECagfnZNDSj1G8cI8rQUB1+ERaCa1Qrg6QsOU5pfDmSHFeUd050a54gtH2I8pvaJnVN2mDuufxyU5a8xNGjOw/shuFMOtMjTJOsF6hDBML5dWb7ucM0FcRr72GA/hxbkNM2qadyYVMG2q1+vytoO+Pd6GIKAdf+uvyUSsoi2lIP802UPTwZWoAizxhAl0l67Eodmy9/iWyGg4X2fLqEoBOD5paa8vfrGw3QMAm42zRZpY54E0BXtZrwwIHsEzUxUaPmqL6FuPndxzpf9rvJ/JDV3B3FqwMsLTUmn5ym24+AE4ZkgPRsB9itEoywVge3Nad08B9fWTyf1jfkO99fjAulkaAszavnwDKjn1ANGq3X52/1DwiBWRC+WUnMErhXO6Ya2/1QaBMElw1fVe0bnO4L1uFA8Vin4XdJxXjW92Ty45dtXbX92/E00Uc6DYFTZaL130fgcYMPNgCBA6Id/t8WxUXyAXRRLHfk9eRtavgeZYFKZaE1jIa1Ikl9B417JGwpXnjTLdhhVeP93KVu+LahDAB34mwqPPlKO4A8dIvaIelN0/vhb95q5SsvqqSBiEMgW+sP/J7k+bvbsKy76AkxWumMtvxyd6hWKUVO78Ji1MJkdtYZsaArdV5knMu2bSosI+jqqrWZP5UaVeaYeZ4avWR8ep7GMkQ8zjNr4BRywUxLn4pUTAsbJ467fnzlXx8q+Vo1f0UNMRA2Lk1HwUjx39cZP6K0685+60lX51SzIYevqFVYoFPWHXIGrQ4rRgaXeuSJO3GZAKRra/CVan9d17dV4gUYPnTW6gKuzn/BrirqPBPm6/7EH93n7mKCi/Nl1ntZKiW5L1xlliGIsGblOxCxQGInfqFODPR4pMftLVrQ9EoN1om8bfEydsggJDWrK5EfxbrH5pyxMU8cv+OF5o5IM71Wy8mHNO4WWIXgyRTG91R52FemtTMflOygUN6MJtVkoPe7tFgo4p2fQmjBdNxgfy/9ePROGcYcs93gvfp6u7WmLCSxH3Ba76Z9q8iJK9II2tsoKyBPkFV51zPbqAkFAtUMV/t8IQ404Ud8EbBuPusE1NLnmH226FEj0Mx4KebZz3cUXAFSpEF20ThdNmP4Ej1aLgg2IIBNTZp9OYa1FoL2Z7q+lkanvO3w7Co0e6A55x8lWQubtrag8a4gywV4oH4/dcvgcaTqn1wVMwKcbEkkTvAS7TZbg3pviMP3gsL8heiU1WJDZ0gm2WN7Yd1+houeUlQSLRxamNjRj1POI4rsSsomOdWQNkiQazZqU2YQg+nBIiKAYMq/yCz1zbDUEdTF2HeOaknLGBSja28gV+BVy5MxhbFsySC3k36S3FZAA2FH7xzv1QzWVpzCTE/QhhgRsMNkdVylIHTA1CQLCGPEtQHO8yFqkyR32bcg2vPei/67XdVV4ndd6BTB5B7mYzWEjooV3gyzEyIIZtKifRwtOL0ic5ZdRGriV8Ma3X23Uu/UcmEqse9kR72hy7CoYQhTBkjuOjaHziniEDh7hzJoveMTWZYf5vYZYubyzsFo8YvAFbLnIfhrr4+Uo3UvDi6TUhvt8kw1RTLYsLdRabQkxJsB3PzYbE3ROg4Ngx62lZhNK2WFvTq76ZLK3MzQ31HyPv9OWXG/ONmCr5b253QRdsnfotsyvP6Wh4zK+XmXqo+pVBXxpOpu50im5Vn2cjrZGtbkGYKWK6abZ2Cn1D6gdxLfhhJxpFYy7hJ4X8fGxJJTi8gYWykSq2xchs6Uf9dj+AQKHSx76YSAZMmWrcEWWq6fIC1+gAJwCX1eSTqTvDN/OvcWN1I9Ill0zwaWLbFbRCnSuIj0BnFQCchmEUjB4kIkI5m+hG2OiKEzA0LCNgS1LRIlGpDov4HuMH9GNSNlTNIb1wqtM/fwEGAeEkbzbN2xlUT19UqORuskujxENv6tzNFB0qMV9Y8YqzWJ1HJ09F1hyGsB8W2fWuptQsenYA7vg7vF8KsTNGMsshJweYD9kMUpyVvbO4ZZpjDlUg7fDqdhaehZvQScK9ivXLgi3J+g4ks5R8JQY621hTNzzk/l7Mtbhl72g6uwvpRtlzFxlIRVbPhvbcefQLFzJwpmp4E4NzTROEPLjG40yVFb8Lqepxjf6UtbsCftSrXLWM+kidLrLjWNuZBYYt/g3tOOQ9IG+4RlhTdTYenqBDgzL17W8IF2xxDJh3mvhymrmEUkyuJoBwWK84C/g0e1w/LYEJnXk0nXXyelC7Hbz1+liZ1BowA/LuJ+38DbCoT/z9QgOnBlGgitH/Cy8nFGtXpoBT841vGzsyBHplB29/bHPp4sOjCFDl32Xvt8WgaP08EBilkDzc6sXZ24JQNrBomK1fhfVPxUyj9mnadr3qyQ33BUvgYSgHhUzNZSDA1H2BUXkVUyJd6B7UQZC8Xp3/51b2YOsf+SOTXsZGgDDbpuyDOvBnXXkTJIzpqpxYLyRSJB99OTpJHNnVoL6R1S7nWsNKokdT1QsQN+NEK4qptlXQkbXtKxi2lZDSR7LUgz9Z+YIsSBqI4/cSG/ityFEdP8JSamu7CnbctjtChZwHpX5rxDf8wMNC3qjwMlwAcyaVKNCyFDIUMjIcvxGvOpiSg9SVvMdzrVE3+cd5BPyQx5e9I6GeVYYDzC92wATY/Wsu1fnLlrRY7TYENq8KpRcX0pr3DjDDtfb+LRxJhItSKLTmkFWZdg8BFTg3+qEI5UmeqJgzt6rNSJYAED2zw6448ki3titxMtIXVeOyJVccSYKOjeGXkgf0BbWlw+z06wbypRgEAqkmUS2J6CfUE/zDpmKYZHgkKb1GCYaaeXWIMJa5vz4fmKvJZukCTr3E/Mk2H7u9iQzK1MNvSrUIn2Dlt9z9FhuBjK3UkOqcKm5dNNlKeYNSUZuHKC1wt5pAV0e/ODbyb+7ZY7CvNSZtcKBOSh1jjro1Xr22GkQ/Oc37rqyBwjEoIuR0WzQdT4We6XKUFUf7reuhfYbTIQPnVf8hg38pwtISx92Q45UzV3pwlbLZlxPz/+R75gKtCd8s6B1HjIX0TYZzkeVgt9Iek5t2Bj2frf8NLt4HUbC8v2srC5E+HTlAvcKFbj6Wj56iFkFJgEInXs4MMqCgsdACAP8m+0KPp77BcaB9nHIwJAZgL+nPqVbPqNngCnVYYSrUlYnVe70tqEhsOu9Ji+brbz52NcShWia8ODntnyiFZqgzrC3bP4ZtmXxQMbp76F2aBoLVXEROnADm2WJxjhgy+FYN6s2egEdO4ByWnB3YAtn7hs80vfplwpZJL9DU9y2Abaln6SnCLwRNOUOoe2ZhLN9MhzHhMlzONVdC0jx1db5XeLNeF1/S3IXvSxOi6KWrfemWOOoCLmnm6B4QY0x5vmj7BxlP3DLV7sSJtD2tTz2kLUIjsa+26jgKCxR9ATAuUrhI2phEM7sw7SP+daLQHCFmyJ1W0iPjk0j/QRACI0nkXLEai4WsP+nfAk1pFVQAlOAAx0E/oCZ3QB24Rbvw5GBeHcu1A2+p3Q31u4P3YP8oNH2x/aXUg3Nt1HZr6fiVUAn8r3vmyKJC2jNCynGpSO0alCZk49dO776LNpqyJHCE0J56k6cz/6iQAQt1555Wj4IkYAnuYTBTLg7ZHxee6vS8YDNJ2hl8Qzoj/u9efoWV6UpYVXmyKu9Oudojrm+8pganGK1UjSSpEuUeNbwkK8iOBgh8ijQ90JcpLpWOWAA3C2MSJcKjnEeAIpM56NTaDhR1/IiT3rCZa/yZ3j6wAJ/xH8hJsIlxavo1rMvpgasIwfMs7bsVftaCgZukoc0igKu1cC2KxkdAGx9t7MMTjkp0rrr9fxXLRIfbPGSs1NSxaNYCli42mfNrrLTm4aUy7WVx6kw5TkVOgs25dmhMAHTDUb9IJfdhJxj3BU2bTrhVJqz0d65PMEpdQFgY4LjeIqXV6r0k2aK47OH8LVnpqCTGT9dCaSSk9tA6yBfrUpxgOojfoQrrn5Y+XOGjjSX8mcDkDyPlpcZF8xWOxEuB4RSVIPQv1nAKCl/XRWbstW91OReKbHcyXZvFKfXw3eU8dJNHacodUC3qtzMEsrLfJfhYKiFh2vas6OOEhYrTupPCtKOh7E30FpKZRsYVff56W7Q+07ennlPViT1ry1gy8cZHjt95V7df/Ml6DVWz8ooaNC+oHbGIz7TR3PJA9rHRl6vS97uIxM19hMlxabi7wCzQQqDyiXdAym2hRPz+XjC2FUbq91cZ72Kw/X8kdOO2wo2s+gcDdF7Wh1shuy0AtP3LKocsx/CjIwQrvprQr3HxOjtzpPEY0wCmrlGJRaQCJNIaaqBo4ZXyaLsYS+ypWBWkRt8SUp7ZZVKEhcJMP7XU3l4U9xsrqBb2gMm/l3QzhPvnOz0DOiSj0I0+QMIr0SS2GRJ2+p6o2K+bpvQ4xZ+YUG70TxBZ1YHRbGQ5qpYHCMAApm8UCyva9Lk2yhvBD4EB0Aby2Lye064JEyvrYBd/9OvNT4iQs7m5FaqJojAhLBghkH4mPXpD01vH5zfqowkFVj0HxDzAejSb/mmLBq0+FCT01h3+IiIPay0N6eF2ed3jb4MJKygdMWeK22QFj1FPSFgvrefwigGvd8iYaYFzxWz63S85PKFD4c1GuQcPMElopLqGqizqRJn/Mb8XCKdFLLg4ctuSNg46J06/cb2d4s436pK0P+nVLyWjw9do2H82pheMH+p7H/KSH9qIlahvWabpsmbzLwNYWQczNB0pJlm7K3/anGHYXaWUReW+sZca0Gb1esX5iKsYiwWyAHee0980iL6WfISw/16I9XKDQZy97sP8xrC0vAv1zVNC24ccg9lhHboXJdwBBCaHk7Jjw98QvHwnEGZx20+Zi/4GLD3af4mwfzVMTzTm+ANZrcR/j5W2dekRgnH+RaBSaldXBt8QB5faYnjvpIy22B3aJorXY8Mu+7O450ZOF1Uj7BogvqROHWDyV7GdYfhwR7q4yfCiIPEW90GHuNNFmoMjVT6XIbIQrxH0v6GPhrQVo4Jq8Sphh25TV3NQDYBQuhn+TmgavxVoWoKggnYizT1dwFuMd9djYqct9bBAQSxyM4iL5l0kxA5Nty2Xo+ZCu8L1PqzHu6FVwJykJ5PNj2NFxUiI2Jmgq1ZpzaxyogbcUbX2t5H4/m+jCJHXggWgzABBKnl3K66BM2EfVwriV1s/2S1JzzPQkMJuq76gZFtRlR+zSSNdS63im0JwNwapUiIJFgR71Ut4dn78zzdAzQNYkI4ncgjvOmSGIY/fnbJYwP9QCXfgvjDALtQk8nFRpnE+BhX0nROhX8/dV0kmuPEBHS6MnnPxFkwD9I67AJi36DRe7OkJIJx2HpPW6DLkjlUJQbr8BxtG8GzNpLs6aduWCjXD7qRYz8fOkgj5JP/IQ3ufuG6KP0GppRITavwGJ1TCsGSaV/aGV1n/q3yLFMqXu2POvYVC3/kUdNBCAOxm5np8qpZDP/tcQrcNobcdcnCBZqxPbYbp3lnKFI5YdfapYWWb1vFsDwXwdkib9DmTeBu+v8K6pu4QRgPGYxn4KpzFfwCfpg8yBxoydmz2Upy9TZ5Ammp8bRCbpZ9jGO1MVAGGuu+N6vms8LoBhunjvxFyi779kv+SBn3g0SAx5lmXXudU4VAyrG1Ye+GxZhQl1WoRXpaQEFAacV+JHjB/it0lWdAnlGRBVewK14Pe6e+XA4x0//OxI/fhJXs9XScT3tX2d+fBdeUwDOgS7g4+djRS+ZMK+zUSqXMn5cwWp0oAthgrkWgghGdhlNj7tFu/ZvDZ4Srfp7Yd3nWwNJAnJzk5mrq6ALEPf2ORmK/Sl24v0PoqLf1aNBCW/01XUA+PXFYgTCeb2plHJgXllLrNAGcdpJH04KSxBL+XkL/TgGAwinmbS2x4trUgbq9aeQiZrBv0SZn90UR0k4jKsnzD+PJuIGIy3Oocfq9FsCIBBPar8IWlYCq0jmoXNGT7YXP2pnULrzEY0NYl+MWKzEpBV/8rGDfUkQukEy3jDov9jFt3PlDiVQjp5rLLSqfdvnjDc4eaQ27CXWzbxvKgR6BuAekwgVt/mlwKROPUv4BpAPTyHsLPUWgzf6WlP3F930s0rLwaJh79GxuwXwLbkjVBpQk48W1xdNXw8/rIshH+n1wZdxaDJQ9zmfvwGCFuH39Ol3L1KB645Z9Er6ItFPklwErbM6ihSgrfCrhB7DAGk4qyH1gzkceqqbiqkgHWYtoPv+1KIf6YvNQ5Nngp29YFtjGhce2ZuY6RAmPTMVamG0dktPzz9uhHMxztnbSWxTwYISgibmXiHPHHpnDL7xOhy5b/XjlktgI8IR++Q+NcEVUy8wI+/5Q2ByHJN5oKHcUAiUXSdR2GjoreStfQ5tJ1vGcy2BJJpE10IT1U5FGHb/gMIirDu+gIzFyA49Z1QLifk1Sm7r/aG7zrQcFzwZpjgArIvUOSO0K/izS5bJWaAHPsUVKo5MDP3Zby/+qfymkjEplEbfbPeexhy8dmSQ6YEGe4F6liWLrTmjmUfoSsdLPXYtGrEvTVXdhgIWczbgNaf7A+OyGo/t5jdOws7irUS3Tq0/HCi4FWFc4YaVa+g/HD9N5dzRtMoEqkomJQLPxKGpRf1UscNNkNOO5JwVomw0yembukvxkFl31xj9j5y1N6k4aZnaLwlMSbC8c2srsuRkQKZy/ruwe45ZRIRKprlCHh0TO36aJ1ifoewxGIqJzYb+CDkb4wVkjePAx95xIls/e6RpgXuSdDQQ9pDCocC6R1oMZ5rDYmluuY8W+gRl3CGcLJIqTopZcDc/KGkObmpDi8aM3RxawKrA4NxNSd+YvnDyFtHV1Lhz4HGb1M/FPjjI7CY4zMY1RMDoYV1O7PnzP7yXAQh71a8plBp+a03fZuFJnrSxiifxzk/G4k38VWTxdNZ5uHGc4KPwrx49btP8bFsjC4g02QlgnxtxUenpL5pjV1C5NWD64MbSeVn8e8gHgbniC2sb2+d7Q10BSY1FaWfkf6/KgGuJjPx/GOTfst2JXd5DYpCF3bXDPjG4b609au2IyOaXzGmJPAoLgfs94QChoL3EuuQhr6bRcv0nsOPrC1uUiVhE+WliC0fM4a9VaBUPUlvcA0/0ccp+uoslD3L2mc62r+8dBZ8DKITh/Qo832ChlqQDdrkuY5tijVDcMJQMBTktIYqMvZE0JnrAAhYmdkjY4SPialvwUknP1T7gIBwHFIt5/OwSXe1nqfMwT7gEpahM4v13+vBh7heKDsHm54vqUpTwxQ40dh/xq2HXIAzCVUriem8YvOOejf/INFmlsnBK5WlK/SbKPTewhUFNDVV9pUWAsnT8dGnYyQEmEEbi1FbIr/JcB2X4uT0KviG/MHCvBNiJXURjT+TG8bRtdsxnkOC53Qt8u9g6S20ASZTxnX/9E8zP7wsLmlrLE5j1OH4qODk2B1Z3me65VelV/fKgVPiOTr4bLIpklZdiWtAZy5d9UVMgpp40x7j8aaEnEqJPAsETCVtLQXe/+iS8dFGDDTKEUyLSPNkT0ClMANfQ1YtkY7ENnPJkcqNyOo1eDh/Hy/4nzu1BtxBJPWuUePhsZav0ZZ6u16sR3x6y6MAg8MkX9irjmi1dX/kfGv/w4jAT8Q8q6c1g2Z3Dus2r66Jtwccs3vv3vcuAinCSl/6g+TlZbAe2zRsuKcNpOdEa9krEWXvsfGo/PPWj0yFCaU2BAwxW4QAhN8mzNPKU8Fo2rUfaoZXSpm8XlYzUhMMU53rHgghoN09akh4KvEElJ89Q/+Aj+454XdBDvC4fmmdhht7VNdT2/7PJqyY/P7fcPihBsGm32ILaJXOwTYwvL5gpkHI/SerJQiYkTe5feps0scDQN3dzeYHqVWpQcJSwiIYAodZYEOEkCMua5vYzGW2FXNLZFdF6FwTrLQQ0sL9ZoOTX6/KoNeaA3dc5+57BHzfBeigMt+3dPSTNJGqHMhMG3BXrlDpJgcllGSLw2zrQnq6RpW6KjRt/O5TJkrPK4Ol5VQAgvtfKlYsgYsyjhbKK8JqSxwaCoT+Cwd/yrlh7raZVGDNk7ECnqQbJ2j4t8qzwqzXlcP3EXnd+qJc9VJpY4Et45GHsIH96GbEiKLo3NhXbSwz+Lbji+2rl1sPzlG2kmHWr0xnVbJZz1Ojs5XRII5RnUPK+32zTrQ1yCny22YT+MIjtZekt0nfKoz2rjio+u1E0PvGdQZxRDzPIE0qYp7KgIwCFEyk3Vr81gDDcxzwCJQa2VQhzcEJIYjhz+M3eelN66nd02AaGcDviSIyTDjzL0cxFaAgvUZ8FXyy4AJbts/AYxGm25a8SzhiktTtHVlHharhQLOlO83fO3LTG7KK9bHWGUI16KJLSkd0fUzAFevZiaexw7maByIxGZuBTJGjhlUEbyFQ+5+hXA6lVKN5egCQhvB6KEy5cuFwQJRF5DuEvUN8baeg/zCDpKVSoYBxpkABJqfngU8HQpE1cM0afhnkiX5SssEH4QUYnrB/cV0WRHMM7txDsCYIZq115P3XQi1I8C77/Mo6SOgA8+qBoCvOQYC5bvWuIQ7XzwD/kKf9GoI2WniQkXKrSF9XzW7NpHB5+7ap/wTvXY6uCmBC2pJF1PSOPIv55QocghcF0bxuuQ9Xw1dwWshmJHL+kuiMKofaJRgIAVFnVC3n+xQQZ8AILFMvKFl94Uz27HXQNQdwh2teQXQo92c6PgSj61MarkRBCuauykm1CLDxGsNvxRbo5+2mRBRlLi+5a5k3MjIaNTLFWbXzKILXSPiAsHGPenYv6BHoh2oPa8D/r7gr85GgA6X3949+e7iZnN9VEjh4dyqvDn5zX7bpO8STsSAfcNSYKgcDu7fDMXnasmV9E21q9BgilTV3hoRYsOlDQnaK+l3BuYMar4tqM+kdP76l8DcgC936RS0j9NdiRkwhNgB70K91ViF+cH0N7lXuwessmjjEAZB/qh+zh/ReN63zeXJhKNI1od4oPuVYIvQ7qqCTtBZDU9uBll1Vc4FUS1TgBVKYt50rh2TeWTldyoscwWdL2nI/n48bTfXHFDmLaH5WM2jlUTaMYZn18YU7BYM7nMtbs5W9RRlMy8iJZphRDG8Hs22lIkPodlvtabj0/cQ8wCc65N5ZzHWXhjLqHETLztmXpEHuC5jUylgIhBBu7RXTLPjm/ormVWbaaNAB1Nf//l1ivaKDQc75YR5XVbDe6El77oL79q8LssPaCk3ZPGTTS+wsTCzHjOMWCrUf90U0ANJa93tMv+vX/olr+XiB3D5J9Z0l8XqjOmnvFxrch/+aS3Ja7wawB98FNCaLAQaYKh7Xqgbx+ufZA4v8CRHWA+C9i3OP4fA83DdRWYa6/V3jWakUx4h6StClGp+wKVzOZEy3Lv3UrDWtAnHwhw0fLqhX+AhilXIMMPdLEWf1osjG0Tu+OOgxgMuRcaWAG+qyv615EJQMgPTngMJ5CCOSPECK8ZPt992se2G6LL6rWEnoSJh9tViZE1c2vPnfdnnkJayf/sIPXp2zkbsYgSDvxO1suvxBGKyOkIysrlPWoWU+o7OZ5/VbH+d/ge4HN5deU2Ii/bAuAfEdRcPj5STpFH6IebEKYgTKSe/biSxfyJzDOzbpH6PBVQ/C3jam5K9kzVGeUU4nd6+bJkX9AqgfZnki1LUyH7R9RTLsHi4G2iki+WfdCiyoHjF9fvybj+xfV0IqlzalyXmm8NIckgSiUDTfG+BDq4zR6z6+R+GtZnmsFZgi6DBHe1aQ/szs8iRFbvtNcy0kgHUZE+XwxrTxwsfTK/3hXOwYptEHo0kUblU7rYkFIyawljAN0PcAi0SJicTTHxmVXM8v/HHuVkVJQql0bxtF7kjZ6ouRrtce6FNQKvZDBBB0gkgVmwlzrAjqNxYdvj60yD1lKbraDD3bIq8cNk8ErJCL5bA7WsDuQ+WmwaJAtpbZBnKHXAC/eFH5bOE0KWqMKERLIt1Fl/EcjC7WqW8+OW2v0eBpGDLplucMMYG+yMKIAbJ2mNQ5dHvTmTVgCaOKHaXMF9bfYfiXs10/HC8MJCOBRRjBbWM9Ka444CUH4aT9wYRUafIwrTIedlIPheKwVHJNMbRnVU6hx6gEf9GopT7hzFh6HGggzg4LTJvxyNZArEcjw1MbnbzjTRQb39y75WFJRnynmQr/8A+x/CSxcx/sG1k4AA8bWe8jsT2OmOn5VAYltaHDTiZ2zOXe5NapHXUkFsvMBbIhqktwX0HiM/2KvHre20a3Jvz5IIYTxqVUZtRnK+xQKES1NEUCh9cwekOC4N+94EcrJ48nhAWoyvF2Ru7Yqd0eDpbH6445vHYWt83dwSvd9gfpA9oueejMEeJjXMS8RiUoI4fYdxIOOoHV7meZ8CZCBZlr22d0gnFOwsyVdEzXxDn2EF3tEaHuY/EB7SwDb2njkvaRywwm/U9JkOM9SRJ9TwqA82Yb2aJIorrQP2Sd+ovq/g4nM2BWF2VMsOEV104GNCE5VT2b4vmXS7TDPnYDlvQliYNAY10FtzCZKyz+wpy0qIBD1lNMhrzlBAUmHVs8NudYPsId6Chk86fG4tNa9AnNmFF5CWDkIJANthDcLt0TLW0Nuu9yFbvItloVOzGR/vO7VGoDhVU6MHcoIU0NBpobkHF5lSzp0sWS2zCLwMme016KNKLQ1cl75oVUlXyl2ZS9yg9SL41h2hz5MSGNtCz8Y3mv5wqjD5zMcEf/A5wgqJco78d09Zdw+32kregNsAgbTi1GcaUXuqhpiqiKwA1a3bWlWivp6teT8OdLJSp6dtJaHlzOW715I128eTGW3HhH/vR3Tts4Q0h71OIxW9h18LkRtt9AKnq3YH1S1Fnug91P8Nzyq2wX81lSFcqzeKad6xkissm8nT4QCttKjFpS/p5tQLfYA1rihLzeFesZt1pdDuRr8VbAYQmR1af36NQ7AQPqt246J0zSC8a18wYYZLTsJbDj/dD4tV74Y8St7h9P2uQTzjmA6xMXSXPBjaX2YZsK8YfciB0nmnTWFbeHJXTHRFT2GPiCocduue73+BqMsvdHikpa/T8SU8hTbEqwz/SQqT3YI8PomL+H8DroG3TvcjQ0UV+kWvlR/TpPXaUos4S1pRlXHHLNTYGKLKgZBQGPKY3lvVprs2GKEDi/VBhPIOzt3nKv9JeoMO+5gCvWAaEQdURV4eF6RSyXgTbIJG9A7by5/vRGbZy15Lvlx9WbWxBwWdxa65bP2lL0xLqgCaC/3niklNdSK0tz8PD3oK+TZRJqL+mud8XXaOuA4GCvLDFlY8SAcX5DQkFhzM87sc/s0Mg4MYAVxmrQJj050WGAK6RkNVPB17mH9LU3S7vCHoscyGqHg9uw1fEjpzW771MKqkS8ZIbiCkU8VqBXhPcmnqUTBiV9K+bG65u4L0x44epeTMsNvn/nKNBgvlVpmrhuHXHw3dPHMNlQm2KtBZHavXivZ0c8JiVTYx/m+izEmieln//xhRWJXp9iMfSe287n8J9hLouCygq81B0eJx33oLaFMfPvaZjMmm+mITkOkACMauuP8IIKFBppZ6n+NdX5yALr29j3aLsmV/qCFRwGsepEcNIV42txwSp+JBFUcgIw38+NuQGSJUYwor2QqxLr+FM1i5/ygaByZ8xu+KbIvA6bgriqQkXWkh6ZLsbAGzijZNDz5sSv9ee+5KSjWW4Mv3YAKWfFnRfUfhSmjRRjiERQWRAzu51ofwTv6xJ/9abYZ36pRqESzEoXpSzHia5XxDu2MNnyw3dT3DP3EaMChMKgEKY8sqwGAC5kQ7fen8bxySbq6W0hkaHlv05H4VFuEbzaRNhafX7D6wuAHoVOAuLGXpukoMMMJtPfRCOB4wYm1bmCty/YBvarn4i8Rl7g0xlvryWxoPyCC3Bf0XlqWmWrbZYJhFJx5yzcccjeO5qiZatyXxOkuney9D4Qfqv5o02L472FSNAVI5gzekTEy/ZigzqZBZmUGgtkVrhV2iRnKZGnTKFikISajzVuuoBIen32k/Fx10ASsgwt2H299DdVf7wHvHynA+dC3bbWJ0j8Y334YVrE9KPrwqYOwUhw3qos46S46oD3Q0i2Z+Hj1LNeJJJN66iK0N5QcHBwoGrud8gvFpmF8v5ln2ixU1L1ovXm4kqtPcf8vQuMgIIz21tERLvmPBydjDB78p3Y08OYMXGFSC8DsUpoCIhQ503DS45XHggnMiOzXPlKwW0n5TpIO5NIgO3+txAb2xIJJl7pX5nPeNjrudpM3bKkC8R5KKmzodiWdy+kaBNu3iFF1FMyEAarG9ZbP0/dYSkJVim4ZS9vN+AabfDju3ieKnxp1xNQnBjwoqGgwKIJkcafl3umGr4eRkOGXh+n3EO5SCvwPip5Ms1Gp7pw3URxyViLvR+JaxHcVVPTSV8CDzXyIwX8FzF7I0EuTZXQRiEkDqLC7F+C1xs5qocIw/pfbJaofinRUmcMcww/CB5oPWoEyjQUyBR9XMQoNBC6lWBt0RmmaslP5MZGF5z7t/jh2gR3yjxxsKn+iBCchk2M9scE06G+YrZroGe+zIyBaDcK0hUHjpgCvgj7Kf+qz6qt3p4nWrJ3V6vImwvyE5c+3NPfxywHwtf+oJS1BD1K7wIluVwlfK9Tn21wEDetEbhviTaQvy0+p9Qks+do4/WX4uRRKVGFQK6urjyUpWxJqgax1c7W10rl97ngW8DH/rVzJg3uTyQdiIONwF8WBjlgLlsOWBYuHlUtM/iItvq2uQUjPy1q6URSYifToJkkyxrSwEwOFSgj+gnvQ2g3jH4yEWX/uZzRvDOKTJ3Tr1malEiMSzufeOuc62RMOenr9INoj5SG8qWR1s8raxpbp9O0D9n2n6vHmxC3cCf1FhNq+JrCvWKjEr6DbpT98iD7l0WMDkO91ughMSMIEGN+jB9i14TeXldtatIjFafImHk6IWPmlIvaL++TIahKKcTsk7tE5liz8qmst95cQ0+Y+uQF00NQRyFi7AFxyuhuwOR5PqCOlpxRjG2iuvSjrVRbFMl75NBfZvU5cf3gNh0J3TNuEiNkdms4CyYAhKYCuGir9UcofmreIndrySddB0VEgmmfE+3h8lT4PzDw1Nc1my6TIhHtSQ4fG58GB+gaOtaBmKZxqYqtDEw16bCKC6pizdcUWwarlgxoZyqDfMby4J2HnyTLM5nYD+EbY1T6VfPz+Ma8RnOZt1eSOjqCUXnMZBQlj9m1VAGscet3DBgfZgTNwVHySC0arNp7TkBKrdylwFMDABUrLkuswFGROdleEkE1aFS+wF0Biir4kK2xsFn/jnaIQ5cyw0RWaX5h/km7VvnYmeQqm2Kuor6Ei84H1DLIIXfyO9sh/6uSSyD1KZd0KOACu+H5KecBfUm+/cUCn0YGSxX5I+znSYxrLlMhDryrQ3pNRFgqeo1RVdr6yknnJSsqWj/dnNaeIwaXR7Zc5gsaV/xAXJRhFlRZcSK73g2qhs2yfX53OAEZDFSxprmrTkZcTNF0nT9uJ+IwM4iXJ0BRfxGOheMSwL8lTb1kWCGZg73WnV6zqJBlHtVwAn7P/9cBrhxsxJZrix3KzuJJ2dwNcRtPnvOTeVokYQ6TLizllLPtoQi/ZeewhnvMS8Vul4MlNywVdNP0gDmsefKmUFMwxqwhZi+UAfnudutOVFHccH9WQ9/l8Hb71KHUP7fbqlxLm1C6cg9wFa8brHqlkEJCFzTIQ6Uw0YCjkH+OhbCdiSMLWBEK2ZQSz5FyIYx/inWWFbuRkwuRmPu3mVQddy4Dek+6NaImxKNwATuCu7uRGiWHbhFJfQV/TVMralwakXd/T5WbBxc1EL3ulOk5ja0kxA3fS8Qin6y+WOaTdm2YUesgwfVX6d+d7Ym83K8BBulBZHsvWGq9XzjydZuYcKUpCr2Rsmn/YKB71k6vB3RLtyX/MWzoCnuTzETGjWSieghLLSg+dMTOnR61/gSM1KyVIfg7B+yx80gBnbreE6yAkKEnmRIc2E6Y7fxMczNK9qzvJbSI5E5smkQFPewHBOCJdCIT8qORIrnRscZO3cWGRtIOfNs+aB4nHTj2wmBbzbsPi39uLFD80wA2hYBmntLZniyXVpwslr3Xb0/IhXFYcuFdcd0VxDNk7Zp/Zq5P1Vl50/CFKkoUIwcWRt1SAH9uHFtAz+ozYIrEBKw83hk1Sky1csWK4bYUKm8MIrby33TktoGH5cH7ovMIHpxdKRi4eH03ahrJYfrOO38ojqDdD/PNFQCBqhN5LF/1w8dGMOETRjujZrWua113vMbrwiTIqU8wnckWjmMWeuRcLuqrTSSv8mVm6pRXUUM+0t68xRiUtQE1eXepEs6KnVflpBrzorytYnIgacidSVOHIfsXt08G0xwOS0RON2f5FYNm6+jFQ98NSE4uU9+12CwLLJIwQU+X87d2xk3I+hH6NwnGss316lF8e/t0+fDqh/sjm9exxqwTaYgCsZejfNC+FaAmJG+3crwI2nFJkxa7/KTXCRuVwXp2N8yyzs9QncFAFmXBIOnFO8OMaSAomVaF7qE2M5KHDXMwKXouzH1hCkLfZutKiDsqpcbBKs3rikCG3eW41cKiqOkVjKmKwwFAUFDWNZMQErHivqHZV0B1gqxlVEOzZPP9++sLqRoKX+8yH9T5w6IpKz0HoL6Azbs6muybDDhv0u3FfPKqtPNwvVdtA4hBENcfPMNNiayil70Ol0EaVjCf0il0ejpl3MUgZ+IVZaFZM7C8HO0SRPyIAl9K4Z26xKzHb8o7hP09XQD3gKshtfr+zH+n83TWRUHBqlqW1tMGk22GNXae3auoWRRVBVxHFMtMOG9F0pu/poMPNabmL2/BjfI7xTzja5WFsNyXTRILF3nsfE26n5LA2ZFkixijKeJu301sqAvqk/3dOb3wCdQ7nFGmR3YmLFJXSeT5wG1BNAHxoFldMKyjGLwyy4vzanfjk1PclEDH1rrpp/SnsXch84sO4rVf2y2x+ybSS7FtbxFSrpLQBSRzQ6Jc0AmDayr+YNpSpYA/0w7iZlptEMPn6y0uk0Xnjt9buWE8o9hMAOqpVxKPV3UJXbUNzsy9XzSJ6BxCP5Vr+77GbIsVMPMiWd3Z8xhlc3T1302JFDI86B/HbcYSM6SoDrYkjBXT1nZMp7Y27p7UHOWwNX8HK1guX45EViwOhT2YUDad5IthWazEsq+sVjvs8t+PkqnyB76DLbhSGWJeBnWooiir/JtrDF254WCwuNharG1zdfenUgq2TaB0A6YqIzHADxMeqoYOTNVc21teFicJohKnQE1Cpd4vfpO9osMqlJzl3LvR5goXJH/e3VqFqlFxFE6bjKmt09tshId+Y6DRxtT8kjbO5aAouACIBYFRaWsdh8D40J7pDH0Hc28rF4VJ+nzspGyg5X4vNp0T+26nAvjyu3sEuwQDK4XHSwsNZpoXZt4YNdUGxQ8XvUh3bkax+dOtl65MeR9kl0FCkN1UNT0dHyv9bkmhwkB1s5Vi55YpzvyJ9CB7CkbFgR3FcJ06y7qNwuNR/Vzl7KjinqCTGNPxzswRxLLCOsQG/oaBtyQeMRl86agomd7pxw1M0kxO9aQwKv14QO/ptwvzzsFETHdy6Q5RibHnPp2qxWfgwYsOUzl5UlYmiQH5d5xWMuYY1aYFQBYqOWuBztF4X+ME68sGX1vL7y2Fleld2pFUvoj1ugxNn8Y4QtTyNpcNjbMxDVl/sXVTEsrVV2smvlemRd7MT/dUa3KoG89Sj2rNKv56NO88SdEzf3vCcuZzFpGVxIm/iHq+gDMKZYgXeEwJpYy5xAKyiZe7GtZoTkpU7w663ZVIzgH4HK7m+RB2sFz/SpvTiWJSKUMTA2oPlnf33NDF+HrKl65uA6wcXj8vvAN3JVOYtjE+baqsXXN4omkUx1G34SPtXktWAvny4k+2iIa6IXEdmea+3Z1Ar0Cw2DKCU9s7OP4doQWIqynqr2FqbrtNvVjYCZ2kAbObLfej8bb8EggZmmVcV6N92FWm4AUKaGD0P2YR5RmoYJg60R8FKjjL88abr1B+dpW03FhFFkvO1DgGy0WHbWFObgQ/4GYxpMEn2RQxgTQLoPhbCxHqgl02WRjrcGGsewUadCHLpAmC2f8cQLJE1VB86c7fdOiPKj6ca6k1mpfJcNWJr7WjIf2ft+5wKBsG23337e9sZb2Tyu0Wd8dD0WW2NVICVAbZZKbkE0JbQyVgx0TfISsL9I2qS5xfCIDk7hTdKKKKXowOLd/X4WDJTpCviCM0tQZ3BkVIqL2j6yAlOsZdo/lMpmMRKTio0fprv/+Jaep3Hucvr/JLedG7zP+bTDdVcRhxQpPan63St3Exm9Zm15HrNex8vbqW4xYzP+wnA/aT6xJoiLJWZL6Bf0Xr0K2yfaXmTnnPaTKD0DlEoHxXuDmGgDgUah28t0apE8KJtvxxXqFJKgCWosTUPS1C0BqRmQew2U/Y9wUv5hX6jPLd0jcUxwcb3cwxVuYrTPBgowiZIB8j1f6BVQfQEKxZ28tc/8NqUUTyjI7oPBnLrq/knRRfbRTYUpdG1374wmdcVBdqWV1XGJwlsWGFKvwSlWCw0zyQqxi3Bgu2+6e4I4CoZevyH2vuAXjbTPIG2bCQSV/I9aMxK9qomrcTh6ExrsMCAI/BzllXCkMs22NyhLqGVFxQBGTmxhynKbNZ7wYUBz9ttuCPC1YTjxgR/rvZAT81lIbo5WI+LiZfbwWwXlIiLJ7h62dteRMojmk6kJUrckRFYasuZq8trz18id4S2208LhXvzY+nplyp6odgO+S3drOpjo2G+zGrvcWLQ3qqOcZq/AcHdhSMMH4RS2COP1ehEk3gWfXYICE7gA9WtJpEQV+1mOHjIJmOPq07OQQ2a5yEBt9eh6Nypbm1pm/oNebkkF9APmZcNEIDc3KI+qnhRQN3c+hoYHYeqW2vtQJ4dHZe+k16cJ9l/lIezuGbQMyeYf6svlGYDC1gnqRw97rWuwc4ZCHi8JK39GvdcMEwGMO3Lz4GDFgVqYyn2vmJMBvwMDmgVLdjgxmx7kaWCkkcaOPMYDtN4sJSJVzoBznWnqs/z7FTZmQvijXNZikyLtWMdWRTIKigDTs/PJ0u7Crg+tOMV7XwWXhM0MdtSsEKnqXjq8TTpeqZgMhTxX9AXAmonj8WyYd6gJmtF2x/yCOKNN7UVH5/vAjvrYWL8ADm/gmAjc+QbpHYnJ9ayG+976bKY9n9POXQzcGDIWWQ/roj5aHSs8wZ8Pv8Q29CHLEJ/Z09YsBAy1BwuPfnGUcX7ry8NfhoxEvWX+oM+EfvTDWHmvnBUa7S+H0CKiQDkmMNOxqk/5q3S+Qt5PnT/xAbU7kDxoI1AlxpR6otLK2FRKxryJJqTdRnoPBHFnpg62SpJr1RvLxKwfl7AsDBwIxGw1x0BRdOZ72/H5p4bwqrEMTSbHD/s98UwJotxhUBn5hv54WVJnlu2xJOqjHE3tiHioZIH0r/yPxpMZL8sd1s6jLb6SBE9jBlRtYrMOPMXhKtdO6kbrxojuICinrUEUWv1TpPfM5RT220FZzTs+aAAqUNX5qCFc2N8E/e0TJ+RxeCsvOwX9U09sSRbnqAz6gfoYoLkDwEQ0RNZGFktKa6r1TdfSY91sWR3cxvp7LtmAs/XG19i8u0AHFO5i6fc03Dti1RSHUdzXJfIiWi4cxEXCZMZBa6wbv+WzudjZ3zXewSqN6s1iB4MbsaJ8osZR0DsC5860papM6GBydxzQusPAcuMWIFpRpDwNauZ59KAG/ulZ5PpEMYq67g5hgtM4BTp5Jlr3xIc2S/GXkgjB8Ia9aSBsroGqhrBt2el5sRS4pcFnpvfEvH5Jj+8BnFdh4Ofn6haxtRUzWuYxhuoeNYG0w7qedhCz5WoLUoVmEQORa92FKr+cq3lImQa9n7Sa4MopXj1pby7+uTwRftUnsXArtXvuF60TlsSeDy4YSAX26Pj0JxDlJkbeeBValmrJUBlcaUf38soQOTl/rXCYnG1fAJZ79geI6CbkB+4m08J5s1ObBC6Zm97RdZc85kQQ3HdNWlSoyoKHpZv5JZ6TBVJI7tYPfFF/B7tkDFQSVR1On4/1QeBOn8SMx4NLZpzb73kSfrNsgSRtReq+IziMNZLW10pSGixcoHpBX4YJ5xZKZ6TCdoOCwslYT6cryVlEqsQZtmMmG7Jl7HYlNnq5gV9adt5Xyw57fMmyJenW4PADhWum4GWcYeHW1bt0uVqY4iipnbC9yO/TEiMfQKdY6YSu7MhXwx8LCxAg77WwrroHlqgPcXIneaBNTrhBgs8ZN1/e0Ssbv2z+p4o9mgj2EFBJl9Fo9nK5Kq5B8BxUA9EOY99fQjGMJvWWKk4vUmBV+UmmJuLg+eAGk4IE72DnWpf06jIPE0e0oiKQcHYSy64h7seX5QI1GkmLXbuVZ/RKQFd+IM/fk32DDlVdxrbA70kMIT+RUXu/XQtSZPmYKhpui2P0vZ/z2agbMoBkkSSwRu/4hhByF748pWv8+6DkeCPz5rltuMjcaCQI4fJVo6jLuBtc5nrGhlTf9lww4XjlY3h+HqalIubaoeMf7TOnN8vz9qtVDujEwG3Fzo3YJ7uMDYGfRwwuEk9UW0PqZdWv0da0mSQ5K7Dw8lHqNGnWGLy6Vs9BT1tJHDjIy5kz0fYHlTwQ95h4lhTmUImqFmwtJWLdsKE246XV4SSHxQ9bWi58uIt/j9seubKHH2hI0N6/0WRW/SrylI0K9WCDXiqsUcfaiaL/dUMLiMmryiO6m5PQ9/wp5JBn9wBvam0om+3UnqGXk7uW/xcM/5xlFoMoq+FB8Xy4TCrrt/a9290pkmxGuLXqYAn7vMJ2uXNZrku/YrXf8b0i/1u15Y6phYFKihso6hYzXhDupN0l1eDRNPZkZcnsSQJmb+Q/JPBKEp8X3bwjE3nqtTB9KRQUbgdqwaIgufZwRIOgMmXH29boGkdFYai/UHIojx+kPLJV8bpp9zU8kG72w/P4Qa7iS8k8sNPhdn1htS4WZF73XTnNeRkn1/zayjq0M4WFDy6bFcyC6XC1qAqwJxTCbXWV+6jRndly2jqRF59K52qhEMv5jgZoOE5ffXZ3NY0xrdl5lVSFwu6P3+rZfskSgaMoDTFwRcY6S2eZJC9Fs2RhFzUyEDEqtMO0hgiHMAW+SGsyzdHNGTTDPnAtz15bhhd7yw73x/B31lUOhCnXU8yIdf74I3sxkQBU5KiSd/szUB4Wp0WvNKVYd+No7uoRkMbDxHKdXWIfaGw81lBLcdLfxSi9L6dtT9pDNriiD/hHqkHCBUu4vXmtKB+BVnoAm8lmmvMHvlXo7CHRpBM4Dh1N1N08PeLoZypZl4/rI2H5GvdoCheY8Ih9aGUrqs4hBDVs5zOWEMyYLGHqozTjj0oikzy2HUwyCyCDJxjzauGDKVp+yC6RAbv9b2QHjaDK/JbrYdrnrPNMcQL5neDcPArYeRRUC5Bq93+KpefSODVvtXmp2rwKb202VXvG1+ihWHXWmEdgzs9AZ87sjndiaIkfhKMAaRXqkW7yjJ2RpfQVMVeWKQbEuzwBKeZW7WlfbrMRwzOa/PisNBSB7AYuxka5A367n7+J2QcJB5F1zCEi4dWuw5oZdc218E2bUvH3VyrYi2RT1xF2djOwk+qO5Q7Y04gknPs9JuVnrGX+0whGqHcPKwvptecgKco+O4k6pir6M7l2sEGKiqznSIDm9vf5Gp3XMyywpI/Kd8hnQ1qNIVLUcGBZKQ5Q2bFwhKplt8EYdpF721X4vxP9L6HJcuXgoaKYKwRVXYU1ciJMDg7FgoLe2/5c/Fy/OP65ZBbmwopYv88TOPMCRSkvkmFePb07qV+zw34BEkw4QOwQ0nE0u1ppw6ULjs8jpnzPj70KSnvolT78xfGwKWu8IwQLKPer2IHsc1h0t/6Zab9MuvX7Qx80iv6DITc7Z2FsZ4pqKjHako48sihZmcdv8e/9TSmilGpxhS/eUoEX+ZuWCGTR4jMiZdyRF9KHA4UQVbsXH3M+d5C7Kuo9g7WCglCXQRn2wSMvWjYDlWhYVULxSi35EPW9QYiFX5gnN8B+ira8r85ef3+Om1hbjHcMmVpQ4EABda6FoQfTxbpEJPWQfWjwgL5f1msTVSoEef9PKUK3EQMnu0yvxR4y89Q/hmoNWQQIgpc7uHaGHcblUFuTV6xjbQH3ldCt/LEppK8ETeSjsSQuf3NHtqcJqfZTgAL60Ijeyk0vWBy2u1b1YyVa9J657OuT7qYoPOrh9jbdqvd0hicpEwNOXqPFdFPyeV7XpIT2bdSBif5Cbm5SsznPcIk8ajiH+ntG1r5coQVLWSZ8RUPutR++l1NCfZXXrRaV+t9Hc1kPMkhhR2B6uttHlJZ10ZRuOAnRM/kkHsT8EyT93kNuD/1PUGWar1og22oID1ozAooNpDtC57CPgSXGXmkiJTTlvw9W5UwVhaqUzxozo4zb5AfXLdpJhMUMPSZUYOPP7z9mcwKB7SdFroZ3mk045J7YAPZLeDJDfzlOdK6P47fBaeghBx7Je7mpkjjvG6sjuhOgydclQqKTr7gI0Ccnach69HSh292K29uTyRlNR7VOeBAEjjoobHtgF9z5beeAQY909Woe0VjENEk+XK4mXY1SW6Aur+zh3hpChuPd7PGruBoOHGSnXJKDEqkDuOh9ENtspk43u7/UlGCz7ZiIogABSm0g2hjC1RJz+NlF+WI352zzIudFhhuRrZbAcHvABbAHVs+Rtjlamo4FrOoWmQfaBQD63XOmFEshrP/W7yBidPsUtv5rozKC9+YqwHggetji+lbfkAhRFNXjMIG1awBIjSiqXnfk6xSZCibBQqUs+WvaWbYYsiGQl+sPt2rXjAat4Q8LbcpZ3IsF625TdhXnF4PhmZol5VF+9hMFqZzTsyziL2SJPLTQutf3txUTjihixHUt/RIPTeBZEQBxgIJQ67keVgy54FImRuZxCTZEU4NaL5CAzYlnGMw/KtRMOpmRiUmpKUqJ6smaATmbzCEvQlgTbm4x4q+kfp5ZjIBSclEMmionvb1HMQhUoNnozMcCGzmhSVMvGFe0ivNIDwNG2iXO1xhfs/av2QINTuDD4xqCek5yzIGfq7UgpDdOClr0c40HcF44XrDk7kw2k8nlCsTkoJlNRmzSuY56fvwHdihh8IBIPKzlgQPNGuWywTRsi/ILcOAGQeUS87V+HtrQeLti7rmDGYj7ZivBnnwKQyskw756xSVv84bjlWZIarYnzcaG0TV3BMDgXBOpJoLiqZsxsj523HQsWT8LabgYdPi07wBElN0vz4G6/0YYYjUWco2JFB+uJXvOLDQ5BE+oamvVxjBeUvZDJWBqCXvKofCktOyXCWM/yfXz9nZNfFCDkSVyHaBBW9S+u9+gUBkWphqvfhHf3dU3z6cVHxz2F3JRi1byIrMPMCGKDw7B9kKhsWHK2cMiLA2EvYcH1TMn4ikuGv23qFO0EgHdWEvBQJ9+IvfZNb3wD5VqrQjvIOyjN8P7MVqfESK4rQHRj+25XO2NLsvfwyLF/n77ym1F4Q7SFVkNKPEi+hOUnFA4MCZ4Dreu/wz9GBX53yCSAmCw0JLde2FgzW8FnF11eOM2aQFYAK3RCQJGnJbGYwaSdDV0C3vO5qODSUMetLcNk6Xq2WDes1wd6OPO+yCPvmFRBWqMiy1YMVpSmz0Zuv931qqMZtVOktsF0/nFvthfRH2eATlxH0+ePQcg3TadoZN0F9ReJTke+KXj1jyIDoqyRPfQw1oI4bWzp7eIlDDzM/O43GBieJUUyyypzbfUw1ZZ851IaoZSlmnRdu+ORnYTvYutAlx3a/YHemHjfxG3UBHhT3ahAvoxCPOT2fb99WvlBJa3iiX9ORedefJHUHFEMBwmSqkvpsrm4knArV744N/UjVxQswxEgdt9Upjbavio2wA+8EIjTlGI96zR+VkIrTaOVBKzISZ2XvlFgg15kA8ynRa2lu0F4sdLaU2ym5SHME8wdj3raIjGiRR51Sic9r/HPN7rn73sEGpr7eOguc/5jnqzn3DMHO7cT1RIqDPpY7Jb6aie78X2Gh7rLVelFRWslfl2Lzp0XSQzT86Q7wEEDfuPmRQZ3gF8srudUYqfcANlHcM45b+X6RFCn+I8PBfOXPjRxJxKoTA5unsIGyNNvt2N68kRm4pwSLrNGAoekkuTXVoL+uRcx4rS2R97m2PiwleEeFLouK4jos1ILF8cl1+6jXjnrxlBKu4EPeIC+qxTbPxykt4+tfCaIaGo0X/8xN625yhcuLQwa065Nc71JmgNDIKucSHBWiSd3nvGSVzf2Q5VgsAfKKPqrqNYas9f6+oj39NQULTbmo7s1/dgTCvCojokRrEhBvtHMtgDu3BQ8q87JuNJY/NG4flX9w5eAK+HZmmxxX9V+ahDIPu5aig0ImKOa+Xz8lTv5XqWg3+eRvL2rAGc5n/nWCXbvh/h1W7lVfBiz87P9SFvm8lJM0V0V9jyMUlHLRbK6d1aToVzxDsSCqktlDKxR265WPgopALfbDtQsZkxW6QAd09cNpgm4WEuxzX6rBsQVxmZBUsGqA3BU0vqApSWksUxiDyowxrXJhdPMBTBMNLOJBTaM14EsTi+5ZDSvD63iThxsuMUB0/1QcLkDp7Gf/eZLGa6htNC6pM2Xr4PTYwKh4/TcLExgQ5ptOxNNWkKXDdWLM+cxoMSP2q3xi3zqTLDvldAQVgxHZTyr05EPpB/xgyk40PU8Q7w2ubahXDZoC3IY4LW9QpKK1e7WvmM3lN+EYzURY2p8I0IKc7ii7wG3QngabPQ7zAvKbIcwRMy4Lq+QM0ijS67CbB+Q6Y9WzLd/TsMRqlpWcmj9VTpMD21OR0lMoEH7MYv7MyCfrJMt/SpXajPo7j7MQyTa73OGoIsvvq3lPEceAI5o4nMGVY8ovD/ifdkK0z8QU0knoYP1EfWWbev2IXQ7yG/zBlUEGSKbCapFHnReFJ333EE0eIXmzTr2tWpPKXS+u3fmk1rbTQpa6NGOcHyX9SNOcTQ2y30DpQDyAt0Duo+K1B271aKlHJc07zWMV25XOptcQzEI2sUPUbp1MGODNnDw37xyXXv2zg3OoUh4j3k/yqrlFrhMCCC42FqvL3p7mCj+QdDoGHFma3fwyp8yBT29MCOF/i4fXz4t4/gGMsyNBN80MOzGGZl7eNsWfZnR4lh2B1FCHWD4ao8DGlC8RMvtdLAuCRwa2voEu8yzgkakAvxbMQ6jneExxDqhkL+NPFNAtxcQRJ1bcRk4WRhvA3vo0ywbGP7NszlUB+Dy0/0ph+VQJwG0pnxsLKIYpIpupHPXHgREEhCXVqH0dONT0P8eMA+aLY9911IVHGg4PwfAV413l4e/CAQ8SxysEj6z0fENdXHr2yNJpI3ez2OPfiATHChQQk1OPJmZIX4LivsLrKhVcYlmcuy+S0lqWs0VYYGbjENZ3FqyFJchdq4JVEtOR9gPM6X5RGi9xTtMYUqZJoSTxtooXQGHT3GON5TwNYA1y4FxNbWS9s+OFEPoX/60Ci3O6kMR5DaMYuUEbpyKzPfpV/WHQAxWBN0JQJFOpmpX7ZGYJacP/rXDenw+lW+wugXsKQ/abBtIdvMsilvrJzs3Be25OsIiuk8IYNQJxmhRrkdLyMdt8ZasPHQacwXqtS3TqlQt7VZPVvkywlJJoasDS5Jmb/D2ny9kL/qb0XB6jQ5dbBQEFteIykZ9u0eZbdn59ld5p8n40tkaE9u+iGoi9xIsF2lhonlGNU55nXRuNsDpubiO64Di0AZfAJEfq/piRKQ6Q8dLllgd8rbWjugYmHxQIC9cM4C2O8E2h8l9JuZT52N2XWIhUcbzp00Nrt1qc0BGK20TNAbjAhkw0EaGYdK7Nr0qQWlNzHNf6YQnS3GMUOIOZhXw9x+FiuE4jTFTCsLGwfBHoayGe2k7ZDd3OorVIscAaEuRtmj6vmZJgMvWFpnfBcs4+URPvEBPmMP8lJ2O85eNzlxJjK10gax4jVaJw1aKwt9V4gSW2mChJ+x5J7sbvKrM72H9/FVAzZ5UJ3teHG5/M52Fltv1rdhZJGohxo4o7xL5YCQ60Okhalo8BOGlb/3Ld3fU3fLit5CUkE1+7OUftpXtxNUcsJCz/iivwGh1cINngqRx0Ji/UT1MLP25SEl6hHBh9jLQ1Eh2bAgXqABc3E0HZNmApI2vflJx/QLQ5KiZztRRNq7MRSgSPtiM4bFfTQjkSCMKQrcHqhYixEuh/jYwMlXYIKHKhShwNXMo+HH4s8GThy0is9uVG+G9vuPwQfp7B0iJ1tFP+UEh3jifxScvTbuxzxVjESR9kTlP3LZq3nDVRX9tCThoXD19Fyy9sodwJhRXAM/DLEjKRJKcjVw86wslPTmWz8HWwFF/hDnzYScJHCRMsII4NHQobviiNX6Q6luR/rRVWUE0/MtopFtjqGSZEGxE6SmsXBqpEqKfO5X6JnanocUQEbzJ+q+EOeg0vsGOSi0oO/21zf5z/jivFJUURyEXMIQ0XZNC/pMHYf3WMUzNqx4IAPnNamwCv84YxfWYp54fASDbnvAydqOGEE0D8BdOaUUsFKhJ6t4s/jcNODUjNPre7WbjtRZQOog6NiJaL+T0xRrjjNOIXQ0JtqVfiAL1rwnCcCsWuMT8rprt8jsTbU0kUPk5CxJoJifVXnfIrQ3pU+7KIxl6n5XmnWVCCkn8ZtM4wKVTgJPmlNHJlGt86hi/i44pW3T5naq+PngGyT3BObZo3WTtPJzZxtDDCCrQNpGgyj8rW9aQRfwTyIy8roK6yQMgmyqJKlJRvglTY0fkUnJ41cQe+gSJo1TVbmWOs2+ixD4PNup+FXzxPGM90i2+q+/Tk7NcL+lpKRj4FXzgkbxoXO/bq9R19OSCbIVxKKJUjOipF/wfHJc9q7lCUDmtjuwuBegVYMJg+QbftoEWr870MRPGTcAcc9dOFqOf1UfXS6ISuk0KdB8ePM4AJrm4sRXcbA7yRDJGFUtrVqqyAUcjIWe7OcB/tKcPYzN3XLBylQx7zTazy2VpdnwZDUiKzTTU23Dbaa+qOzsRG0k526XR7jFurISnFGLDt2qB8lIzNvUtKRdUgIumdGGSUJFE5FWH7bNrMx7j9yZz5BKc56M/OdO3tUbmrfWhIN6owN4fQEjfdE5hAFCCuvZZYi4SyU6haL62r5Puer2iz0MHd3VuiMLstKXA9Sa5U4aeNDF18iEffuBxWRIGqjgOx0cEULHp7ANAMqFz38YxlKp140iN4IUf7V/+mCf0h+fzyEHkuZVD0llM0KBe1cH2TS4aWeRIjmjNlreLJOdKaASQ1wl+2upg9Wsc8XZx8QvFD7wqxZ6N7Xjkc/A5lvExCUYOA811RiRAHmbcldk0EyRnwTdKf6/Ta0FVeQrobe5S8miScCTxm8zRiCzRVG/OnSchPTpU8SvgCnm4XpEFjKQeGVGRtCKe6ac9rYmTUHjEtGObod9tvMowXTvGaik1pw6EPyCB+ujYFV8LdIiIsxnB+qEkiH8lrGilNw7pZu/ayVYtLCVAQxSIkVz+Q0EEO5QpdOuSq2NSxAgwZiIYenl/LzYOWAsxmGPQfu8hCgPu+Ry7Z1HcILIKsN0NU8p0kHfXxR7EVd8HB+tLfcskEvhGfj5o8+9tIcDE7AE1KUU7kr1LDSJjEzb6KMAbm9jHPWt+V727aJKDwhCCyOYhtK3t2tK/R8xo93ovbkqg0En5aTB7UmyVoYpqa9V7gUMpZC2hxsny4gXeWBV9AalbYnummCAK9jOJxdr2E+4VJAmh9yacm/Drqo0k5PwMMdD5yvtWNj311A4r3yrLopY93SClQ20dsh7iiNMFuTkWth02+TAH8KgREmdPzzra3BRG4hN/0znLmDKzkNP/BqrG7cy+H5b0yIaPE5iiUWbeMKqvOw24Oz49/PEPhvuQaeYxboSeUK/iqEqdX9qnq2c4w+Ioq7vqy7lUiUtDq7hBMXwruOZzZziyAtO7K75KXeGoUSoGp2SRYCm5ALvoKtuvM2WETrg7f3G/OOVwl33l8yhaY7HgDe7WZ0BvOVKgBZj65xexBKgHgmq0FfBD6nCt2okg5Vgeqf7jkqk6kFN6J+VYUuTNyymEIkoVFgXIjqeF0JuNsFEzkjh3k2CIudJgia7f7C3HMfQA4ZYUecue6vN1Gdu/wPtv+4H76JamTVxklRQCs5mFcZdmfNvgob/1AFN5NpDWV568tVdKSk24z/HOLUbdVB5XxaYAlGyI3BPMiVUNwhUm+YeZewRUCc/HxinECbTNQMiArSM1EWnfGkXNhLvGAdvu7ESf4CM15XmWe4sH57ikWZX+XEn6dDuzGgIfirhaXNv6c2zOOImdAqCNtehxnp+b9iZ0ijZ2Rypu9vhSqlSRHyYHcEvmuhbdQT6Z15Gvp0T02tZ12VhKBzLDGwwl6vkS6+StZqfifzLxsPnur9slwJvMPaamRbhRZliJ2FL94ylkDYXQNG6vES7nz9wFPIwc2aIGb5P5xz8N8cbGAMOjUefqzfFPPVJu6/n3pkr8FZ52uPz7r+ZDWBaVViC9CjHlz9pd/nfrb8cDfRLC90JSck1RMMCMf3Oa+OndzPhZjMciRanrcIQd75jGefGZSG8hCP/7EG4g4tFiIYuPCg78Sz0+pXhHiqQdEcVKWOiOwf9zfz2bo12euxWmziFWQAyrn6V42EceIuF+UjK936MBIXg0+kKm09+unOjpzy0pAll0EvFwUvTOUA7KXk8oDcbWabq5gp8hFM0KxQ/6ShQwT83VgCI55RzKxFxbvhjHdf3T9PGqPXtI0dkxLA+sRWlaCjAvjQ/RrT3Q0ogdBHeN5Kimmv4X7UkPfXkGC6GjcX1EjypQbLc/9O6iYqogMa/orNG+bgnXZSMI/FdC/+rSTjtOTBoaq6tHXaDwwMtLNzMunqTvgbF/ZYcukleMYFCwW/BS7ixGsyCsjWUiBPFq1si9a4rnBR274BWPJ0srgs0I4tV+h25/ZB0eFy2Ym+vzD8171eVf4zCDALVRkcFi6MBztExSE2PUnEm2vlwgccrcorF3Afl+N1LUhi5efF7re0OUGrO66fmo9/0QFV9dre9i/mw6F1KSN/wVLtJAUR8blU/lQT5Is8dVNmNHEIwCYPRg+naASmMu8CX9axcwGK/Zba+b1yQftbljfwd6lU+v5zQ+W9jfRKmySShjll1sofACiJ1TpQhOTIcNV11nghhML+R5KsqONy+0gA8THh+NJx9KR7uNX2H4kidITEUcJ0P1en9z/gBCBp2xJGvrt/K6oeuIYMuvE3NYQcKb4IW3UVd28Mfwx+ddl5aZm3gB9J1GI7cuvkUS6gCsoQEgwH2JnpxEff0ldqw7IReCofQoDPqze9NDNgvmV3vQKVq3PCPhZn9v3wQFcvVGKOwFM444QHsDt7dHSGi78Zh5zCTwMW6mBTzvphuzOxnS1rGTxc8fcAseo2noxfzH2amlzUY7rH6S5/OO2/QYYvFJ0wSQG70V8IWkRoP6/9w9DPOjYAjnSHmsN6iqeJ7ffkliXdvA06DQQme+y+OK3w3QHpOZlLyprtmNLOw9gQO/b01aLv5R4zXGsDaWL2Ol4Osevj+679Fnc50N274fUzvgryHwa+uyxSpsKBYwACiPK/6Ta1MJ+RcURCpQJQVesfhxxbEdL/PFu8yLbATT88asrZPh9agmP7YGbkJlP2jWMyuyQwA3hw1BxZxNa6Ty6N3BM8doG2ODFtfvq2m1bAPYPr+O1tADQftWwdKMNKUOFlRjrpB0z5RGrCFSbJ9eDhqpqCbz9hTWTOBgt6bTLJHJWVOngJYNP5GG61sOQU9MEFz1yv8Xlk5bPG+DT/cNsvmJLlRCMZa8JYGRauTxhC4rn6GHOk4FrQ2aIswcnCYEBCn232hE10VPSVromJX4jv6g1lQ+Px7CjYP1wflW2PlcwqEm1e9exBg9HFjhenQCkjTF4DgKmSk38xMuCkGdu5g8n0SdRRZpSP98Y1rMy9V4CMgnZsp1qY7LLAFB20BZjq0jfdANxns68gNLkof6g1hCJT7lFprEXikGakRwYTT7nV6rfJZLhwPNl8btU5sIEw8TO2dWKcJ1dGTtbBeY1CccBIkuwl650dIvpLueujGZEH2DVNuDVSgDqbpdAoIi7nB7zdLV2+SuJmfusiPIe+V34qNQzod5FcKF530jJ+MqtfmmOsvprnrYWMPsKy0g7kMdVZweSQnrSK/7v9s/NdY+JJfrcPog9O7bb8vuoFck4QNScIwBEJkq5cRDscfe6v/8j+v9guFLiNAc25oG7j1mDOMQidqv2TIYiM9FrFcubcz9khX73ULC+6S2mhGPPam5ZipKYZqqomN8iE79rZ/PuNZWIoxTxUxlkdYMA8faQ9T2ICb6zy4VF5o6acNwhd8SsCIY2MMhnCCmsboFpwVzcKCtGClzPAMxUnuPKegEZ08K7ieiD4mJ4P0nisB4YupYDcYLOO1yghGaArz9SQPEGux13OT15c3W1sdi10RLWJPnBCD+r0ZUw8b6oi6ig3l+LyDAJ21sv5SjBSPMqwz8rDgdWOGaDWUdOAdqinUUyGQIO0+1ZWisDkE9kyDxdDoo87dgJD2myXpjStgADrQV0BSVZJyWKbsSyV04/99oP9ACrDoS9d95vFBbVqS0nl1SfoeJFL4Tv6Hy2gIrNSzuH9BxRRhwA98msUYHCoURsT0TXuPgvGhwhzJrDJIgY+7thxPpbaqTg+pSAzDfozgV/vI7kxsX7S5qSnlpSm1/7f4KULSjuOlwTfyw/IxxXGOs9sqbcVtoLIKKFB8tA8UxZZe9NY5AwtGaz+nKmZV2FOiKNFHn/cyMwivyj4wr7Xf44wr45nuqgm7CNM+3+UBzMhp6hfVZM4wv4skdR9LCg3l/8a6EqndhuOn1nTlSMQUFA1UJtwdZdo8kUtLSwpyhCwU5LKDGwRJbUS/DL0Fncr9xcOxVTjO+/hEeSAUJfGYB1y+9i17W+W7LUzj3RRL1isjxDCluO9rnze1aEne2TLmPVgU8NgU5XnF3Ki/2g9gZGv78t1gv+Qp/Hcdj+nzGCSj81RR4Cgh9sIgkr/EyfccIV/HpzpI8Obp/CpTFJlbqF+Hj5FAOQ5d/0g5D7oP7EFV9r9kW1jr4lQEReq5L2Z1NS4/7NUjL6NjWB+aqw1Y8ruiMAhBVSSR/5hGvlWmXtPE4/FRJcIZ+0IqPkWtkF3pMLL61TKARySyXi3OlHsztbG+1gJ0I5tCgXZWIzvERyKAxk1IFSxpk4hlrYiFDUrsB284fOYYpTQNHPT6Xij5mnQkf0WJQnkaIQa99/r6tQ+GI1I7QdRcW3n7zD8CgBnVWOzkR+PmKxL7QI4PlQZ/G/iLHRVpkr2B29I6p1QZImbC9YRPsRRVWdmsXZ2qB9jPLFt2Lj9A1chQOXqhWOZWP1sNcLtApiNkscnRlgkn9Sktf06eOAh1Tf3UYlSN+Be3Etq1zUfu4LfRToCOmWz6QKSfIL9RYpawOGCM/tIjaFcSmlwmtzMpGt7U3Cb8YZLxspHKN+gejsY7jWQ5ztR77ZvaGMmSaGB33h/ft6Y9UF969tk1QbtvKZZUzUUVWHNHJXT0i31n3E1Ut3pqTRs2mKZRDhgK8uKWotY6SCKorUW3GtEl/60dwpz9v/pDAGVzqkjHz/liIjnZt3CEJwoJb8mF+j7h+IA9m+A3sqku+fLAhZNiaZ26xjMM/G200heXWIbfEtQXpSBFeafveprZJbGJzmFhNMUdPHict8X/nuDgt1rmNC73QfxFF8WJD1uIaNGlEZ8I69zfK+LvRmASjqgH4nqKatyfG6ad83v1BaEWrc4TdyQ4BlzitD7XuIMFgXxDUJL7RoAzA9lT4u1Fno1iQrJh4AzJVuQ9b5yJuFEbIOzVDvHFJdqS2Ru/QyavF5uIsYb/nTeXxczDNf5VjWsPjYDUfFsyDD5qNCeFLtqj+DIdpDYKvFvAmrzC8eO6inNGottljJg/00uUZwRrlkIp5awV7tscOdlCQGUnJBJczkD/LE05Wz7yKHP3xZHH3LBC/gM0qO1UgrGyrMt8TaUs2o74bNyyn8us20FpdEI//MA+kH3bIntl0dd9yPDdTheGr65gVXG+fLcMWChkwc9y+EV3JMk9iQMeBWMyDbqnM9YbhcCQfFcDhO9jx8g4QPpBzlDHgxypNJcrJsXBMfvjvxn8geqe6PqSQyoMHb2yk8y7cooiWxZmwCwV4QC52ubIHJMS8UkfHnY1+iVVv3cURV3/QzJ/TB9UMpKjtah58rBJSJrPxyXve3jBq6P4DMsOdGH29UpPYr7WQ4KRUu4+cNpSYRUH/i8/U724oaGMhlk0bHo9VmytajiZJ3AwrWuoOArP7NBhACleH72IPA+eUh5dJTNiajcoxE1f8y3oYgKTvmXnd7+0x+vluqGxFyGdSTM2I1KXwaOMTW2tFrsYhhDe0W0B82bVNDNYEsUjsmLEOm9R+zgUiHXR+wOhnEnWh81j+GjUrW8G8+5Zy5kBoDUOLyNTxrpUJXJnwuZgeE7VRLJxwz26h2F5l8bwlx0F0wgH+MIoOJoFKKilfaosXOrQhHhMRYXjKsUqln9UlqyYmnnaBKn+eye/GIiUxtWiNNNxLR2zgwo6dZ2EB7cQhiab+HKUoXxMZdRUOWdfAUD1I0oSvkg+6y6RIi3kNq2ljJ8j+UtvpeDoztl8yLRbk39bLcsLYrNF1vj+/1zMroKsv7D2bR8gCxZksf15bF6O8gixTV0I1KAJwTohapK6G9uMFeZI+uSXyixhj93CEYfSudn1d3ESBDRXiHaW24DAYQxfaTCbLUuM1vFmt05E8jXS7KWFljVdiNaUedqk1gcewkbIiLOtkIi78pibU6fITiPgFwbAGN8pFvDF8ufKYdNSXVR2/HEEBDTsYdgVNbmdodxrhkmHCWDwd1gElGuJbVL4GQQ7lfD8NiCijScO8XCNz2yvbw2HXIO0LafT/Qdy0eoZIZWRuzFWGG2jQQbegMQwsqYezoF/I/RMdVK3zTqJLr17FCb5ME2ELBspRmndq261f3qqA65svAB0aNZJGny57pGbuu6NkALm/FDs6czeGFB2fL7fN9GP1q9sxsveX167oAo470g4vG61rMzctgQRqDh0wBVA8IiNg37feJkOxyO3VL7JZW5PE5BgK0GEwTGKck8yY5CkaJPR1E41I2G3eDVSZkAxOf5czAQe2FYnuNtB22F0jaX+fQB1Sf3q7TE2IKJ7kFhTdRzbzUfvOtG7vR0rmGEWzpx/UtyE1ZMZ1RY83b7l7ixbvVeeTA7PulzvszhZ9ADtgYtjwNRldLpyn6VzFVv/gZ1G1bNinoGHXGmS3eKBydtVd3QyTr8Wh7HdyNlFAbgyzGAGyfar/3pS+VPHqtxCJ0SEXKDwcqMn8Zqs/yvRNI0u42ujlQNLoQjB0lRW+ISPFvaeMCn34sfu3ewlCg13VkI+IKLJ+/R9erEC0aCWVymLQthm21PVZddFNvI6Ft8il1P6aAZsEZGOv8PNmjNArwr+Y6uaMW04+ArDkNhskIXTUWCPQaA5xWSQUm3g6naaEZ5MYuUrRHjPEk0u4dzqbWvSQDvbaJDcR813TWzhvxjTiqFBSuFXcO60udnH/7+rX9GNKGVKCerqn5fP305t8SWMAjvKflkDsBgha6lbZiE8SdH1v43zrZ91YeL+yI8aB6+Nuc7k+G6DKu2zxtKzY43EX+L48h/1bzfKzhozEACi2D+X24if5D5b5dTvm11pRc9xzQDt1Dn4nirHzNU4U4CuwCrqw+P+M+ivNACofKSdgumlFk1JyMTZTSZHThYDkGg3GzrjbSx8M02J5KlBQrMdVlz8UdUIWkN8OThOGXAJPgTLNxgA4gMLJnqqmRrxUUy2PA1xi8wVRydnbmxqiV41scFdaxlfJZupxvYedbQdmSPSjDIeOBa7YRXgAaQScs76M7pzh0pfcQ3tn7clFahU2k0wlBxzXzT7R4IwQYINSJc0Wd+oJBRtwwXx9ujFIhH+cL0gYc0rYWIB9vAGCGUuiUAJVSLoi3d6HpuYnxCmkEqNth7hzV1o3xq6FSyCFJeTRP2PwXCMApcnaN60sYlpbce/lnUPAJSwYnHH/4xmqHWLJlcyzVSkFP+CP3/GXGXaK3H4oQtbRjKAXBrysLv7xJEshp5BHzOz50G30N+O75U9+82uMpVhMUVVU0wakDpFHKEwBjQJK4FZ/EnKkD4HHeQezTBuaSKqTrXmBKqWzeDV9DO0tEYbr8N0hLlU4thq7moWfGPV6wVKHIsMSGNgLQWtqaZveYnGliLQHnARf5oX/1HS1YVqJ1Sig4LcqlINsC5Sh5cyD3tMLIfdqfWz/geCfBh+tyGRwoh5iAm+3ZSl8AycFGR6m64HLijyscxzAoFxB7utbWXi9xgCo7C/DnVNjHSb3xQ0quQet0PeN6p10sXFR0+3pfgelrmgh4XbrU38pSlGkhTGB3uh8Tps3UlZaPKkzze6ZD8LQQAUeg6L+KpQdum1eJAm1mjAPieZgG80h6EVluREB6fEH4mXSoQ1dIUtdsrWtwoY0qXTBtsKxkAbQsUi1YWGIxG+EGc97n/AtdVS9KhSIoSdY3VrE6eXMEI7rqPKWynBOpAK8aEtCDmN6aB7A8suvkndNxKaFioHJLrc75i1pAvToIVwvov6/k+Ikcnx3ATzn1W/wqK6QsAaMuvvcoGD9KlaoVZyRxSSSyt6Xkzxuf38l4Vj3UE//AWajcbK+P11LRvS2/SfZdtWFj4OM1WmIDsgEAyytotsNcri3fcEiJDiBx1fVZVP5CKCKVMonq85tzMPgVCNb3B5dfqybAUeTJdCa2/pRLo8mXrB/lozWXN9E1KaPq9qTpTjUoRatLjOnLFhHtPAdVFzoDIwAIN9p1HlV1zM0hpIvzpeWU0quYLYkf7nUoXi3yvB7XNERpEpCgK4VOvmeihp5u9PSE3EVeFNdmrhsEZ2ND+HNbW+ZHpl4DARR4JPmhxumoMYzBG9zYqj9w4EjMYydU6jT3mJGzXctT53o6B/RolG+MXvcjxuZa+i4Gy6jS09QOWsbF6MmuhtAIKE3Eydwr7M7zg1AvVdKT1Un0rZ41x7b+lc7AFzzB45oyw6/SRFM4LsI5yEFVcKRjBMTEtYJvREv8YRRi8dOY+ty7SSZlDd47e+oTOU7fR20+Q7mZrY+qRXS4vbxbnkIM97l8G25WPCFzv7hqydPl5hgY6iUOZuLU47IUrD9viohjJAjhyATfRKhJl56plkIKxo6paE1vlZjQ0w4DNIxKfAV1jQvzKXV51gS/qV9hmc+scAtn+b+lGalccH8a3+1SGQ9/FsndreLxm/2TpkBJgiptFi0YLITuOedTkn9Sg3mp2lRrbqzgk3eNMhL7f4Vo/k1+5S6mmq+ldsAhuOSDGDjXX4JRzvQ32oT7N0kxGbixAEDo6qO/Zf56cG4plAyEaWQ1lPh4JP77oFfxJH8zMROwVMGGmhlzqosdzWIxMpG2zCLrdDa2+KBFWx4qYEVdwUtAwd6B4cqp65o8TB45+wozIloYFh/miSJFWtvTUi+90nz/3qeJEmDkmaJN1QOm4MGYHDQKM+HENJM253iCoQoW1QDJVldLMXmlGAzKtMX5w56XkhzcDvz4B+WiDNZi0mJ2ZIr+DKmV+Cu0kKO81wduACgf83/Uojas0XjOFTanH4inBlayUgegqFWSq2xMYBmHVeC5W6IStYgN5o7U+JyQFNywwm+ihz8JD1oJlyfSlesWtkYuV6h8uiwuXf7Gj4I3m+aMs6vAfihAKmYpAQf6CvRK2G7VVKLg9lpkvWsqTQoAFWLDxUd1ufsBSCu3yVtdkngq9nSvNvsd3T7E+hQAs3SMSMraZGJbt2/7XmPXfTUOxgMbMNKuBLGHJU4uJ50OTWKwfn0A2kRxUbVjleSsEgn2AEmHggDxtOsioO/nIk/1A9WupSUQejL6KBliGg79wt7ZZwkAspaM6Vi9eA7kCaDznWGSj+4wLV8gejgtcgUY584EICkal5ry/sNymUQ93Ho/0eICeIV7vNDLGDdyipxRUdeDXqBVay2DjVXM4VInN+rYTzSgSzcIx9yi2KzAC4g7BQnFzTZIfCSXUvddV/H3w8e7wtu93h01AKjOEcPT87CDfd6CLvEmhuAoYDViJWhk04XL6K13NqVLrgHJ/fo1WMiGbw6V3bzNsgE0d1HTtGtvUhYMAMQ5GwjGgEJLehFBDYFUbkJJQp6i8LKsNvehQqv4KUboVpuAjf1NDA5h5eLq/HUJz0pPbKSKFvx4a/Vnk/Ypzd1akieNdT2sdZT5WoJ0v6NZsM1a5CgNzPUn2BrrLIiqZPwQ+UuKz6Y5H3Ra4M8Qjl3t/dka0PDo+vTcmOC8a2oMq//PA2lSRcBmVWXnf31hQ5VJfi5vdt4HFzl9KQZ0f6LjOY6TOzqZX6fYVyWRR/6C/GyidQtbXTmABs7wIcMlD9UaFnWx3MZPS86MqmfgUWkTSyPXwIFDYJNL6eMZxbyH3OJbnsnaqS028RLZWPn8pattUe+0btVHRem9tCU+6nRCopZ9JEHS+uvb6c/sGQKUAlso13S+XCBZEX3nHe2HaLRODSgNxSJACLuZ7PA/Tq5gyIeoRREEUd1PmHj9vMEE2Js2Drbewj6oq3uOqveWcJG1JHchejRgStXPPPS0BZ8NfmnVVMLZtnb/GnY3AV134wgu76lLaBf4UArnNCftdR43TdxnaaNhR6f7j5MbxGWd8EsSLoNXUUo+8USsqaoHeTBojzRiM0Ql8q61XQwQwX8lTett6TJB8rY6dEmstZDW5KmaA+T+/2mFMZhMmtzPJ9AmeMdd2PqROmqWklTFuf8VUtRKtR07OmN02jogS5PUsP6vv4vJ7a/GODnh1gj4TwBC8QcRctTbwbVW+RNSguloOjKQ/y5FHJCBcY+InpZaduUXTBcbm4NBdRxSlm6cOta/IzKvmu8UZ08GueO3K0/sRwrzUAzqTr85HjVmgXXzNk/shpM8FXiHP8MjIkO0X+XoFHj+/u5v7Uh5ODpcRSgI/JmTIHWxlEbC4woiZHHpeHqrZZv8GoWscQGH8w333iOEjPOFWgXgwdQDTjT4caKsBxBiCz1CxIdPlUaIl5SNAl+l1KdcYb9+6vXLO8Pm3tVY2cTlOoueGUTy52tzNObtMhz3hYzxQPDjkbq4ly2KCk5K+evS7huar7gtBjoWR3wAHmTEa1uzfCopTi0W7dhw1/atP4StXk3UUd9bxlZPiWNm2IMFcLi4M/pSXKEllPvbLZI3uFhZLBVEEHv+OvrsDNNPFFC7sMW0maTa6c9ysA+2ceezoPAupIx9NSK1fMeTJuhRfVUnd8FEQ0z5OHtFRswIkaWq01l/rQqg7/CRlreGFPnA1CDKeOOMXFjeJcraKyV9qyerQaAkA9YoGpj+hXlVVoWDif/XmLaVWnQMT2kTH7whf6+wjJWDSkHRxxyorGXUiGfBrV3OoYy0X+20n2yVlsmcTFpiu8Vg1Z8p0t7cZnpWTBYWluHFR0hlyCEuWbJn+Yyg9ckicKHtRKlYfuyl9K6FtUFJmPa89pFWQNuO5gc0kXS6yX5ZliQ7A1f0ToTjGycq7ZGa8VNQQg9Q6P5FRebuMEe7OGFlLmPhvBzD6Rd3XVu8fXchpA8/bCmmmgSJQftRqc42bkuTa9G7STETY4uAl1vk9B0Mo344UIA1T4gDMqnGvZiuBsWaoR+RTJZxwSm1xdKikNy8UaBSz8+TjkXMjhT6S+pMHNHFcTPtAQ6eTHcwr9UM1dg0BVpJWervm79FgSqMDOIbG9eIhtxguyHMs8TJzJu7QQzjq4JVnkVxLKknWjochtNHsivedb9e1qtnAip7qGy0B5UVBN/bnsmxwS4ZLhXwdWbmM3Y89pHWcyIAk+qw61PKBBgikKyQLJqXoNw2EogrxUMxr87nC1PBLquyOA4l3cIfUnkhB1yBHEKBs7G6d/nMAFMSJbqyxPG1vHBJP01AzVzHXbPFvKF9alLbriwUOAoH4790KkFh2UqXIGlxnM1OaGCinCU002vjCIVSuzfjNkCyCsCKjLRj5p33+1RIv3gwFF0UAbIlLm5XEu2fQ/XU7xBKMLZRT4IZefmGDiLmOyg9jaX1DV7zHTdKuRWNLGRXh+2diK+516/AR6zSp6rxI6sUEkREpFgFcagqjLO54mW1XpoXuKgg4nK2oBNuKA50koru1Qe+P9iHT0VSYuzAyhnMgsbHyNDpUDLGSMnssevlacGYGSukZHMnjlzsStpd5+SrSzHZaKUuhWV5AhQ8O6Pdu2tm8MMPsXmdOa2hsGNFw5b5EyLfeKKrsuhJKFg38w4nQxNnBOsb8NzCm52sf+e9cVOXAt9LoaPu+DF/AUl4AwLurKJVJt//wVAH375JTerHiCzWflKiEZ6niW8sKOqMhSR9ZSFRvdjKbQoaiRi9rrpXjalcyIfp9YPFMq5xfHD/vAEGPznbXbbj4pfXfjSD8nSQfw+UVzuUCFb9yz9k0czKnM7oGbH2MtBDVGF6bFUiuPg8akh2hd3aZal2Lg5Z8VY/yYOdJmQRwrkcLVj6bZ+HRnsVTKh4YY/KC0EdUQME9J9MRLBMdR9b/JPrxoRn67oHGscdTyl/4qwTptQomxazviIRuLJSaeO527E0cOXFTuuBiBgrkvcUIfMcURGEB1+v9SbHAG3epmhjQrb6LLdUloPkKfDpp/jE+IVN/fhdDYg78WTsRVi5Bi+kL7KFzN572JAu4OOVl0I4bL8Gx4j3isTb0KpJLQdc3fNpvmHsnp/Nnah2w9e9avVqp8z7fnFtGcdwN3Ffj/tt8thsVxveZtB8tEu3d6TOUlnW8CWc0xdRHyXEycFbDiUXjUPolTKeFPCpo5ArvlhIFqxPpUH882U71Ay9qWy3swGyg8iVXgEVHbZoxZ1/WBgWlpe1VOGAC9ewZ6h26lxDB6yNBuo9FYmkUYotFMsnLCu5k2re9Xz6NYl5K5iqrxT6DuyAbLOcM+IEs8AsGSM4YR+HXYxqgYu+6ve8RKSgtm+8bsQqqncIxz1FEc+AJTmosN4zls6Ul4oPVwzYLKoXN2Bybnervwnb5TSYMx2EMVHCCYnLz7JJSm4QOG/oxqNzutczMj2qWqPFVUsAbz6zHiMIpzfqDv/xNayfCz3ViUUbngfeXBKo7eC2pOALQSfALWSIwJ2VBIS18wh1AyDfvmID/5QswGeROrZCbSvR1UwL98YwclKkj0U8dcGY2vaFhP2AqN1u5wxax5ePG3xSZrQw1y4FAE2DkG3jv16IlkLu++UeNGHo7iS8nXw0aqQyPqiBQJS45mSI7NaBh81ELyBVZCNoJZ+LT76NJi8o2pJCSOumG93pFbY9+zzUAhdSVTOg37MIbh9DorTi2Imw0K5yZQVSOOmQmg567TKadAMxjGbl/Vziz4BzDi3zDTyFRrdX2M5dMHEGz1ZlJRDPEeAoZSprL+QrYT5lyJNqWMyHimEZJHXwZvH1EezgjsiUCp831d0uJm5uMpM2m2oMh2SfSLSJpGKgpnrr2XiciTYuOFmn6QTYRTEfEKD5yGRI/aJhx4GT+z8uOLzn7TEzYFNgtUTI6E4TZz2IndyXMK5lWsbfUPyhnrOlTPiuu+ZfTcxL9TZ5tMDiNuTZIvvTEt7WaKEzpN4vIr6joG8JpAh2KMwOeKyznvN98aFbjO/yAeoXeqN5zpQNlFUbFFnvF1l5FRLCzesAmsTYOgOi6tEg+uMRLxfwWnw2vkujkneaVfh6gmPvI0P/AdEEk1S5RLscDSRdoAaK1ZB1tmnrjDzN4jEDlmpbh17jNnn405fR5bdyiGkkauS4UCiE/qD6TNc0zZA9gY2zrWadh4OasfC6O4njxpdww32mw+DaQNnJoxIz0UxDZmYEqxCOeqf+h9t1W2+3SCkHCLWWsqgMs4q/Unw/Mqh86aGQwpYYNBDAQdEpU9LHJOoqQUxUdEohgQ3Hx9VcpCOL287uTPdUABoRgvGyq0i+N9DhyDGaR97CEjxPxbOLevjeNJuU3EMoy0BmqHv+CCqEI3gMA7/SPExToSeFcLKrAi8YROXD6rC1trI9Y9tXNDwzs0pxF8vi1r3cjzKCIOl7F/TzA2Jnlrpa8Yw0L0DGoCzHUJl51R6Wo1wmIzNhISB1bCSG66Po/O/LrvdLkjE62toDaVm/cgK7NZzNFMEOQel4PXAKaHPD3gryFHDJc4RXIQrdvzYwHzSLRI3YhONv0tTcAh9oqFR+ABtE54VlV4hkN77N4rhqvLkDPs/RVcCU+mvHZJYZe8bn+IOWWbuUmrulDx4nOr5WFSgGljKLnwxpdqVO5I+2aXGS0mqwsqhFVNnqkOx2Vz2GnrYUgEdRPMoNJkFllbSRTZZ1DpEPp/N35/n8ox7W6RTTOlGhL8brhSnbBsrFYQt0yoZYsQdEX5jmjB7u83QOCQNMF7VpX+wMKNxrTIQa8tz26Sn8Vus1CPQjQGC1tTDCYUXqY2uUWA9foL29QGj4/RWm5gAN4LBSplumy7y0Ar6TVQUfvaFMH63EitfIY8DJrhY04fTD1YBuNtSvgWz7hX6iyWKx5AYIC9q8a2ttNRG93kkTXvvRU4qLa47zGFdnT+a70Hs5O5YffIIcB6fW6ErwL7tVOu7jvwwrIbrEMMjMMZRkDcQCYNsDt937Ml+hmL05nE8YAIG5jMd1UxkvGXmZEZ2+++6j/1I74hmMdKifZiKAz4EkXZnYYly4wHnZMnwo2AEVWJTIL9kQ3xo+XlDFc4A9DR8NGiCZdswZv6iQ+MJKmGm8WF1j4WtJzBKDCwwQDujTRj3dLb9wHb/v82kx+ziimsgqY1zh2ByUp4oi1t61yoEhhmhG9iGMOMNbApk0jro97bGrrKMyBCxJR7sW05swniKAwYVFnYb5O9patlOQ+lmcLKXsdTVzbMYEsrsIiQwgNPVUqC6rZAWBUpgEWfY4LZFJGPZ3jPjT4a04GWaEZljofoPP5ARGH6N03Fww8WU7NxpBcLMefLTGS+oX+Ln9pcGuFVOOFpsZZIY71WL8CDDqn2Ud33KpcTnZXOCuAdf5vfh7soNMEVKUApyZGEDrrQQZLfjRJwZVL117rEfmOWUeinJ/F/yDK/nw5nCDJgHyIfIwlbL20DTutG+iXbCBIhjpI1vh8BHeMbg2h0PTPk/V/RAWUuDQoEXXKfFQ5LaoQKLv2CcanE2E6y2HTm+JIY8H8lfqMQwR5cToXyaV+UpXCk4rVT6JLXsQ1uomgOu5ruoQnLrxwI3VY8YLQ+QwqQvBAPktX0izmDNBwPxKVus9lccDn4pJk4h3H3wTcpduElnShXobqOfJnjrc24qERmCHWsU9kUkCypj4DwWyIicxUa6Z7ZLAgU8PZuzi28ye9qws+n3ZfDFUCWwqKmJ1OYCcQ4VRk+d8GOCeFpW8CHVl64UVW6cN+QIA4MSxnd4jUy7pk8kk3YUtTKauw+RqUBvyyho2Gq+/CgOiJ5shjeFBMZ8V7NaHe+supy4MqAFhy1qMubKiJlCDa0rtwrOWer1NC7R79LGbDiE7crDTHtkUc9VkuQMiBdI11DasAq4Icz9/RM1Y+kXGGRuscmyxQ+CAl3R9Y4kdSuBvcDGpk2DWsgLrnDIEmQlGG9uQFB6chMSAQfpI0HmyrmdX2DXAHnTd51Zv2QzWI+LnoYsl3n1u1zGYbBIrLpmb8ibIQ/mgomCvLWQjjFMP5+ehOded2NyJ9BBZeZpgKPliw0vV83KvKjbOvtcIegVRdAgiyuuLVwLckqyRaRhqskaA3BG58RRffSnm6adClz8YW3/pDlVPsWkxfqaCCk2vO36TUpKgIr1d7++MMknsri3yTBHzom4H7oH9AGN29zKI6gXz2AHOpHo6zHtyddQlQREfqxke2vrJTOK0atig3cquWaE/zv+f4qzJOkzAruWcoJbpukk9EGnZ4jjPCfx5jwFzip7loj47jmLBWmTJ7+p4lfmdhsz0zJou3k3jdNSuScgfQvlqxbcTBF3mw8iygUUi/l4lcbMn4+PMdh92lMDL0FuKO1xyYMy1ckT9iqwYd/JXsBydVd2nhJJE60CzgvY5iVAqVSubbRjmjRsxxXNxyzCZfQiL4hAT9JgFAVNzEFMBD6Wh+oR6AKpVxKLTeI8lf33fOKcR/a30cEz09EEz/mky/RTQ/Gzkaz+ZUzajWq2rEJwtts01u/+uzxkAgjXlAgbOy6eXrfSlMQk1LtXSysbdrQVV4jwtVOxiNJd4J6LrefbnfxZtqjhdieOoaRmJsAubteygtqQfTcNp96byobuJ06HHFNbDmRI+gaiwegLXGeLbgQuO+piHVVZnCJfkXsqX/A+J07dWntSMIU0FLVLlLpOW/eSJ6iifzXykhHUu3GNuT+65Vsh9B/I0aJz/SyPqFafhqot8b51wFu0jsx8xqaiTbFzToqMVePGEiE+NI+GSp5UQnC7l3s9Ln7M11T4x/aYxn210xivQ0IMJRq0Ww1Pa8rkMWaBXuOKeHgNESoG+FHlO4GnOeMB4rWuF81lpkxVY8qVE526bhCgQZHpC6/ad4dwDDiAqm6jDkU6e7SZpz6tIPr4s+qzBsT4vAGcK1SOk6cjNPbFhtqlYvVaxEl16XgiJ+Mg8gE5bDPlEEwQxIHpcrEOZ8wJi42Ck/oCI7miU/mXBpssBoawG7V5jRgBVeB+kNTHasWBm5zs4n18BJI69W7Jz2shmoye0nZNY6spozhfhAycLEImFHfoLgeWGgH6SmGaKHPn4LAuCGUC172AZtOdXyENJuOvzXvqlFr5eUiXBOD0MjNC2mTTnZwIZug/5Ugg0aL9VPVOzlHjaynWyFCVJAeKIFM6E9ZMOlM7KI2eplmaR+8bWeoJPiLRaVHoeuIaKCDiIaIQNlWOKn8brtvsLAe6zerMdhmXiLs/VMInn4Vq4e2kbSgxMV70Hmsdz/4Wb1ziZv8mIyAiI5/1fNlT2kruw3s4arcUsjEOs60OubCen+JDTVivOLc3ffcomZ2yQlzBBbjyO13ZvRWpVK6pebnRCz1A+STG1P2c4ItVQaUkhxpWPBwLcF5iiBGKVYZS/w6x3gWDN+j1ZSoJJewID49/utiDsww/m8vxLnf+LV2LA06iO4BnmLvawR2X+VUiBfBAEFzW35BTAk+b7B0a3FQ6kdo9JKWi7mp1UPh62qx7sBBQBvB/sJ+Sbx13I18/gkMIdm/0yWCehnZ2hfCwckJW08qbApJJYuodl+PJqBDQ8TZJUwukD5kg4YxaBCi3ITASRgHRdiOmz+8o6Te4PS0s0jDUM6TtehGL+WBH9FL9ikd7gGQzZSip/YE9hCQ9hMkBigmdi9RaUYkXELk5A9UaMM6tp8ScSEpv0+3aHzuJRkhFf5r1xZGJLHdP4odMpFclUuiQ+oOvGGG17CaE3wh5utTs9xC7dr3sqncNEWXzTDmloCK4dDmYgkwabEq0jnhAjTtl1hX3oPcSbkrFgP3347hiyXzd55NHvszX2nosDknsHPBJmuZy4i+2SwOFc8r5pr5FJDcPxAmJ7REl7SKQafVCDjNoI1BgEkN6ozBgm65X0q2t5/83uC7LtTAip50lkWZdglYThIMCIbA62n50/HDp+QVexkf8dJ45h3JHfuZ2NjFfm+ssRjzhPNPfoaHDXvXAX5GaoxnBxHsv8uMQTmSYf14cOaKyfqJRIoygO1YavfbYtM9wNLNIniKHYXz8NEroLyHRAyD4heFHmn5m7aZ5DnMMqiOISDTzvFy1vzqsIza5wP8Ja10qhH/1TUOLU0F/xdchUOisfjcFf8FY4C1R6Gx5qabTMFUOHYDzP4wOz5eX7XORViP07mXEn4tGWY/ZU/uZ5eoN8yU6NH1CqdKDD0qhrtPGmpoOjqPGfzexK8pbPtrMVrAmNl+TRQyAlSYMPQaFAgbZxItehtAvbXMvUX648IZtGfhNrrsi4KCDHDf5fESp2ch4Z5A7V3tRUFrDdKRO3Hu3mOsLnI3eJQNMNJVdZOrUIpttRbP8TlpUr/bHMH472Tl1gWGXMCS9xOYWuDQ11p8yk0e1P4tnIDAKUAaRkTRipvVu8wNL3yzzbekuknlXjiI8ewfZ/ybt3zSB+GBZjC/Gw7WcKKLI9BFKMePuGzulJUHLd6tONcNjh1FFtCzWcmube5PlMLaEqrDh7dQNKG/xYidbC0SqU7LvXGHYVhB8IOQOL4w0r9MXv1QWqcm+SIR4Y8/c+xxxQ9oqvgjlDYiy7Z5H+rxpQ/l7uPVCwpMHoAwqLWcCwnYr+OiKPM8WEkNfI38cB2Tq23WAA8YprFNQqEbmCm3Qi+CPPEc8bj2/vTj6+8BXoW0a0lfo1quPhYSJC851bSf93EOcvl4p8YymRVe1d4Oi/XX2FCoEcuUIFkS7mVZG5VXNNkcj5OgVHQWZ8l1vvDVKgp9Kv2MI06H+ggpdV+QzX/UTTRZzh1lH7iyEVrwaK0Y3QE1GiBKC2/dAVn+onfWqKyY4JcV+JqNr9MSi0w0L9SbVoSB4jgCGMzG07xUDkVP/DpD42OMWNBkLuoAzKo+8r+DSfbcSm5VMGY8OKzhxwDLtD2fmDitCOx+5Tv3yECHVFD5aj1mD6Y0SttOUR5Xt1FVLo687QRL39cnV0ycrVoZcRXya7Jex6PZ1bySqhJrIp0O+n/tEAx8VnDbr4r4NNht15mPv/b2h3OTG1p+2g+94aYnsu3shMuF5S+Y5qbG/bFpI9O0VPou6GfDiLsjLDn51oGfLXn2zOaTGL6l+C6E2kra38cXa4ljP/DO108bZoEHolwTiYXbUTDuT8eu4/DaNP/xZkyACDLk+OxcmI9Bg6ODmkoNUvoqXHAVM9oJz/uAD/q1cNxQiDn8QohpNj82ALtSbMVxfV8I6/Ay7VK4u4HfsxXlpkDeZL3wJ/OnpBx3RuDInSEmRWXBB51nWIdiExuuHKoDt68mlwIZQIwhpaUw5p7RTQW4kagX47mkY3avg8oWPyV+VcCn6OUOKr6mBgD/bwZ8qoytb8lePXHtsNxpt0+m/zgr/RRXcBJQw1CGQ7QhtIw3PoqtkYCCoHkC6kjBKW/YlyhVFM5H2sWmWihTNx1TopySzrsUw/RaOUhTPhiysnZ0lMHz4rsRa28SQyDeSSGpvKPYX+9TtrsM+/X8yD16WPGCXl5uBQEYQmMq8k7WFVEgNJ8nXvKgQmECrDAxK3Jv11REALScoRZGJ7pX6tDB9R1JYw/GgDs9bAyxppyEcpB0Nmf2sK4GoLl8xb+4IFKJoC9PqQroizC6hB2nMcyO0bo9T1QtsdyJ4LbKT3ZD9HEH7HfFuJ1vdf9QjW1UIHOQpNQyspXend/E4Q/Ixyq5Jv2Zlf5kLD1ItjjyiaZefvmOhQ4/M8j7kJuXaWE3wC7Tn3YcVjpxgENx/w8n2qj98/hC1xVgyMopnd6ID8ZLsaUeu9XzisOg4h3TwVz01JPJzHyQuRpe7OcaFhpvAy3vSlf04C2XqGylHlWOzo1Hjdsnih9aZddo+RdAH7vBBtsFJkfuOHnlg+jrItBKJrAMou50OmLOkOyWdatxOYmC/cDx3LA9W/v9WVqaZB0PElp9S0jC/ySjWEllYxgNL6AhNruUkN/YNQIq3JsLFaogFpFKGnH+qNSbaRo/jaeeAhMhdKmtbIf00pED+exKhgx1EbPuKDiPa3c/SqHVFemEbQTWhO+QQ0qkThbf2NGWJ9VmFNFD13Sz40dc4iXCD2l0d93yUD4DOIoHYpIhHzwp28wZQLWGzir/8PDUzsGAj9R7ptlSPk0vjIHmKHWlgUpBKgcIh9xa8g9UW/ylfD6kLJtvcX5vIcViCg5VUpfhJ+NmfUAhBNzM1g59MuSdR4GpoYTvahysuRa0ksxjmg/2T7XOxZwyY+JrYoY89sU2jniPkdUOBJoCRzNou6EQkpI+MrHGrrNICnezf5Z/Oh5PbLhoHW65PJzz2USORpLVObEl0daqTa7nQ8bUghw1U+W9ylBa1IIG0BV2DkEB6WEIfi1+Ntvet3mZwzP3tiVZ0iakKvbcTqQ74uQeSr3jUQfnNz7PknYBA2fsdVLtsIwXUsePDC8G7Q+9PozyJ3mS8oBzxX8MckgiQ0WajjXinz0c1F9hIMMt8yoYnH4SQ5JKfhonkjCsUDLBYrPERCoqWN2cc98CZC0NXBE9vkuf3oxXKQxMDCLG8/ki8nRM9itat9V7mUEkQ85boLctGIVcFzXm0AtZp7CZqKCDKmtKQpS+I9T+lvOnTKKTIkG982S0vAKDGegHrlMfUoskc3vGL+NlzY4OUqhmNLG//lFcYyWcH/HLuJtddJ7yzC5qI2us0RhKW5bIuG+rgLsDH2PkvWG93ZrD2TfpfjKBLpiAnippEUI0NPXge7bX+pNS7ao/ZYUvCs+JCW1wef3NGyLZZEX00zVH/H7KRO5HcQQDCQOEYLQ45x0vBw1ucYfehNwOGLomy6ZiubrAfnlkqmCvl7+buEOzx+kksVV6RpgCFmi3oHwE64vZeI2qQ/KtjGH5ePHWZfDAvWZYRLFXyJdQnwyIuGN1e2ri9Uv5rGQXvgn/GNTl2eh0i7gSsnIS8OXnrsWX9Gu+HKp28gW9OlZix9s8YItA62KOEbUuBqyDJmsSWURA2QmrBzP+4Zu8RP3vBaCyjamC/94DOhb4FLmTQWFKHXhnXTszZrnqgx5mgFbVJmMcIwnqUDSpV8PnL2iDYvLLuTzx7algES1gYuNB44Ce21+IM2K+b8cYe5hpajKc7+2uj461vg5C8Pn4tCnELz6h4nQ2uzhwakFwI13Em8ZHpdBbqrNg+6BReeGUgvmQh0gwJa4zXMsMao1qGUbNF8gVF2hrmeh6WI/+CbPW7ib37aD9kCYtendx8whCcHGNL6XH8xJ82+k9ZlM2Bx52UT4jiEG3GDPO3xYMX3k1wb5ljGMRBN/kKmgb3XqUUEQBnheOCum1A781rEb5q9AqkMRCw+XQWhkrXg+aRxkWbQK2EEmjCgg1cvhZICTeYwP8qbWgm3E2adqWVxFmxyBP4l88hjUD3iPuvSGKsswgsPRp00LockLpkLv9B/iFBa4Hz7t6zGl7uiZRC35rWydcwqIcTfqtHOIboYBKArjRqDQ0tOfBgZ+SV/fjRb8M+wRllQN0+rxKpyBwKbKqj7B8BRD5/iYrzsfLZWMweV91BptWfsppfdrk0OFmpUzFR9+GGXc5yO5mMR8RxNlf76bgPMGRAT22uyIhn0Cy+tRYhTJjI+Jk2qaEPFrPOtVwjLn5JVx3tD7n5ljCwRjswfPKrpYKmXou1iRXTB6NR6o4VvVTZAcPADwSW+Z7sbNKmEAszuCzAVnCwavTPbxMdMa/KC8AtaSgwb7hvN08CePuCKZqBuh0v02mexIxCrzqK+hHAu0w5z4jPulEBXmmjivFDGHuc341gy4h57URbXF9l2mAVwKpwY+SeEAJAryb9Z5E4qLCA1gv6jNBxCS4SYkNTq03IMRq+U0+Xlpn7aa0EKO/doJAiegGnIby3SVRMSdRxLaamd9U16zNmk3T2FUUNjrMaDGby5uCT3bFJPZ3yYde5j23y9YQuCQG7FdkWdU+NbS0DayaDE9ppDF8q6TSRjU5rO0OELdKAJzJ5bSIuTCWhKiFcCBaVOnkUJn9TC9aBGgjD6eDRi3s7K/PqKJLSmfph6yv2jQhT+IcP2ymgOy88kefMpjE02xq3KourU02v4cWFpvz1ADBXRPYCjplBnf5xFoKsQYkKPwUPpfKSnMUJw8xM5Fzh1pXaKrnw+VRzmuerVg1uN+RTZbcPiUD0gqrXzq1llBL8ocHbS/xesZ7DNd6Gz5VKAvIbMoHFV/XGQQdJiGuGYsdOrgVQA4nmxmSZ3hrcnEWJEJxkw+UZQ5D9IugQGc7Lz235BPGSWSCudZyvDmCJfi1igrdDNJSDd2TRhKwvfYMz6LbVFXsejOoLjl6+CjWjNBBSLYrlHz8IgDvGtrEQc19t6bxl14te+4Cty8BmGUu8putw0x0R/wF3QTLYi6E8NZJHTnZ2T29/IwR0DC9R6N36CJZQPa/CLBFmAuEk6rCL1sZ0LAtCxWVgUBROGsMcRcKqBafpqzvVA1ARab9eGcMtf8Pr/t9DsexLkSxRoKy11Q19XXnmkTPp74pBTU3j8nVEEs00ctj9mBZs5+eoYzdYWAgGIPKhjQThu+/Fyq5EUXP7dB7biyJeURTjNdVJJGGRx4YlTvM5sc0Webgov9fm2SpCxPU/4acHqNalVJ9nw3Vq2vrcYAmRp+b/5Eqmq230yF8iNpdkpS7CTY5HVBZvLiZn3mCeK6trNHzX8iK+rgeOFRGnCPxlU6OiUlm4aoqf5FgCUkgBfzy1sn6yuYXCFh0cDtbJiM4zWxip96OWdxupL7fpdihBBcr/Gz2R1D36YloqiB15tB462qSP3YzChDODy7fbaONXupWFpeIBtb2M3Z6pBJhawyjdWKArHhKG+WY7gVVXzDE254Pq1mIoYX9lolZHnlGFWxbP69YOZpS9RliJFx7iZQYpHKP7FZLTDnVTaFs7/OGk+BM4KsSEmsnBcOzXlA8Dk2+uLGwASYVWNhtsssOtVDvDzzdZamUIjsIrUCao6Y/ZHYxjB+ltYRibVk1g2V1uOMfPjMGIzNzT060SUjBsl9av1TgrDA+/LwuKsKpgPo9thGbCoZBEhgFTbN3JNTUkgdgJhZyqe2IB9eiUHFv10JSIPEI5fA7x60rlib7r4kD8HoS6HCJifbrl7cHQhjnIbjjqeLWep3JkZJV8W4/pi6ujXiuWlb6Z0GpFvMtt4qI/tJ8bSL2TB0qI7qvErRa/ZLVre0Z+2wQwQ7dFe5fRSjJ/wMkIzz6VXY5Agg3nJtVoLJP85o2L9hxVJ2dOUnlTRIO93YOQRZN7DAvyixo5HdfcUgtzW01KbrWkWH+SdPMDdzsPA5mCs8L0w8ENrSJXWsIlZ0G1ENyn9iWXoMmn60dhbPYD54UZk3/9S67sEJUd3UMMBs0zpU+sXfji8MboK6X4YQG4GwXAz6n66RH5PLVQXjppdpLT6/Q7drD0DRYcFZJQnNWpXzh+uum2CP7oebuzXLJjPJn5uK/DtQlz9Mpoc9TQ1vhSEc2ktilkaomggHYhZPw2rUP8SCLqIMS+hlcQAMc0F3n3V5C2hCdbVuJ6+YSDr5w43c8YoJQI9U9AHmkYeMjtEEN/G87NNIcBGXys3znsbpbrcwtPZH4rP1lzxWtWqLoPtMmyHL18eXqpOsQ2qgXzGDtIFaOD0O1vdooQu92d3yVJHo9w2jr970H3gpeBwZEvLfKce4vIfcrQT1f++zlkiYGidXkyUW/VRq/BCKcb3qIg39QbuDmR0YD88fk2ulC+WJahhbvma5/RRWkwgO+iiXn3RLeGa086UgyWEcRdjjVSgj9XKnpVC2O7MvAfgIURz5NEBqk7f7kcJNO44sc+xB77rLPGmQFpSEddt9Hmv5L7xmWp6TnRGjRvaoM3BgDjU0gmeX2nUSxdBC711R5m3gBWRQtX/F2Ogu23L4Jb7ycwYSUO4+WW6uZF6FN54S5a0WJc5PDsWYE7yHoQKGuLsmmTdaoLWba9VLm6EJEU2meVqXL26Fj41X3o/EW3zTFuket8IVcjFUEeYv8DTH5/DhXJYBpuTqWQSRefqXWU02KK/WiIaUpPRUWmdTUcTle5jsODBt6Qgr7QxRBgTqZhJJG4O8Jc8ysjiR5PCcVy9RBo294MGSv9d+vXm8AeoSWIkctX+IJm4L2Z4988m3ggRLtDeZIH6UpI4NfPIQEJpsBrFCGRLOynPA1qzVuXQVfNnzPxKEZMsGrGcg6rsQ1YlEwbQ1vgl7e6TpqAPF46srUWDk4VnG40KqV70PRMeq0RSCdRTuXqcg/DLXDTy35DYktaadXjnOdWSFHGPizaQgZF5TE0ASwOF6Dm0ewPw5w2tFKeN1CsCoKC6PiZFkyQbmrM8uxU3bCGIp8ldV7KLV7z149ROi8Oh5nlgsKDhfaO1lVcMMmW5qQbHY25EcNQIzO9jxMP2tiXae7XnTzTK4u6i4+7rk5pA2bPFGRAoykWV1fduKy1q4+tCg/xO1+GwIoNK3NDv2YgHz4hWKLBz8nYeJrnsalEEIvaRtbLk5xFlyT5C7vowBpLOmPfWmmwnYDDzzTqyOE+i3f7AR4dNv5YJL8CJemQxaP68Gugp3OyNjeiod/hAOYOQ6EZ63xkUtDxaMBVtC0k70u12aechZJWzDnj/KlyBCSBtOyrqNjy54pWuBCETmu0q9ols8mpk0OHDQYvi83Hx8OBpn6ISyczT2sJREAEb1DZjL3QO1ES+Sh2/tw1n0iZuAKetuKzanAo33WYppYKPgWQPcnFtlpHSHCv874WF0732PnHoGQl3WpwuqE4xyr2reC2iNUMRz3p9j8sNY4PtpRar5YZ6jRFQ/eF9izOFXMCa7hDcwV8GgCUuk815U7uLZCrXi49EWgRvV8NMuS9S2Od+WlzS/U021aYGlPTEezsd2KnyqnymqX2SQrIg34FcUyr3Wdj6dke96p8/gvmNufpmjzeJERnzPE/k+W1HOgR7zQ+j66OxK7IlLmTgW2CEqtVUxxKyk0ersZIXTncc/FsLsslexcc50wS1j4y9l/MCiljQ216x2+03Uk0Q0tGoyBn7XjW1eyfqOMvtGeznfXh/zRKBcFjqkmG5rgkmT6snnj5HkVZADSyIyINrrA0C6gdtnF2eF1XLbfKv/szyEFc27vqUSRzMcsQ8cCyK7xnJxOY/iGr1xfkdCchMePKmjOGc4VuxGjl/EDkyF+h5Bx5E53iwWxIsPkxlfNLimXtcioDJa7jO43GWAHLThIPYnStsfhjWHzx/Hl+/jP8mxbr+86g2YGFXpvVwDK+BZF8WGblFQUWXcVY37Ig43gtVNetTtElVl2NMnpmZhMrpNtRgDwyMqU7KuowZrYfQulzxjeBmSNnYyILErMWogCPFhCa6SOVtGHsgWNer2pECJrfRLorTJpU8oZ0urhw2l/yjjz4p7nAXyubPsg4p4d9Z53oqmqVV+hyF2F0VPyRfcqnop0E+8cXMbj7sHpGkgBdbo2GdSL02e23JQU44nt4oK81catdyYkZNb8tTd3ZlC3XfrHWGfCa7ym/KsPEjaIQeDWX9NGpCsbWvtq6Y7p/lGveO00QUqdiVr2cktMCwdQVz/YJJZWE1qXeOEnLbopelH+vtq9a2c1b7hZMk/U1kATXINJjjxLB1efK0g/mazi8bDLNB/T3A8eVWBcLLMqet6zL5JK3j/qck3pGTNIB4IGdQ/D7qak1seXBTby+0HovUYW+8fkQYLcOa7tbBz3W9waDfpgkIqpWmxmlW2CzO+2IyBpRqtIbzcXf1cs9id0ayTpUKobaqLpPZC5eeTR4ZMlP+YsSEwvMatCY870Xll9W1+AA6r/LJZEjrhdk/79V5dkm46CkTGS87Jhz4NBSKc5hKu/1VCe3LgYMUzR53rxz3tKdiwHzkhHqejWlmzrYwas2DVwwGbQDEtkwRkrLC1Ww9T/105YXNop+9ME4ktwa4PqxxY9u7YonPvWuOhin4P934VT5s9jSq1rkPbSJkJkmufJts5GIUdXaZR/MlDzCpfeMqEG4OYEuGQ7Hzch8M9+SOx+t8gBneuMc7G3essDGnzwX1PNXbx2a2GRJMKvfgmezUSnEOiUC6HOERVQPJt6swSHZWqzcc5Tp1mj8FYFMifpVNpYQY3qPtMlQ4sx8c9GAhhtU4JiFphhF7tYxcZEjJCEpN5mN5ErcL5NXJbU9vV2RCFK5dBL3uI5/F06vgzDsS50MUVwGgsLdOOgxdhf3ktfR9CFc7MdA5LXaEBzMJBlKZlaK+LEaVPko8/E1eXjVEJz4GP0g77nTP4OMoaAC8oVzSixrZVOIy/RSIG2on+tXBbSvfupl5az1OvmWS3InmYCc/5IZO8Q/01gdFpAYRNY1Ga2QHzF1el30MsqEISsV4fETU4pqFM4mfh2exQVGI3KFJ1T50UFSprfoq/UAbUsQsDg2x93w/h5x7pxxEUZ0deAU2l0iUszkzHAnzWKPhS6ZIjeo38BBQppIFMsf7aEBNkw58zB9OVj+J1BxJIMsBrg5ztLYviaJ0w7f2MbG+cxA2jHCflx75c/bHKED+R+iznBGMrvhaINqTpjEL3cx0sFZyLVr/CIA8QP8HgxK7BFdK+eikjgAUjbxe6RjPuZ8sV0MZJr3KBMkQzJ08Rrm2rebRMFhzyGZ8yreETMNU+egyQJdmz8yv7IUX3AGtmLhvbSUhNIxbMMhEr3k4R0DdC2JO3zU7kKGhR9kM8akvhemC50vYHvvma3allbGY4bcGZPckktxYopADtd4piutC2aFSbwtUgJ+d5YsbNp1H+eb2RHkyGRkJVJuKHsE44GAuVdNLYCBWAGfa0QS9wmZK+QDN/UML6b5+L3bHIkrwIldOBxlJBHjDvBf1k7+ZhA4fw4YGMtOLq8nRvaEMUUm4+tMwU9APXNYfOxAJkdibPiDRa17jYgxtyNUqevMzuwoLoU4QMXIaZHta6TmM18cQT6YPfXk/ckRbzcRzsxFdA7pjiNngOZz+yV7v8nzNVMUCeJaGkr5J6wd1L/L/qSGUCHNY4Ujcy/AnTnNWz7T2M8VzfX0OrlajdLGxVB8RShMgiZz5J61U9dbPrw37xQ7AuL/WHsyitQYB0bB/BjQjlMCDFcjAOk7FXP5wbMh8wx6xh1+/rGA8tCqgWlRPKvk3JzHY/OKUDkew0Ne2CyyVo57sWW4KX+ao2XGEsHpAMOGmUBDTaIjUpS5I5wL0d7UetSKpFFqS33rl5wYtPmw+mlwsYKS4hbaIG9eD+blXs77PWEsHgud4j5p8pKJBJVFf6JqH7O705736RsQh05pZqLMg5wr6ETLA+n2hYJtUY2uEuObKWLj/5eqmByfrkNP4jnioO3N8Xbbsi3TqeUtwcV77m5Nw8E505iyWHRmztRsRLdU2O7lUPAInlWsrwPNMa6ibQpEMsJK+p72aEi+Ml5gBYzeDcG2cUQ8cttJDDsPRKhYBtUF1rWuASxOsLjtrtuxf/fXsE8C5wlo8W7NDLL+RiTjW1NjScYB2jXq2ulBjB53WZveBZ5gLUZzjczKMMTwME+ks4eHnK7bnyp71EBNeX5Zydk3kHn4dSdI8tfTeGwcga86xbvKgLqMxFFb2BjnYzqmrA260X9eldQZu1NQCUnVqCdVJ9fB5Yp9K7lMvrQXtdY5S3rj2dEfQwHSFA4oglSswQBaFHR0BqHBOvkKu8NzA3PsZqhKOt4RumwK03EaoFosUhAirQDsJLS8mJ+N0ivYEQkj5F04Aamko7JBlMaRdU2OxpX2d/FUXqhzokvzRV9ugaQkujoW2ljyMqK9TdhDQzpG45UntneJoML0cQaTxFNGqWNrRVtZh2oNTx9e3FH0XbxMulmxQhOmiEJDg714n0EGjR8tNooFqp9n3YHHlwoQTfnlD/LTyuzgI8akLEsnDb5ZulVV0jK//bgorh4wzXEg9Kf9miNvnZu7BRncFHATzA0KQLeg3yTZIhr+iXYGNXa5vy1jB6+DbSUNcOPWO8zmJZS2V+yjBmVAIFawQfa4H/WC2L3dayvj2xuaRz6h6J10kF+kjdZpeALhCSPGtyPqZ7jSOdnux43CtMu8vlgkzXOk6ykwSkTwGSLB42jLNzlY06BDEGkJQ3gr7lmxvx4DkG218z15BJFW7vI8Vn+LHEN9wBtpkIfdVVVFwCoYFp/ryjEk3wT1YXhCkrUAAIJsO2wQ/aYHGv4+Wc82gefNlWxUAM2Rer7fAtWYFl9sgKQZ+UTJ4nfx7zYO1djiKLWrp/wlUdI3p/tFTmEx4oeOY5Mybg5B10Kcd2jhF++F/yt1iLKAxmNPkJbSmDtGAM3Mq1pj5eP+QubNjIY6+NEV9c0wkLBH27hXkOaMXPmH8RBY2PxUTImCa4wBUoH4Rk33fy99+4vF9iRSbCSIFbkHGzr0S0MDxFEbovjainqxdhWZFVJ17RT1KNxgjcGfAotWEYc+9B5PxSibfz7LoQ8djDsRrpgcSpers8zI6djQZsZJNhxG9G0dqWOv/A3lehlIYyXgeAYgDfWDF4OuLMVhU+QD62lquYrCJQVQgSnXW7rpW9ZKNpphE+lqcpXv72vjAJutUcabfOdGVOQVHkw9IEvksSJ9mEcrluvOtYfp8zCIRZ/zDwbFc4m/UnMy7k8/imVy3Mo8tdP90jji6M7UR7MO1Ch6KXsXEOvFznI87uEjq+2nYlo0DNRg7sH3i1gQam1wOa4mQw3G39P72zmIDI4H2+OcdaCnA8yxZMxOzX3mkb4OamC3UBDz/qiMjQ8EzVj71VlCoxqYRXZjPaG5QgXlJp2o9iG0JhfUx4niTnoj1vJ7KtPGDz08gk7S+PHvVe/TNODSCFLf+mTn3zsUUudQwWyZtTq3cxteyrGM+De3RCRIHKTezyxCJEX4THGFpXxjeK+BBQ6Q0HxsP4PWEr4hXrca7wy1MSw51mzAZ4CbhiuB3/EtCO3sg2/BahoOwPfVy7cxTmkiylRn/mmvKfuR60P/JU0Vd/mRqDkyeE6rQeIOwKXY3vhElo0fPOGL6YxBtNelaALch6D+ZAldaLpKdpf28XVt8xRj5bQ6Rn75xX4mD4hmQlW+8UR/XDbBEkaVKL9+DZEB4hQEojOQkBhgOgrQi9e3SIAsp/ruxFWGwo3kJzJQ571Amx0FrIJfNfMRkIMzDmv23tAf5MG4oGxYS2CkRFtR2eAYLbeKIfAGJKlVmB0B50KlL1Y2anhMG/4Ys5uYxsyIHq/8XwiiRbgTu+0w4+LX7aOVwqMSgFeKCSS1GRXApzIIbNN5doDxEjGfCTYvIhOX2cEGWXDA03/h9f4Y+OAD5vuXr60WgNsbCkN8biuH4tq5WNDWCOuQkcZCiiFcLyVx7cPRCm1kpCblTBsGwnAbOAweIPg2/2NNjnZ2Y+G03BdSefKxjGxGrlts6KyTSwqtoDGu5F5Bik19fGJfZq4owSxSY0t4G0OoaCONW/WgO+PuR8ib/N5r9wduot8dGuJlwB5HZgXkd8sWUMuEJXiRT4AAQVMkMyb8V5Rl2yYEK8sfceMwuxbuXzi88P+TuOLi7Q9fwvklZE3VX7g9Lm4Kz1mxT3cGuaHk9GTBwEJ5FX9VQ5PJH7PwAUJ+TgnGQw5u99FMqoFD5eFHkc52aGOk9opJZLxc2f4eW9ecutmtKgGJVHLGml+6Uj7xEP3ng2Q0+XiPZ5wbA4lYEvfQpC+XIdKe0atvBifiUf78hk5Bg2q1yfzJlZP1NzjlRztAo38itSUenoYIMfSeOmlM91QxVtHBRFra96cukIsJax0ILWUGxympGOUPD5Xw4XSN1IqAdUwaHv128d14feYFBwcDU8GqKdceEMJXKCKQLd7dCThPN9d94cCxdfi5zPvDQ2dLimlQl2+agOKpDU0Fq9qyzradKNfZ5pPc5XgxBSFzWa+u8xeoZKRRKGnD2ZWYlNhVxkW8XmFHZEOytiEq7D0YePjmTngOTjvY13NNmZ+II4WwCy8wF70j9EwbOuMvrfAEiDocTUyAOIH65cUXwETTCfhmXoVZ1U92hcmm/pUkHHb6KmnrYcJBUQFgw7j5DHesIhII9DII+8mE9LgEzUSGvteU4qy9dLmq008jxfSfIIgqSb8sxjgrw4+ZLawItnurNrnmQVbRk/ujWApmyIQklLw4I+o2JiFBCrl9EIQ3iZklP48KxbT/uip0MIlyYlK/CFINsm7vyo/HirklEQLvFXRMo/wZ3vflZvPU3MSMcWinOBFRcqB4S5ExWc317hSLBQFptd8UborEFiBnzOwDWkm5tPXDj6oVTxD6boDcnTiMvFGBbpuIdpPEn06uNFBEubF7KWWUK55LJFgX7P08clbyIw7DIj2qjvGa1EaUAzLIFjtmrkdCGLIc/SEae1TmOUqU4p7ezep5EsanIMe354SCUPsxxxiDgpEwegcdfbBYIEZZlHB5CLBOfqhJLeDKTA3WLZ8T9RCvXS2LbPdFy2eJpQuYzibT8RBx12GMB3uUEWumbJJg5GDc948j3j12ooFJL4daLtNdG+hvkRH2WA/EjgjQ2Av4mckos4YD6+Jzeed92VCUDi0Y1zmwbP45EuTfPHosVqKpIUFcOjPXgBOdKJLB02x+x9k1n78l8YcMKkL72H/DzgLCe7n3U7L2hbhrTILthq+uG2D2SB7eL6+Xb4ZcfdmwrOQKU/D6llbq1GuWLqMgN3SXC2VjknH95rRXMX4pf1KaG6P5uYzgTgJ7EURDAV2+SJYw/qyJO2b7hxoq3ma6LMUMshhEfvcGpNytiHQFGIaHU6BvH99wIm+NPctLCcJxCcavIV2i7iC76Ryh7O4jbeaNdwwErERpl/7LNakbT0UciJcVYO8VDorJf/FNsByYKc6IY66FWgSYNOH5l/3pCxYUvOZDVZOSrjLg/SouuTf8vuIPBWwdJ9HLiMUmG7/78CatAizLAHBnV3FgFRUIenqyIeN3bEkI3KGDeubL2PB1+JvW4H+386uW7/H4E4R8RxxIWMxnC0ZJF/r2HpkmBirQ68IF5Ucbz03m4DuJTU9Ou2HBPCGcoF0dV9NHnTCv0mhkObLevQdkpjn+HhGvU4TMaN5Jon5Lqx7Sxz+ma+AKV7DZfT3PMc5EBtyzMYTiYpw1GHjkdRYCSzZZePRlfoPaw6xiITl2pFCp+35YEzsEKfc008dAQsug0YGcj6VKfe0gc9f4mwZGioY2Pn/JPtsdUoq6Jloj+NKdLo6s2QTQzH5+ZoFkFRYr9DEQI4iHSYt7rNJuq4HXUd3E+nd8bJAZmBub1j/+tBjU0pH1y3esr5mqNm1K6uie5B0zT73svjbMPAMUHOy5fHYIE6JFmZADOyDXbcEgOJiiTUzh2RhUZLdvYg8FdUWSSQDL2E6mGtHBKNGAC7BO6GLkau20YnjPBdFgOZ77ecaPjYWVJqStnq0m6pEa1O85I28u9j4F697Xu2iQSFge7JX+wq678cQEcYPZwi5RGBLrfk1i+lVGi/Z+n5Xl5zuFw8BxoojDiLh50gdS3OxdesFfE+UcK8i+fctYdBTr+2W68/ddrrXwerETPL5KyI9zfcuLa3SThOaCWFAwSs102URtbZ6R7bixV83EBZIxh/YsMtx1LrhpflCyAQfR8onR5RTcujcmIPzD4tOUmz/rpX2JoFA74YwfUZ08QQu0ihc89vLorKNNkSeMfNTgySXJeCL3lVpgactVennmsC9slDz5R3iWqMCacptmHq1D6cpiB+6nMtMXx4CKlNqUzLGuoZLOAoAI/XH9rdatWeGBMz5ZSijk0yc3xCF6ENTCBrCFsARm8An+784kBl3d2GuU7+YZO/nra1B5oDNqRmeGegYPrEf65izj/s69PxM2Uf0oLOJGEX3bqQ4ZblWBvh1nH5AXvovf+PItWwTA+uq/UEH3o7P3diHht245LZE+9XY0c/4cR13hcJ2hpNqV0AFrtnLstai5WbY3hPGkiQbcbkdrbCc2ALrGdNpZthRnt8kRP7nCwpikSqA1nsR0DWQWQkObnA4jstKJypiiY+xIAyteeD+GaNU6RCuaj0DS6M5Ool6XtTICEmzalzn85L0HV7mb8ot5wARuVyhdiuKW943bfVbyS5v/CDQZ5vGOElsUHfUaned2j3+Cf7fM3Lmglxl9jcGNULBMkUCcotNSn/rGU9Ka0TO8ppqNSClxYliw/SXLOjcz4KRAxfWfNhz4PaKAHH/ykjAfWtM7XL5CyFpzpWGu5mOcR9/ChIsZ0zOyx2GcZvUq+l3W5fZXeFqpakUaVrBWgUTI06BXn2AL6qlBDt6EoNx5OnOcqeg6TGoGyUI9i1ZicyEbhmh/bkYmp2NDGdCfGfdgnZbBpySkR3xt0GEOeM0GdBlQU4aAsgugimrBKqHQxV6VG6p3q6OteUBbf2C4yBI4Rbp2qxBo2Rm2dlXjfonVfLGit12c58FRaGUMYymqZ6XmxCTC6TlXVpbAnkYjbQ61T8A3RgLALoEWSykW7ONi79NVUx8jae1zxOZMEn7mOWk5x9B5bzYlQOfh2z2bRm5UR/0M3vRTx2O3RUYChDHUFEsDzcsGwqJ34bupHrBYOH5CFHK7zuHBk/6Yddnr/aL0AzD0UwP66OfBt682KZdlZ+I38Kv+s4zoNY9x19T1hzQCPVmLzNr8t6gk44hqPHQxgNEAbH6E0HudGIAm9hLJGY3qnwUCcOJwDSH+FJbD0AxBgBVFEKoV2LLYGVz4W0EOVYDm9WOZl+XuIeiYl4VXXfTIgYFUUfnzrZWzwMYlW6xG0WMiBYi96XoYVTmpwka6cdIjua+cD9m8ZB4drYUZEPqp5DfB64YZF/f9XAaNQwIjB1VsOeAFAHdc+INMyy/NDEcaa04ZjhFgJEZeaftv46EBNaeQx77wKNlgP7SDqdE8qh/Tqs/5w1e45pFRKXW0taQNbRVX75R/7YYNBnidAuOYHpYXmVIlU+yR4LP5bnrGnxFjfjjFZLpUzIOJh5oz3v0F4Ac2xOMitc24p2OiETlM/EY5oiLbnZF0Thz9V0GmMbQBnX9zsYHTkzAXoLx+ChAxV3npO5XTegmydVoiYrcekinXpkq6n5TA9XwlptE9OCmMEbyjSKn5rCykebhFI0GmUPMGLDQuQ6PAJya5WAEWu9NgEcFmT3lFhs5+G3bOqHVSjV4yro3mLkpkHimnPPAFSvDHm/6dz1zu4FQ7xebLcpCY0TboROWNK08fO6gdVKQWQhs1QnNmSRmXmPM+ZcshXYFmKzB79ScT0u9MToF2VLcz6mOTQF7IxSPnhumm8Z6g+sRAhp4lKd3nADxD6pDT4PEX20+5R2xQMT6r4fLD29ROHoL/9m6UQX3pepAzj7UQpBQJK8abFk1RgK1Ms/LqbykdhftCo4eK2pMGAn5Rsk4TxxoQe760+zZ+8UHss27o26Hx8usHfRZ1LNICszzKM9OCti+xoxwRX1LTkwsnetIBoVLorCoLWksbAJ2X0creOlJEBeUcB/nrEaYYiVRECik2a5G3smZAmww56869wbDeUuT4Pp0i/lJsfJr9arHd0KpLzUVr7MmS/ITrFSF80IqXa0kRf4XiMFjg9fgUiUVT4woK3jGDh+qKI6YtVOqLNTrua4FnOdPgw6z1EpPNkXaLUsq8ryCWGQv67a3/N196YcIccD5KhN6JpElE+y8fjEn0GhuM1thmwslyQ7GerDLu28og+e8mBwl02U1PSv3fmp0y6bUuCHhpO7ZkyBDhBaQvtrAXPXRO2t5p+SdAArjqZ3H54VcsMjuUJi+iOdETcDleKGFxIwB+tJT7v5jBdnLLj6KRhtOK9b9xh6ALK5RaIrNygG+hQ/5Tbvh6vVRQUVkg9x9yK377Y8m49eqVnyuG0EiEuyqqDZo24cxtSG1iTHenBdwDDKJvBRnx/Zn+zNf4oeTN0YksxRghSnXlrOl3AyYAaqEWC4JhtaLlfrlsymdugMXpZVZt8+MY+rEoFnjXXMEXmuZym/M8fIXe+iha7KgeyPOIZNHzG8gRhtW30SiOZ/lzMn7EsCdlYZ3LKaU/Cufz3jMNfn99pMWdCMoXgk4ZdsurcmbFPdwluq5R4y5z3K7A8/oD911hsJ3orwWTT+5+rN9rARaWyt6yrbpikxEZBJf36OcOZjARVlizaE2WNpfAxb7QbamdyG3WrX2P1dCO+9DjFzYsSojs/4AKnOKTZVTmmRH3bYpMeziTOf+jVnsmFV06V68+deIJUgfsZgbL+KEukrvOGpdP4ZDgOrgFoOxzl0sEEKtAIiqi9ahBBNpEBqWLF/THIq1f/HroOSz0nrskxTxcqzU+kPUz5r2axNvM6Ng2zfELP5+6HWTAsAcdSr+/VUQtVC9k5sc0IEPWvSWhHSUsOdK+n+ykW1nzVg9Gkg6nKDCTe8tX6+GUXjpuQwoU6tsY/gGkX5y1lpFL/9RXSIo6GX4m/PhL8+gPsxrDdSmZssZOcsj6zukHwAfLz0xlduRgY/Z6GNOLwirYz13ek2X9Hlq+NadwdI1GQlOOeIUGFsgsF66QCyIZaroTrJrN5ASjFak4j4JiZc2z9QhRFVK+YNzPvz+9AdmBTLBf5FyZW5d9g1AF6cywEYvmlmBwQLR2MnQes+GcN5XB8n0u5oEoqGi9pgVw63dAWV6G8nnCYCZDC6LtGAJEGMy0C4Xn9qK90U+XDL+xykBekOOI0uSWeI4CqFFTEU2bz65D1J/cNSSCcSHxsnnw/7DmJb5DBZ/VkRZ6hYABckr0f+MXPXb8WV6wfOJf9vqxgie2iZHTbNz6mIDdrYR/KK+Ob3n0YFr5U3Z6HiYZkV8wY0OWi1gZtFJB+2gr4hK5vyRpDrWF+nkYxqlhxOaq8SAoLz8UtmPe3TuhlcA5LnJdlscPhEQk9hlrZc9A983wX4dHJhnyiMY4hQMqYlcxYUyW30fCL5UmcQ+QbVFsSNt7SyJPvAdYJ2frzRxn0+4vhGm+mPKfThDahfCqBmwIwqL+h5CCt+aF/oj1lweIhcfAD947bie+et6gXaPEHJRtGcTGBbJAvJ4zQ/cpOTkLh5oQWDngDwHCieSZTViSFzncj4gtIhm1bsjMWMzTtVaArYShXlBrh8cTE2Y4OyZ7LFvFLOlZIp+rCw3PPY+TiGYzdJ1JIVCHIH0/p711rzQd+NsgankGU9lBUtP2Xw7i5L18Zx3R7kYhnkRzGurSortqxK1kuhjgT25X4dV9Wm6eBKge9Z5jx3UvcyNW0nlePWhgiWfW6h2Vc+/xuZzV/PfrgC95opy4pITPoDdu1dxLgBf40yOk1aoqooZfA4exaR/AvqjT0ly0LGEiopVcQbaIl+AM1/F8MtfRDIn1hnQz3SixxcH5UwW9O/bCkaG3zFKqULUTESbOsbkSPolmPqa/zMzJ5EnwAygZ3EFfvPW3/aaeunVba3JhcPnpLpgJ76MDBWY7EcH7MLt6VDYByRCE86btKrMFuuqZQeZMihHpdaNyAQl7VzITRQLtYvF/mq7fsSJweSTi4RoR1y8OiZjx7o5lO4d+fOrBV75uSS2DQR821b+t5GsY1eM1ovY/vBPUXsbcvzr4dcy7GZvcQkOE/rf6W4hIoDleZafFS1B5H/Y2qaSCj9Q78SQPl7ECfpx/2uRbFZH3e/5XUyYGzqZedMQ1swSv6bjNJD5NzGeF6OICr3kGxFiywZYzzBC+B8cOMEGu99/UuVSGA4sEq17zMQB3YtmpHfYrRLEqRAKmE7aLFe4A0QUKEOoCPfNZfX4W8v651f1UlkWNKV11mE3hyQiASEuwaOYuTCP1mZUol45n9nfRiMMYtLCHvS+SNpKHjryRO/hqi8cETCcSUbkASgGCRO/1gGoJfGulrrvXQTXpr8oTE/Q7hL1xRfGRLglQmXFSwAzMUcsFkBbKOG2PBXHJKL1cAEssN2EU3Kk1m1nilyS/teBdVQpehEnVbrxUnXVcUQBcplUcP0bOyXCgTWwNLuOfbDNCiOaZlJjNoaJWbvmBohkG1ALGl41bsQsTukh55ToM4nIH9z7bveFwCOF5tPj8ddLoPfdKpyOs4ymXkVD0uKGfyWn8BHwfthg3ufjFi2AU3lkahwCmzMjyvl3vFYjoZJQZxKEPlgNnygr+4kN7I1R7p4nzG5vycG/bG+PwOjJgQ0fFSRZxLE7spqefIgketzmTl1T0a+Qq292qaqO4ENCKRGcF/Dsbq8zp0/O48Wlg0r2A2yRWGhNqJwZzr4oLK+NACYX0Ae5nNZHzERTOLNwFM5bR2S8QS+20NWXOqQj9ppojcYHtGIRkci9p+1XkNS5iUFa6Me7KFbHkHIztp53+4tisDSCN5S8u7Hyxy0F2CpVOkCDyN1K+pwTL45H0z7xxLRTZgnTXDQgpowGKKS8bmVipDHmIh4GGUJzw0AxXBzJArsnkn2TlO3mVdkQRn0b2NdCmEkZZ5hamoPS++/HilfDoRnSw9FUFReWqLKuYpTXwSSyu4/m2LS42EH1vtvHf69QuagQqgmeBh3W2RD3q/xToh1DlELQeKNl3u9mjYuU8VVsmOHeMCIL6bA/DJ/LVFMWct92OiPuc9up4ZLJ+HhIMyaT5+2IRVBXZ8Dg0f9Non2F7biuydb0kZm5hyu16WBQRA8iQ2HKe7ITMm2sjyMSjFbIwS/rssN0WaqOd4R9AzLEc4ToGl3ZLSUZ84fipc5s5ZBQlivRP4BwI7B1NvqZmy/hbEVqGAMPaKu/hVyUrAutlV+D94LFswPUn7deYiI+WH+UXrm7zqRwqj2StQuAfxVcldrKA2UFxTQAcct7QQhDyjyDou6WzbGrFPIhE3CarGzaNqjfz9s75YIel+VJ5Bi4otRH6Z1uvnbKo4EAoXxW0AP/E/aNZ0Gl1FzR5B483ohzE8MVLBpicigLTsK2TkcTEtTWYmVDOeOEWj76zkpnA17aSfOr7b3cOsRgYye097UxiAR/Z/xz50tgw+IDlu/rslqH7nnja0NATqplGqpEI2NI10Y1u5asLVuAFKJRuvfULQJSD19Gk1sMSc/brzfYxkg6X0tA+4dUZHL4/QYKYZ5WasSmlPRcL4Kt8ZgSwjinpAcZSphgFWoI2TfX4m1udHJeP7pbEfXzlzmLe8iIYpYZvN5tkZ0Rgk95AgUlZ/I2wo3rxOLBUjys941n9GBBOnE0RhD425IjZrZyaMGIBkaKyIxzlFHfnSjr+3SeGs97sPJwchESVvsdpz61GTsy/k5Q14lZbKkg0dlQBYrG8wBovinfRnluCqbxmq5McWyfmFwOe+AtY65xXLTR7qbI8QXI9THVQS8C78n5YNTAIx+pMNjuDfLsNYWYxe3GiG/UPW9y0oxW0vMIHaV6oNRkgV9+Vo9LadHfXhUbHeFerGFL9oYT6LpAxrCM5nZ9BRxysvcPQ3j+hAHRzASSY3pphQTTXvz8+lJTPdoVYXRNmeQdkT8znPT0bQJ0fZSunMLxVRjUQsLdbCDiU26HW2M9KMmFUkRMJzcHjWU7hHaSR5V37tV/r9x4rdP1qe1xzXjge0b3Ao1Bqm23G+/9LouFB+U0qvQJbkZDjiS7GMMg2RmyT8ZBbQsEhnfCZDfmv3r2JggFj9jsti+tD1oMrwR+vqSwMDms3Aw7+f5bM+gvMX12DaAYYnIw/I5qErXbFjp69v70cyTdtwxNCs4aOxgD00DP96z5sxp6UoW6XWyQN5tZndnDxo2FM3PfNZxmx9VSmZ/to2j+xZw3uV34gFfHMRBD2RZ3JKCM9pxlvTM0we+faIvKTA6ZC1a7+EA+J4iVO75syoiHRm1wDo81po1hdX2SpJ15b9IPwZ3LpP4Rr/zw3errj+zUOwgS0mMB7i5L+FpCHIfzQ0u2IPTThvi0j+xIzZe6gsCc4SEk3p0YwZcpVD/jMx9JMOuNkNVenONKzvjNI3PVSzR5z9/GzKIm6r43ZWJwgsBj8zBntyt6orP4uscMKvPKVm3dSU8GWYLuk+C8KZmkv7J5J3aBuE+iPeNVW//bSDL+xab1Sf2b/hetDHGx93uB4PbLT1p6LRTF8l4y86YreU7ktn9lsjXwNctz8qUHmUXHP00FJ5tDt98EI9JXZphxvj+cVZ1SMXhG6qWZFQ0tvN4Ll4xAessqCaYbpUP+afilzAOLE0miNPdWhDQuvjJFz2GgKpoevlm57fKQ6XH1pPGB3TtYDi20KYvIPc3AuYIvXcAZ5VXEQ6Zxbzbu3Z28M31LiS3yFnx7V96FrfRdprhScbV7m4ABMngLlk0b07Fb6qLityXkEGUjYAQ+uxEot6DfsnEmXSuX8W0rWROFFs5aFTYdwAplxLX0Nu7loOGJ2NVqk637lNJfNLtk7strfipIEJcOpiFrYmV/vxK8ghOPEIpsDWvToHzQQVkjtMU4E05eVMpin4cJh9b9tItuajwHXoYlnCPT699dZHADJ7Eh14fnlzI0qHV4GxevJP2gWQVNh/18/gb2pB1irTfK6E+bqM2N8ar3r2i0dkcAWkS9yYrlIHYIvQli0aNH8Dkh9qa4c0SquQ/H5LW6IPyO8nx7g/GNtRQj6XRC+OeNkJbhuhmMoB2ly0y6Gb8Fb6FBfElgxIJCDtSN6y/bF5gmj0pfu5Hd9yYdLZF1xccWdXboFPsOS66wR2Qf0HDSODSPTqlUZACjs6SeoLAimEmPMMF+MGR7ylhbE115mYiIkgicvV/f/iotdZd9Apoj8Ay6m3oJVyG+3NW/ZybspLY+7TafJhndKFeF/qsotqZHb5LOIDyh5uzhx1EFQrPFrBoU+crSfvEn/Mc6VWSkn+TJcz2Og/vCop7AK0rzD6Vc1+xBXUfGil4hRWio2pHvmnUypDLmLoAmweVAgFcHG9lfNTaZfFdue9Sjy9Km1iM2/iOmun97fOt4gpzq6zF2Dmq3KrQFMTqRK2XVuyKzGuGGKRsSybAFtnZhwpoUBZYxMfqzJz1+CpTkOjPpoADEM8lN72++BcItqNY25f2rqy+3ypPNBIjSpcdvqPELZqSaUxvg31P9Uge8N0XDoPx2/WbMyYuLsrO3g21HRbVs6SsKtGvWFVqRsl4fR8zg8zyMhCQwrfSY2v9nY+6nJPT4mKZyqEhB4ic6vt+Tip8iZrnrCZw7S+T94Qp+iuJGE1SHXBnDqUkNOtuGbx0TI6qI+fyDc4T87Kzf51bCRDF8ye1cg5phine2ihmiqo8k8UITXirEFaSVO7UE/FVb7vuhsiQzmdERyRk6gMIyFhq3UERb75/9IK4zdxBbil+HwBl0GwTF8dZ/1CtUTw5gBmewg5xSc4V89CaqWnDs4DyRnbGyps2juaS7dgeTsTHztAUKZhIlgyhPGsZFnez19k8uAKEjRd7jVi4QuDJm7nMWb2QRIiRYh3C4IXkH1QGPQN5DMqVjFmibG6LKGhuyh6Kub0q5r1GIuqERMwSNJOJR3KB3kNep5CMhOtWVto1fI1sTmGv/A3pfwKLN/c0GbDEGPjetEfe1GP6TZfCCZ/s0VnWSP+lIp3C3U9cdkNs7HT1MIcQC1XwWtHADxiLQxOeFqNeW18LX+ett/JHSCnRtn0F9Ydieko4efKDeKciR2G426gfIzJcndxaaxMKkW0O0DCkGbD0BtSqX3sw3+6+A54vLXeMHvhAHOy40cGzGJQbOyfM3BDXcQ/c2z3Vb+sk+dAQKvFQ2/g3o3qOwqiyF2CG7iq2SRHlGmbiXWZlUB4msT75OHGBdjO8thVIwuDjNuY1rGZ8y3lBQ16v84RJk5TghI6N4w166oRkz1RMckDRO6ZyvVh8VAhDnrF8+JgGSn0qzf5PukgJJYJxLa5yxPRd6J297dP/8Da527U0nMKflq8TzrQvwd5kDGFDYMaU70Bkl77sTHe6oeFk99GxQWd1ZgN5GLPD4nAFZke4u/XgR12qjoZZKhr02H279+QJ9RHeMYO2DWpxuTs1Wa372jYgRIL5p4oQ2PEX/e5UzVQy7dMsWV1MLYfjSn2sB/NXNqhYiiYoOAuu/sjTOBx1mcfpxEyRdJt1Cdrokf9ZMAjMyZuzKDaHbuLM2wC/OwIjmfXdLn2MU9kn/M84qDR58fhaTI0KrDdoJxxjSv43eKeFLajLPhyLJNnMSnjOkm0pLfUnmtStCmtZlcheO0Bkxg6iNviHZmD1MVTEI1aNbN9u1cJaoDo6FZ1N38Rp620DLNE/j33YFzDkvuZKOc30I33GIFJamrIlYOY8i9GPhZFf3kkGhlYnFhrjv3W9HzS6dsSxV6ojhLHlX7DSZ/jDZ6j9YHHl6O3aOYFRITbGbiPaudNoBk6IaGmRBO6IiLCD51oyI8nXYgmiUepiJE3sghXpu5eegLXvPWGJr+4OdNub323E+folyeFUw2wQD/bDBiifrz9gm8+d/ofsBrCq/AqCQiad76zPV201QiP7ojg0TessaxU37YhtsK4Ht1rRrAM/PCQfG8AqJB+mvZL7W9EjeKZdZX/ioOxjLHeTqaK7viirqRyno3HN0/JKShlqRJzeRIeit9Qdcn6WLdGqRNj1PYXpFQm/S00eI49yBkKy0jAQtoUl/Wnik3Q8nHXiA6s4HfhS8bUJYMi1bdQot/J6+sQ17k2f+0jC5gTiAUANHlPJWgKcWKt7v2p7I4e9r43a7hXWJJs9iLzY1brbHcFQ6yH1h6pkIig9g7EKSC1TpS75ukp0XtVtenxnnJSfs3SEcOu0jStCnwaMGEjWaSbeEtwaTM0tseGrl1MvpGthAKPobLOr03A9CAc7lO0LUSBgXtE8E5VvbPpd5yS/DySoCuYFri9Cg9hKy4jhHQf774j64D3xzLEuHT5VifDs1B1IwA1SjKIOEZfcUP1z/B60w1OHqqBDsnCD+0BzuzmcSJjkx5uFj4ye8bBccQN0dPUSA4pIQPiwE3AfJuFLe80JPUJExfdS5cLshC1cg+DRVtT3GDE0PN9iig8ZTgIyRj66MeYT9IL50+cLwU6ech9iqTZeA4HMcsKskx9GLtLLKqfpUSAdgnb+vogKyNxkxFFrYgyW61iafhbjHapjk2NqH5QAoUlUN5q7z1rgF5nuSmtkFWzzuc0ZNqLxb5Uc3owxwUHJeWws/zEvXjvJ0HJE/aS7BGBukYM3aUhoC7K4diRtitHb20z+IGvk9RcR+RrDwnBC/Maoiyg2lpVgWx/LPoLeY82XA8PhkTQpwSWHpr+f+RfayEMi8qSZybyS9tGcjrp+3yyURbORthuf8MARypl45dvQMS+7hCB3ZoYE3nac+Gk6Wbf9qmB7NS6jSvII3MHtxUqUKCdrzlYPtIR42KdZGyNb+4d1+3bn5H2oFEyLcswc6siiXKKSyT21/qRlnXvLk2Dz4QfUFg/+WFIVqFMBB9eXsgkYifA7/pcF8DKZKiTyhqbe6IeZL7+DTMeYETTabulQAfxFIGwSoAHjI9GbunaI0yQg+fVcbbPVkYvI8B1g3lUQk58wJiSaHClR4rQsWfEqFOe3VVjYqeq2/T9hSbqjrAeAnFRDIv3iHfivsDVOeO81u6LTwKDgaF3RmGyu6EFJEy7MMhT7cHfuuCt5aKHgN+oPdY0ns3W9DVL1rGHiFO0ebIjDEUhY2yXAb9899yLktTeIgdIrzLNdfHqRfK65a+Ny97/LSjnPvZx1r/qqlrLCdii9YAU16R93qWPE+wMhW3Hc01dmp2mTlGmjPzHiCObZYxjZux5FD+ub+pDbVkdJ6YAQr9VGkxb6vQ+g/OEQzOD0E51ObDM3HKNANeBtYdVfz3xRMAq2YuIopj5B0LoPFnXLpUPJ+dJTEK6v3bPfK7tip4B4OMm8NpQ5MkFtfh8SY358E9tyflzIWwkpFaMWF/78yKSSK/jDHydx/c6SZsYVPosAICWWbqgQQvuQrY2vSpmtcZvioFa6ojw5zuflHvjKCAsFpEUtRAACKxOgG3+E5e9arcmW1TlpRti5aacC/+giGBFktYvoGwj820RmnAc8xrK8ASFodqTzSZu7fMNyXndPXA1Dltti8yED88KFe/8CWnOWx7pBJGy/jWkgvJmvMv3EunpGcEJV5ubGCOvB1WR9guuE/zAKekvYvWIR7TK/Lxs8619QphTUMPFigHjZxMb0viNDZ/U10YkHnRUboQjyjY1XJZkIuhaYCNW06OcwyYXIQzwAbOZD3+EL24zqKAcGGvfGK3JzL0PtB79sbF3YpVWrNSxJkcKhJGJOeVDDOiKZ3IC5XMe4KfH3udc2ploUonRx9NwRR0Ox3Ibmy7PSCRhMI2n0Dsad8LVnPJ5JioV8t8H+Cjr30/UYREUwr1ZQGCPVM3YVXxlx+Tur+hHZgp8pTFF+siU9ftx09jda38Mwk32we4uJIPWUtUVkgr9Uf2Lo2BLeGlhVnzX1dri0vpwdaWDYgFHFQ+RGZxo55Q/J7UZsjTho9j/RK7msI4b5wEBvTOeefTblhFTohcxANvVv6Xa+LHjV6sVgtiduqyfhRekD3IKVsVPHMKG972r1U5Gt3SdVdcf+Hkwl717PNcAK/69YrlMdOh2Yk6syBNEgQ5Qv7n2588qE5sHEj5+FNE3MVz1+LCm1QwXFWmUu1U6yUIYANMndgUB195X8fhmON7IOxsmuPgCmHF+v9RU/wPwhnfQWlVqQ85zxFoGMKD1yprJbjFDO3mWrRO3HJR6hNyHxuElwTPQVqPPJEEAljnVpFy2QRDgKhhUfzNwQxORIWyTGEFCrsEkKKqiRaTmsCoDRoBspjZzyOwRXSqEb6ovNhHS7jGXYrU41wD6YYWJpHsjZNKHhPl0+iC+BQUQP54jMvApb3uhA2MdQpb3wUz78E3NL9sqoTEzvR/4435cte0TMWjUx6iGGYvE4LZ+pTbMuGyxO4pZ/202NoE/eV6iqJExpaiTIMk4Nk8hz/U89ubBogIIjoRRfZXSmX/d+ShYhUX38Yw1kEi1oaRvpoWaMoDYELndpLwvNUgNDqBUuLL8SNb4H15DxUVKIqL4zlfhQW02hADxEdVdcbZ+1c3R2hXRiGZ91eJwmErfSDz6z/XxDi/QmI+oeMfAtyUqUJ0+eayo8Pl8oI7zs8eVjrZssydGXD6Ilaz1bHJyn8vRs3Z2IAO+A0LjJh97rAZv7VfscjV5sHIkjkn0ceo8pAMxc28fIh2X35hAJRRaTdiuS3Ef6lBQzQeGQjKK8A2aZj9aSzXdN9IVidA9THDW72q5Pf5V7Mj33DTbGHtN8sbcis49L8VQU0Z5vRvJY9jxxzjcidFBtBlv9aan/YhLc/SHqWYC6WCP+8fHteMJ8/S/Uz9qUW437PT97u716Xvo/NR9IiCnIyAol5RDZWVGRGVsWHm/I1Dd/L9xjb73B1TPnp+VdC77pRxOF80exMTRLBo35E0KwKbct5zxbatP5Hp7OCjsW16DqlnT84o7Lal5gLF4Q/Ghpm0RjCnPNns1sCfWsV5jhzWBVDYBJTOAihYrjKezFAA4/OcdEM47cuXbGzixMXzIY5XJpExx5TAgJIb12VEdTFfVNtAf4+6Xl3NbK/CwGgdZsPggcRtETe8hxVqQijNar/CD9nNFzw3jcJpy0CqMNHwYHQBkKOhf/I7k8iZfbtCALxBYXykx8BkuJxU1hJdtzn1vXydsA1Dfy99isUKZA/s/sAUjThlauBEX5JxsdrHiLcAzqASajXrD3jINI12Dzj5q1aqw1xAkL/R/SSsCNoC6dwxbL36uUkcwvHlz0M9xNmm/W06B2ANpZb7cy7keJnzCP63QcE3W8rGC7vblJDTN3CAUcMr1yNI8nRRLxfRAxp7EVOqRpwreO20687SkCtG74YM57BW6MjGRaf8f/cKI1QbwLLb4OXN9qKrhpn+3fj1kNWzy0MNiYOxBQfbYyIkb2Okl+FAe1N0dLP/3E7CPgN6s5rGt8vBk56itXQ7Ui7GAM38ftwtnEgpxi9zEh23Q0ULIQHD8QnQBSzFcmZ+qeMPNTof5X2Nwmy6ra7SewjpXl4ndUZaqBhXc74RHt23OeGxwrmVPsFXCrVh7dHNp+P1iCper1bX4cOtkg+t/eaIUZFsFytWaVZQzr36NFCqDf2/ig8A1DerTEWC1gV4zyimycZWklpjGA86GAcrnajAzQ3BHlMQtwtqD8sln5JnQan7nDsVNmC4H14OFQHGyIQQcDmZszIdccTzDv3Wf1dvt+aSqjfAY8nookmqH+Zjg4kwtWt94qY01K1/FBB++usWJJ0k3uIX00TWqk1y1moTPHSktidPqTZNGPIy6kjUV8SepxpO+4KaZPKymoVYilC4sgBQuoyeTYeFn5uZs+By7SdFYAw787udEZKAMrAZtLT/I+7zHVsS6R9QVTubPWDPLvkHVkZrf1cqC9j5hMVVJ9n37t+iObBwF98lO/OHY+XwqgpP0/UKziENBGkQtaLvvsvSVuTg/+3ITjIsAseqfgIqg/qGZfCBxGvtWd8zp9GVvf6Ia1eRETh1OX9uaUl1MeQnds7ZWJlCaRdJbWl+KfrMFxTbHjcafaEpMTK84P/15tx8xC6T+qvj0l9ff3LO0dPP+RJjx5yI76OtaFGE9o0iD3xNiTGiPM6tDJYcHnaKRJ6pUXyYyq27KTimEerEhSzHJeEbRzwxP8MmO4T7WPsTrhod5UNl13vB8/vOZuSpNChJYs2eMlRRrxfhrSCISzoe86s/SB02/NZDNeTezSuItfJr8kkckkCciSojGHM5icVLnjmJiU4z0HJ7b6PIRYyGAatJWGLtYu9wOHlX6rBcATFuTFPIXN4be+CbH8xTCoD4fm5/aZtqOUNW3oSCqWt2JeVL+Yw92sDLrU3Hp83BtNqyqPfgIlsciUm9iFIafPnH6eb9OQt1joaR/0HoxptaCdB9Sq6HXP2pegRyiTcTAO+H4hfyitOilY6z7hbohdxPmmR4tMLnSP2xhQjgrWxh5VbrqjpQJ2LglRDqE+QK6YxR7QLDx0FuUFWxu0g7wVpEv6tn9g2ZxYtwamK1A0QfjQK1jwGlGkeIRqsowPuGKe+JBe+MvSrx23/YvgzxvgAnCtSoClX0neb7/DNkQ+HeHr01PO1YqajJtMRehnSLM6NNbpjM133Y4BoZCPqqaghLYquLbbY91MwPqudiG/rQ53XzZAaN0JOr71MKhYhdyLbIUNC2tpZD69/QgbRqSNJ0JCn4Z99XsqtToT28r0qGY9HVy2adHFB721d0enJJ5F6WQnjwQnxsBj7mlQJGowjtQ9lLijMzdhgN5uCklDePWH9qQHsAgptBIoZa8JTG1q1OsllggvsadXs//j7SqLw4D+MaHsITqzhUbqtEivSRrUpgSOfkWAjc08Gr5PZBQ51iybzmxwXyMEyr4uASV4AyYM5eiEpHAK8cy3cXYZRAnCD2Z5Q8aS4VRGXDE2iMcqCPGwVI4+sJQZdZQcmcsrkNufUgYIzqqyhiu3altQdS2EIBJVONjdaZ6WK0USJrnYG6NPzuwYAOgchsIs/qRL8qWi+JA/bthv6RqdtSXWa0YWoU8RIM6nYrC6eUVZQsaWC80z8lXxADlii0s85UvqAJZVNnWvpxVrPVIPMbAbK7HaDSnApORV5kouCKNgYL6Gj/ZtwF4RunfTLmWzLQhHLh0Wb2qYyrMJ5XDtw1ufHCgsRCEoFJtEl52rOGpd/n5Lyeb9i9aJsyFc6KZbKqUn5By8HJmTubcPAzaE74Ms+AIR5UQoNenfv0AswUYs087uEnhGvssQkc0MBA1LWpyNGTBC5kekpbAlqMQ7j/vVOMJdANc9svfUXWeC0HDIZsR8uaT/XoxonKaEFxVYjSNckeKElgy6JJ6lwm9PRduo6aGnPCvef+lbVDmlHg+WYwgiQ5Yy+RpNnjRv8fHSA7rmkhoRKinMWpIBEalynWLw5JPruSfMpMsGPIVbTQxE7ocJMv/UiAWczXkkUHjGBJtVZli13NSnmFKqLnM42pj4bf+2K55betw5mvZIfizn4St399q176XNeX8CzAY7WAcCJ3DbEqJbBKV1P0p93M8P6RRQEyLH8h1roSGMJggb009o6y6coWMlbBROx7UvSVv7t7+jqmSf1kTu80/uZpS7qoq58qvjDNnE8SkXv4pa/TP5mr7nT1uDTyktDi7rpsfswLwmZc5rlgWjLrZBzHaOIgdlONutdyyY4OgS6GxtLABwQB3V0uA5XgN2XeRGSUMSE/km1Xqd1aOofUXoO2/9W95lyNtXHau7vCPgQodf1EWkvSh+eRiB68tfFCHZNfK6eB/TDy4MX+Ofboc08+X5HOjcdRx2wGr+S8X3zXI1OfBLrxp/aPGZpV4tRC+RtWBnUnvVOq0O0Gtg/U6E+uf2tKxVb841MFFqgJIOmExA9uMcynmjmidDacnNbMO3Wtyrdd5KmtrTBVr6k977PrI1jVWgwaC8jtQW06ykPmROkl4+cg2sirEj3A8QAXEYyhrZCwdvoxwEEw5iOj20xjFGYhafvcDsGEWmv/eeIYUoEnQEIS5p+oP+koDQQEG9Yd55S7dXMx/Mk+5VCx54UT0DHEO8RUA74z9trbtTo1cBX0tlBhYh6WA3ZtByTENus5sZyvP30/FSNNyRyEuIMnMvUg9mZwTpileCYq/eVd+/i8hQZDJ31caS9CdYZO/uOLZnReRARZex/0aDw+3i3eXinFR4Ob691f6dNUgtnhixVsYK29nnwduR+yl5GSExa/Yu4tnlUEcVo18g1HFCOYnkGuJPR0A4r1HRu4t4Y84r50XtZcqFtVS5PqQo536mAEZTBgF9ZXYQ5M7Ha4RmOQCt3JNpFnKm/oOiyfBK5gq0UJyDxWHVbenV4CXlenwHkIx4PmoF4vspt+DBGuwOMQbNH96G9/YDJamGhRRtl2wqsRT6lgvxecN3Kh+t+GpvNCFk/vA0DoAS3VlfT2oMimOwT8uo1CtVEYtRHcPxGT9ZOPTwtqR8RslKH0jAMKnEDdD4alyOPQAnyndUSbP7T+1qfMIEpe6o96c3dVIZiUk46O4uSRTmh3D8x01W6jSq/AQMZnI4uGYAIKUQckom/RJ9BYvyYR4knqi+eZvCnHBdGph8pIyH/g5r65DqKfDxblni8Cb/bBORk9qHSSL0FDdJpWxC9b1sP5R2nSLXreiZVPgyxnXJGpCphgtT2Ckxc7eEnlfBoz41s+4WkY5jleLTKiuAqZ9xxUycr6L/AIj9WIZv0/3de2A0VSKfNrF6Hk3B5CZYGNPWlFz4o8kAb91Ij8LJtJpU5usTE14V902hgY0b5dARW0RRVvKMHXgNmeUhiyEzVV69nrc7Kd68Qy9EbzOtEOa2x9zDCXjMOpKH5dsAY1dL5q3wjhG3BVJPh5J+0LHPW+V96iVzz6VB7fHoDvRukoNveYR4DzhgTvViE5mjRiK/zysPkmjCSEvFKhwEOFEcF1/k9BYtUe0+C6hms7lI+MDeUbrgVKg2RPtKsegyxvwTL6gyrsM2iejRhmRixxnBZ6eB42hMUR8gye/gX+5nhhODd6ICvRXHcDkI2jhS1DUumov4TyreHyLDrj5gcCUbFmcWeKhTNKvk769+x5h7Iz5S52S7yuvHMQQuNUXyrbu9UlZXanmx8VvVlJ/EB3fMTm098No0pkVGDzSY4QEfDizjIONBmq3WNFpN7tP2UghWPQwycgilUSnd9aIeDaczwgRxLN53Bw1UZ3XJZ8uhoFL/9lFvLIKpGVkZWqS0Nec5ZJy87P753FIOAfZ/YwuTVbaGRdKNpjwJSRePEtAH6ltrkLGYhFMOipcloFWUqz0EG32KD3a1VSK3bwxvL2ICKUhI6I3jZOAoYAQx6eFDATWna7GM8gU0gTKZIqbUucxJPOILP6MZlcu1T71VOuGOCX1jelYPrIARJiR0KS3YSVjE+oLd9j5p5krspw6eJGBjXP3sMRGKRg4RxK223UvKf5FbhpNYcogRzx07T7acTCl2iLT7a9fRe+SyLI7LPEg4CYPWEYGXVvVRZ3pu619rOKBjRsA7wDKi/MnWKI9MIY+atYehNOV4mKiWguRj6lq9E/pYZO6hyAF5By7UTIrPF16ifWTG6z1MJn5aQW/wB1nyLvqETemXNw6bv3u67ibH12JjPDEzNK61tRfiaiWrE9D7u3q9oT53FptaXAzfRIHXAm087xyFPz7k8kqnQo/uSV6qsPwhJvge2+QUP4ZwQSkJ0NBKwIjz/YPY0be4w3BKMLV7gbU3VogMzYHMn7W9rncKxKL0hkIGOn2n5ZmCCzotfz6qx04ptsydb7DuTaolcZfd6H7bzk8BOFhMCS8zGJU38F3376KTFPC8zcuCAY6feD+Vw6VEqh341Jt6qTcBw4ACqHGIWxUpn3cwoRzyRTtFqoi+IUadqPJ03HGL+7sz8xjOwPsTndanjUcxTu8BfteH96R3k3rshb2rnlS38bftIvRqkJOsal2fg5t+DOrrmXQ1NIgTSRcs+Om++L43Sxn9b+7VHBxHY6jEoen1s2uTLXzsIZRQlGQbARj34pI7L5y+wSMBdlimI3vAm6GLGfWc05kQRDsoPyegzVP8N2iF+EbxtUnPC2m2ulMAhH8/YwSXueOGMxM5riwuh76AHk8ClRKGY/GsEMFbsSArT9UzT/dRHuQAaLQkBaNVEMoTgbZs0LqnYz2S+c/KtyhlbWrjo4JJlFG7ll0A7Qj9jOiUVnvf9RnJ0cIc3UpWq059KXiDVz8uI8OEdOnBe3zkWNPtRgac7jj4vlwD2e7O264WO91hsaziXBFDD1LCM4Ddj4FmTv3Td3Zwzv1UUVKRoWV6wEWAuCfBYqZSXEMf00BLdmgE7V8siHx1+uMhT8fIYFX5uBnZ8Ebjxy4cKx/d8RuLiMU3rfPupIX2VlCnE5ETQ6qe7MmaSCwRZb8kuAy8TU/eaTNitFn+thmJBeLI1WWKJypQPd9mfCUHeldZRH07k1j/j3DOD1yYefLsgJCusbb65Tzw0JWEq0dKipbJlNNmKEb38HA1wLXaBIUohK3ocs50Z8TGXNoFRkUVLxVqnczP1UafKVT7y7ckoTrkOz7ldZQIkgKdS2wZuFqKWI3+zf8Fm6v9XwfFVc/reuKmUlNPwGRgbUYU/xbGhtWoukA/QDgTdIZlVBnm1nKx17lV7GNU3Z4sj3/dFIZVG1WL3nmaWMciFHVV5GKzXpjR9Z0LgPkIPOQxleYIAbye5QC8cNCw+uyOC6WO+FhJxOPio3uhx1EBZz2ZshNvZBj8QNyYV6NRb8wgUeuq+3zpRnPpehq8mKvT87LuXT1B+wSsXSnJVJAZ/sXQ5Q+FFe+FyHDCaNDkKleozub39tvu+vjME5vDwit6328Y/M0SRVvJ8EzSSQeySkrYlrQvyXw7ovjK1zUgdF7jQCC84Iyv85+IRqIt6raAP5smGKe1pdPHVQCyVh8rUCK9hMixPB54bdnjaiM30KgfXDuNijRUSpz46pL+es4wtOvNTD8skRHrXF/68BR84+prySrhoLtZulW1dR6Mi4hVeQcEdX3e+LI/8qRp6B5JXDLfwx59u0yXCfM05yKKcrG1Rp8SfOd5uXHKHlx0f9cEnZRIsjP0e2Av/0s//sAm7lVkec38eIS2XnR4RGA7YpkfHmB07llR1LE4NWkrrqHlrFgu0wGnt5d9vIdnUS35cbp0PdXD+yg6uKp9YJ/KZbZqb4+aP12HX+pXZpv8tb2BMo20iNTFYZwzaYclJR9XClON0xoJ6/ea0qdqO/k9jJSe8N8d3cfaFMgY/V8BqCfB/WPN+90isnkOiimpPmatC7jpWCb+Bn6gyr/mDF0NT9dgNkI474WUqdghuqS2c4NVsdQYqHDXoUAA/dhxIJ9Eu1S1+ucbfzmL3QRQFWcsxBVArr/dCqxuoDX0dZDEbPNsWbYFEQm5JISpre70FGEkVOzEU9bFFgUMvBf651+X983u3JVCim60Uo+NCryO5exXnDGenjfocvHLsQKc95ShWhXvFgbeyU7Xm42QJdCkeUX/Q4vMiIiC41pYNcbIWVdXtnKc3+jN95AsD4sn6BiwcrKyWG/KBkCxUmUJJunL0/BUCx5w10HqZiFWVcysj4ilIBJ3rQSD74MX/sB60Q9H08PIZ0syEs1a1HcBdMf+DGrOB0EY+8lYc7cd2BjTJpNebXuW+IL5pYQZf4RIM0EBRxqV05qvqEseC+idAmaf33cLwcnhMxgSHHRXpPYqj9wcSDqnv85+d8k1s4bGLAw+++PvbjVCSOqr0so13MLIPaQkwk7avhaNeNb1Wg+SVspatjrpou1bwF0K3j83tQylE42SSVV94Lo0onq4L6Adu/jsmIBN8rTF5jzqz3Wx4ICafJHAvxA4BWn2RoV4lZSUfDar1xWgALj65RGsfWN6wM6wzLFLiLbeQQFD/f6FFPWa06pZ5YHMae8r79rwuW5h2l6A5dCQtt1kns+WqQ/CYKjI8BkT4B7ZxNFNafYLaXwI5piw9yl0pvW+6JOJ837E04uyzPv+Jub3UhlAOO5yUmUUhQD4Eo9bI51benNjv2EOydq1VKTtrUIJ70d68d3BtL1wHmZ6M4b4dbuyaWwjJXFTCWlESG8fB5WBZsOTVMuG/NdFoZZ78Nhv+EmqOCTc7tnHOpAlBII0ksaSiwTCzZq1HdPR2bweBrALnx7yRsJvJAlFpP91rJZGstf+smiVuvyutFcDbA9ME0vKJTbrSvDWdTRFoTZMdcdwRx+qvc3rXoBYVrofHIv7bGdLQ2PxoRFt3ZtRjjPfSF68NQcfKPItSa6SVwptJ2A8vfbOQ+whuBaEIBbNdXDM736WfMQMKigqFb687Ie22DnXTgw3TJ8tyQNJQCD0psfo5M/i5PCp8pMewkHt1cqozItV0lR2dm+RrDAmM0W/WqXs0W6OFisQUmEjyvVDbf0Uhnif6aHbx+tweE1snALNAs4yzEroUkuO+3SuLj54OEUoWJAcD1OVwb6xnhL+94nl0Xkj4Q/+eRDr1Zz5iOwPj+RGZ9DUV4hfQ5Jsxbd8KpZCx6KDb2c247GHYC9eJHiAJkSNEUp4mswC895R4J17NW1sbihF2wmoQzQA3Pq/FOAEtjggHlX9VdBR9mQ1rNaLZwdnJqprmGYQ7zZsrjp9XiW1smkN/9iSJ95vEyW0O7Emqj3X1OcJZPGajiCuhK2lPVUcz39ZNrbzBeEtpO1RsIEXhQHgx4xonhffcEr/k+XbUH/kBXr3YnBZ807LdCENcyo6sWcT5fLjqoSvIwwIWXQ5KOlPndIGRWOoSz8v9mDvoAIbVwPKihsQkmVB68OUTquCYhB0tFFSB9bVf0NU9k+kCAW5OO7opqulpNyyfCnFIPEJGZ4LFdbJWErSuT5v1X2YbsXxp8jSOO04KSZSUDZGKyOmZYIbR7LeZxLmVQJ5KWNWkSy+oP7HKDXRTHdyoP9USu//wGXdGihkYT+0p8SRgN8kDdf+u7YtsYCOB3jCs9QHZz7LrhsahWU93Zv9SkdwpoqjkfVQ9VSz4bwQeT1QWvoyYiKwT+RFDq2ZkyV9wLFmiBdkU3Bgi+2voTMVIXNYi3kL4Zvb5vcEJuDufJr5DpmCzd2XvIYH41bjNMpQD5VGiu0DaTAZdItVVfZjbS13xu0l2jn4I4kaYOsx7wr1nYG7YYg2bSKfQG1kA6YNfgt2FqliV66aag7kr7DGfR37xoKvOt8HWGXlwakjUvgOa4BmphT1cmQOMZtjWXqdrXVM47pFll/n7LeXzidxrUQgz7OkY1q/Ns4JMReSV7V0R8NsMGt6fdbNApnm8NfIuSu5/ecA5QkSsOobsXsIpQYT6IkVzBa/z1JgR1PSaXqLlFQoODFToJsnzZ0O8K+tBr85dIGRXWBDEzkHdFdUZdEc75MT2XSLDQOgfxpyC8N2qnMjxBjkGVcQwqAIMwFgiLnhYl9S/kdYpK9poVg/lwO2L3/d1zLaS8oaJcOUEZS8zaQDIaNjmtfuw7mlluE3/O4K2OPsGR20biqpVsOQQmuip1uH637crMyQqptP2yBytujWhJWItteFOUmxhHYKGoaEyxp6MydO3hH4FcdJ+fqUIPPkgnQDJgZaxeOKKm06yY7njtYz82ycspyf+fbvBmpMgmuYWBVVHLdBaVcS+xBhDfGot47dp+2Z/2xEy2U+Bk+AjDBaTsyegYJQbKHVKk8OGLgick9b7vb8KnO+Sofq9Fvq3CbZKwrXN3WEMzElnwsdGsAZ1uEKgCCFTsytkFM6zvr7Ew78Jhvsb+7ggdeV4RtMvr+u0Ee6jttAlSCzw8t5eoQDxYfbJrbn+sN/w5v30WC8BODO+6rbufk//dM74VYJzr0KiFPPrzGkdZ+bacO74pRvXK5WM+vgD+6u4lLi9TWK69WLlTZsbmQXPkGUS44JH++q+FAbl7hlGmEwZByRMlB1FysjY0HMGPrcNwH8QswFxr6qrzVeBG/hTCf9Mk36RKjMpCKqVbOPsErqxwt4L2rKGpEPJAXG/xgvwkwBd1iQgEUuaRQeEBxSJa96jfbMhjCqdQzrYyG7drFfbMPywYZSPJwbaHozhdsTN2x+X7joeC7uoyESoYdEH+PcpjvvJkMmuS65um2h0O5ysUf8HZ6LjPXnayh/c8fUng+J8efyxndma+hVd4f7IaGK/VJmw8Dkk+1792pOiuT3ufsp6TrYUMVQtNdG2+17m3WpnjZBfM9vLJe657GXhGDDtW1Zxj7FgqXTUH6qdmcrUyYDuLNH+eshi2F3A/Zeix2uqTNq+3LzCcYrwbd2oYInBIGED5IA+Wm5RmD7P/ITfAwrYE53J0CRs/wSgrSHGps2XuDdt9LLn5zhMZ/C+9R2LSJBAyzZ+m5nhBOYxc1sJcTk9XtfpufIOtaNOfdnsLIqanCRd+lkrMfzHIH5lfJW7L40iay0fGvwDGQMmKWLSNz64BzocALq051Q6gPNQ7/kkiVaYSOBLKVTLI/Zg9Vrg4p/FU7eMrktTFf7FY8UcCNAgIvgGCtAB2OpIM4y6a1x0/EpUD3CK73rnMmOPHVSJt9RFN+SmVj4L05pIV+l/Fh3kay3c6OgkpPPo13AAZ0TV/KGVeJ8NQtiRrTVlnb0YSb5AiLwvTOlcQ1wzB+yY/J5Kepd8TINfNd8Szfv3XQMoZCiUjZ5x1fWFNjoqA15ZvhCKpYJ/LyDX6Ery/SmkhbELVE6xMm9FDFoPM5TIA6fbndlh2qtE4hVYZ+gKAZkCAO0Hs2AcWBtP9shONf/vZ2vk3w3NFW9AIBYI40LxRQ9IaR58puxRCG9neBJcm+7QSQBdjTLCGkVMIDfy+0wViaqyhy1d2Ca9ybbAtubcV5nqf/R80iDdJ0kTLyZCYD0HTs4R2rSbOhGRVWM3Dj6FFHeiwGr8m25OrB0+XBJZykK2suvtBJIrybxT1hyocDuRYkRJmAQkkbxKmkTdS2B1kH3Zm0+UZUTFj/is/xbp1/RUvrYgrLF9oOtMESG/WfjhukNS7grDbwexPYYLWbCd+zi98myU9SnW0WtDmf29tyHnEa0Q/O7qxef/hD3ax9OKOBsh9vWEOJrcecjzRfP4m3VIsmji+QgWwEXk/kgEcWEWTQWOBjCMXgiSAOKtzzfw9IhacYooZEBiwzfjqSoSxDWMQw9VLEOoRj2t6VX9WePDCBNZOmmADrJhAhvhOrClD1k+t3Xgkpk5elbSBbGoq5NK9ndwZabcSkYu0IJjwqhtYYQj66xmlTnEjNghoJR8XG85FA92DU/f0bXqand2JFWmk4t7peOHFv62SWJfr2TJ9pxEtZsgA0AoNS/1D2rn0KOiNK9jG466YQdBUiGGUghBlVJxEsf997sXPAXQi6w5lwRUcxAX6+Gr4I9i0VcZIUGXtdVQDVoXmpIxZtyN8/qU/+Y/5nGxPSBvIfgD1Ag9/wIONEx3zZKECzPQEWfhkc7sroP0tuSakFpq7R0ggYYR8SAgHRW276LNZuH+sxu4DKVGXKAALGDegTRIVHgMPiHzD6NuufPFpAmiOQYYbyVZd4ZdRimAHtog4aQObK7+Jd7atnMhOh9AqSL4rwC/1JxvgqWAsfmFSK2CXiesS/5vSsJQko3lqCbPcB8xBKfk6SRtRMEv1aylK2ec9g4y/eh9mtiAAfDIjNUrVlcwrCcIVXOUJYCLx0gUHKL7dfMAz2VqQ5LNjMXKfW2j0uH357lNXGbRXvlv/lHAnRaHBMzZnpb9KFEuCYx/I//u6Od+WWUAWRWvSgpXjxvfeeXKvgt0GS8QdIi7hYMmlqk8+w42hGvfyR1EmvyY/zXKnxsUorxNMHtb52Id6Cnxp6ojx+DsHyE/Z9ilZ0uRhBrXemuynD2V3Hvz5rGmL97Px8d61zVmfmNpDmph6T6j40ZUOwcbYe1Co8HX1LmJtxvSlF8TWcnLcPf+fYVr9ufwt8Y0VymHaxr8dG9yisqRLvYGqaw929ikrJqmZJwIQOl0OFweNvElF+hM21m2u18PuBaeFTiEGqzjJ+Z/erq1mRMwJpl3z452u7NgbV/7sPreVfYLFUdj0zgwOFWcXnXC8tREMJHVENJdp+7ZC5lPJm4ijqQy+y1QNv4mCxZD2satGQUD171b9oUkWJdO/lxfIZciJOz1K6D5kAw9r2y1LSIJB/Oky+pip54u3HNrK0TX/XB6Wjq48y//PEKvEIeWh4qqD6TkkGixdwNWjyVQm4svNyI4t7m0539iXYMBfbhg3ALXhCz0LF9u25RcD3Pt6R37jpn7lshM7rMiQlegPK1SDgvOkqVCB8szt5FdkhigXAP1NO3ehEpt/kokmFYN8eYfhcDtCq/x4IWnFU3RrI9LxGVfB45fAEXgQCsE1CwwmLeVwe3O2u4vBLdtD8XJ3vZZcHrn7mRMjpxZuAk4Cya6IKlgHb1FpNTN7HuWrdvI7o+iJXpJp9oZQdI283GxPg5lE9jOwT3elkRlYKQ88t4Oiq9sSQWWWsIdW5rKkVdfT8H+H4wxqzej9gl554wwAqoUQ21aSDjKrAQhHahHNZbrBNEC82/geKk1G55j0hWuvKURk6M3qlhIndffuAC8eZmZeMC3rjtMy1FE7AtWIRCCtlNSSTEnHl13ua0TLaDP3MgFT8DOY9nntcdE6mZINc8PPwlfvIyGoZwyfQuLzGTu2oUBuIV3TUFrOA4DJSM9wNirMcvfQrXVRnO2Q8gTxJOF8uUNIFx78R+x62wjV6HNM4o0quwTPOTtA7gtzZrOB2X6KMJIwSe3q7iSla6pS1/Os6kys+mtM2PBZoA4hkWEv5PAclVtI5uO3VeJgdmISJBjxgSo6/IOt9qI+cCrNZLJFWHIq0focoiDRVsVJTN4YGnzGsYKkEHHa5aq5XDAuXO+3nHJ5q4rqcE6qginApKvkO+XI7VwXx6cZYhtH+cyvqYpOzHl+Pahqxz5etZ94t5St4B1jW6EgOOGDS1d1CqGNO73LfBMyT8M3WIjj0t+xd0wBiawEZ/WRjkKBgrz3q4Ch45q2TgdFqcBLUV+o617T85ml+bB4qNspYiKpoe4Knl5s+wyVSk1Cyxte9M5F7mFFYj4UraCKjIeLzlUM9P8robSd5SdjnZRo432jjhiDtk+ZutHFZyJOb4qac015+UeP3C+57QZtonX9tOixwlNs9zN7VZMqTCmkDrMfPbndMWsq3ClzMZ2CWcnMhiTbrUQXCc3kXQCKEDGdjP55wDIZojIY3r5ggnTa+LxADx5n3Nw1GGml+WSE+7DpcHjwJjYyTZugaFskXhRFskDFa27hg2LS1zfh0H4GDoam5MawS0dnr0XrWq+krutdhqlT065NLY+YNunPNZNrVUBugF/94DfEl3Q9SnmNTJgzkW8WMxdFPhceswhN81UlgbHYCIs0ibAp88Oxn6WaEU9McKQXmVjjIshsszhfcSqGh4NYo7KZoPCHX8AgEoYXC0VMmnZPrZH3Tn37aqhlysHuvmyGs5kwEFk9MukWej8v9NDp07u4E9nafFodhXSnVUGhEy9S96polIT7csaM6Ka5vrv+N2j7fbxM44sujN2sA7S+EX7HNn/UB4purHTxxKdBARXD/qnJ0/kuCsfB8afwl5zSWGJWebTsY/YGts26l2nctVSuSa8rTtqLhctmOi3Z3SdIvN00c0cmVoZw2ZvFgKznrL6n83Amv6A5xrxqHuZzv1quYZeTjn/kUC3IKUpdFlQK10VYkIBgC3Enn4AXlgOTvqyTm1bbtkLVz21/n+0RbV7q00NMhkYJS93eTDa0Yi2m+025ag2KV39kAfLVxXSUhrOqrHQ5Cl2JFu2wV1VRUQ7f0sWwj+Eho0/OWrSW6udrejB3LnWWPV1gik9fJWs94o1bPKqmlPsIGPmAE9uzX5xpKg2wwXBkt2lzQ0+K5oDAr9aSZnpOzd5yvxYLfjNexVzD0CO1ZhfehvZ+0Gw43HM5rLJPZyuJpBXfYJbovQpjIG8klVNEc0jC1oQuLIqmEpXMNOuHEamWr+ieL+eIHQR4CAPUUoju3/wS7g13C2ZkpP8XM3TE7VVOaZwCB3hM6l9Cvkbjs08FP5GVKTSvFpdVhtIF+YUjtsiYQhrXEIzcwjyJYXQYkMmnxhjUvSZTz1aCVT2tpiETMWafE8HJnvJrUjansyXTCyqeozxwuqLg0HpOLQuf7KUa0Nkb0OtktxXu8Pt87RbzHpEBY7MwKBXDFpseCSLUXKPqm/pK40LTZeiKiKhC0/HEbXHFexrvt1Qy+G9aVHn6uylcNZ24pbbSV3XZBmEKdv0ecmkadApdj8mK2bY66z818wLfKJS9HxwGeBhYScRbb2bZxiPotKvR+19JVLWF9xprq6fLqPu5l8xAjyTgAUumSJtbP8bYWOUDvJP89fDpWATXbjgG+DiAqyLMlTkb1GHrk1xbqLXs3VpVDUJCC4uYzPvVXjGu45j3oTLp1llXazxDZyP+QoUp23VQCDOWS8T9hLsu8xuZ2orUM6PzZyRIkiuT+PipHagMDOQmVy3nd9hfJVIYtEQ6/NAfp1fcmlLE+Y44UWR3rbLGNn0Ku6juS0wePf6nAJi3nu1Pr+TXi8eX9fqigsSQtLXyKltSHiGDzmxXViUL8DqOX8EtNL6fS5J2GSgZo3JMdrzwO5JBCXj2l8VvafFZZ0s8H+26ZwKs4oavTHZvw6pdf0HXXEbBGJ/h560tznWEG/6YPpR3l7rnPcCTGdJE6QIEvvKgphVwTIT3+UzxoezJTnzXIMQnZ27wlAzm8JR12MfY0Ft4WsFYI7zu4G4OpYd17pIon5kROd1Q8vHYyftVw80tqTt745ikd+2vR/HHBXSnuQYfhTk1Mw6IYXR6GDaGMChXVHjb1IeHS3XqC7Wd2MmEsFcD9sGJ1WdH/unW1t5oxab5SkDCDiD47Yn6zKS+QGKoqSTSwAtUUtpGLFagQ+jRAlYIIdVXRzJUyv8HJNizedgj9p6osRdQLKv6Gd0Wcd37WYDlo24fUDDU4IGJZaZAteNMyTJQsuYHosBptvC3Ir2i8ULOcST7D/MzuWq6TuKaaraxmzP4zPwYOYqqKNovoWACAsdqS6DKzWUc5KkyMVk6Is7VQLkterr3WdrdNdjk45hw544TiVL+efxWvWHYnmESk/5ayd+XFLACFg21xj/JxClGEYu5WyWI14clffG3h+tmkH60vyqyj9cNDEgD336024k1AHcYIs4J7ZuH9VUfP4xC7MYv46hyZipJqk//0Xp3a8mZ0YhQF6jiz89MFc1Ve5jhQjUW1/alz8bjJskiGgmJiCz40q3o/tMsuEBZ6V+ln+5Qg7UhhYo3U+QaqptqLoGa2f2Q2kga/5J48693dE9oYk+RnIQ6ikNb6OFFeeHEg4WSizB0uA64s1AWPa4FaT8DwBwJH5L5lL/36hRg6P1n/Vy03GF4DFDyG94GZXuy5QdvwiDOLOICYLzx4qAOSDOoYtszER8pTxMkoBDJqOwk10UN+OxiQitNA9fnkEMLL2OHG+38A7iXVerTcmxROqWm9xFKSxISZhyKXIF9QnTsL/EFoTxpTqKxLscnD7luO697dKFmc4rLEOwaez4ahZVrMmPRRYIlLCPeVIM5wsg3ZEybWRqcOJQu6YZ1cYoTCRNWjf9sW6WjekqQzOEAlY1xPwVtndczmwJrXhxecHt4nMSLCtpbZ1Sv08S9WlRFD4qZnnFSUx/nbVq+30w9rI/w0yV6WGbOSq5BfTSq/eN9FOL6chC4W8sg1RHrfBwDdzv3qAc/SFVa+zNxg5z2LPCbztwJEY5/qY2rZv21hn2/8ujW9lRQiJihhJvUjSQskJSfZkaVtu30uC8NREvhtSw7Xp3wp/PS9Z9mcqDhGMmb9bsuJAv7K7ARo0cRBuA69pBIYUTzu1Z9RAJ2Ab1wnMAUNpCP1ebphxuzDSX0P+s8N5ODSRuYHOqA2bEJZlvjJFOVyWQqcChvnHo9Komtxsvld4fkqXRhT0DcwSdrjkGtBwf7LEQr+STjsuVdWNEjTsMW1UA9DexbZkdCReUeKUXI5dt4RweYOLEaX6iwP4zSAKjVXGMjzLUuLqEnGKPQl0+NbBYEqRXJk49szQIpmBD+m2jZOnS2cm4tWhpkheuOwlmD5gk9RnUelZJJOiWMufiRXSCvYhVkM7njsm8g+p0Wt9y5D2A6k9GU9ht5fvcQHntZNthVDIVmKqSDSdZIn41+ngs41XmPZuRtGGnaVGvJioGqx8KJZci0qL65MIIRAfEYVkcuKb02CrjyJ8SzPpy1xkohuxbewQjcifRQxS1ERyIk5WaPtEwmKXEbuXtwkliEGEhMUjn1OaBbzARGTejd8lR8rtkpLNwjYbHn2DpXLzUcmj2dWIZRTQZJAtFbW3CXQaPqp0lFAKIbr2O8p9Y1XaHhlKE0KGBvzdqk0nPsGAz9uECdjY3J7XD8LQzOn1ddHor99qrfixb81k3m/ekI86iVd/jjEmKKvP7eEqHKmb7NiGIMaJahihc/XLVQzGNGDU9AhYzSWB1IZTx7/gTAnAzRL7RUfDGLUE6/gjUp7nKhUiz7ix82vkYcAAWNFDdUiRSN+Sd7l0BYUrwdcm3S0cAb+0QiKQDiC8jU99RrTA1mmVsU0eoze9Yubp+xGNSpPsYKu2DUL/0g8FO3CMFFSMcp9cUm1+j1mjRdcLpbdMtasDFAZCeY9fg8gPeZCUfimHOEVYI8Tv6S95h7C8wVmAtJhedskgbYrZKEwJw63dRyvW/6qdGDT5W4MFGoC8yhB1zpcYglLCnwn+1LaRGFiz9ns29T8bv6y9R4iJNqWm5kkcf/di+dE/8ZdplFSPOHxdJs8UydxbgH3JkCrLYmZuJ126z+G9g7FO724eMh+nhCbsNSV4I7/6x1Co6My52SP706+UfF8q7Llmji51/1Kv5qFqll/p1OyLhj0MiJMcP1EoRJizpO+u/klpp7ryhHj7MdZuw4x9JntSs9hMSRv6O+0PfbolAlrCo2ooKTzy+UzWAAw8AM5bauWcF2KAmQb5/D7AhEa4tVeXfJ0jcENWBA9optYJZe2tBeGahRa7Aww44S5LLBl3Mjh6yubXwV3rd/kgI81uRUklUCP7Co1XFE8zselTd7/7pMWA1QBq8pJgM7BZGW20xmJEMC78h9adul5TA1FQN7eN2KDQaZErO08I7WOFzIds8k8pTdn4gCna8/PU9+BNAL+4x13UyJ8S0Afxva4VllsJPsi0LlXeUsOO5MOGHgpf6Sg/JG0Nt4WGR3Uc7+4Nu6vVO7VWlvMBQuhvLL74lE+0jgiEhVblGsl/30DuQ3lLW4rOG8IFr0by3dm+1s0i0fE48VkC/LKNI36Qq3QmNhDPMrjboM9fiQSJmWgJZAYGmt/SjCdwKP8fDxLh1w+Rjs/e8yManJ6IUOKm5sHBHFGASSGtUsSLoLnNuPUg/wwfwDYQUuya3NiCwFZdFkTpceCSfaQXQnDeUs6mfJo+nPOIHDSVJIeTO0jC2tEsTE/D5lV5sPlb8WEektqY5MbJNJMYB17p2YfjJ1uMyG1eKydJwkRfYBeqThcUv4FMmnC5oPZzODmCIHDPIBO4lNcHqJVEigvWb8iHBAB5Z+ElkChJJ/FHhmC+Ya4b61XxSZzU0Q8vfIZfo65Gx6MwKn92hZV9ex4U9ZRPV3ictns5VdfxgZ473/fx4QPPfWCB/XE14DWb0o6+3gXKKaq0HFkSS/TpDMLTzengGKEWt5IKPnPKRCIUEAz8pSk8g7aC6k2Lo9lIo41JD+PC8/IY1GtZ/ZeuvTLr47C9TJvfhhgE6aezdHxaziYOXzgXIg0kru662xHS91pBdWlv7ganOWFUzvooh0dTDJ+LMWBgIXl9cmH/4I2zHmnCUunNU3+bPg/8aoieA/dt2HE5MvQ7Efl7ymZEQCB6glZgKIqLoO4zxBBrypPiZgsyKx9Rf1BXCxcYmOcNCvIIhcQdd9vEiv2NV+vRd0AjZTqGNbyCHXbwPn+MEll+FBJGwOJGuuuDZ5mKbFS7qM8vki1HXrjrKlbQA6XiJNqSVlRWFT8p4QuVT0Q1HxTRZHNTvvEULfZbOEoyNtkLjT3X+mLntzyFls4VsYtC+p+BewtJ4QNQiuyPXqqZ32VpnomCmJA5lnXJGHLeaEmwoIGXWHA0SnDK78n9pnN4adYNdEbwhXayRf+iTGnJcAvoZ8N4zw8SLNjaDwpeftHjVkXY29AY5uXJmkuRrvykcjRf1SuNmRsFEregcS5OVAUm2WoYMw4T4rHqCkR/v3btISm/rLVr1NvVe9Vnza9hjRWLxG4NGDaah2G2fVLAiwjndYJ5an/c2a4oTlgXfX7SttS9wiW3VmlRKm7+SlbnLY0TARdKo4MdQrfslaC8yEdokyprki8NMEpKJwcQond/UDoxSc5w1qJHSo8FYNmoBAQ+fErn98Quc2cma+dk5VImfAEXIZxsjaekm/vUTeF+KNVCzSPxWEUkbSuErUgUU8MJ/LHPvOj7bmgXvoTKE9B4au9WidtXxudAgXQnUferXrej+IKtMfVqH//epOts4TXIjy+FTbJzIhg9ZonBkN1vmJ0F5JoTc96l1IVIF+0TmiLuC3cO7BT4Bym9wv0QSvYDKyv6RV/LpXRstgdChi/yU6wVrJi8JC65UkIMOubCYo44dCuM9Ia+Iu4yYBhxZiKpraLJr5BnF+mTorZUVFxoglxa9H5W8byPUCRo4JrmU/xq7N3Xm/Y3jQXF1c9RUm6qZlv9ImwxMm6BrWCi2gcU4MHhMPK+ToFJZ5+6f7qL3ov+ACjOTAMYbBKauO4WyrIyKwSHYWQd6vOxMxr6JNkUDCiYqSucerp0yHBXZzsP8gw0XE0T1Kftpvhr0vI7iIANoAyjzkGGRI5vdHQMb72eEvMrW+YX0QjplokRph68ITvs2gI9NjkoV4f7ZgAOjcQfuy2ZB63VlnS8S6FDcdMSu7LjTdYk7t7euaW67H3YwUE2fpy5wqfiXyrGP+ZDR4lx26BerUCwCq+YSTj6/1iF+TVSzUozN0/pyDYf1liir2LQybjy+T2p8f1D1DgvuaR39ZeR1eq6J30vSQuq1SNcCCMGFnOOUhcQ7IF9ci9LWDL3CZyA0Ee/A3t7kRcduXpdpFd1eGJ6R5uo2bi2CThnhySzF1yrnMrRFuIMwTS/EEki3OIIYmwyphh/EIM2wnOULPvKrGft8dL2r2tEriAsHJB3sDTBWfdgSmd5UbGaM4qjjkD+YwuElXORSFTEMCyx8NVJJ3o/tDN/ix9AAf7cUPtq/HyuSfPv9xx/pr6DAgoZC68j3J3RjhyziPA3199DnCACL+l9fN0qWJtU+n5rw3xYHW9VtXYhuGPpcSGkx0pPWWYNR4L4aHnZdFnKPusKAEbp0E8aOeS9ZHJXE/UuD4f354nROTLtALH+jn/i0WQBsAvgufejNy6DXK/NdnNq++lrLZHL7TtAr2/NweJqBUov4iASnYawE4ExODhe2ATSTgrDNEyFZS7Zoa29Z/gBDUv4SP2onf1J5ucRCmiWbesTlRSbf7VV7YPMPWiCJfZ/qrQCeY4V1zxmqC0OBYicj1AeC/NpuNixF1LN27UKEBjN5me9qhez2wdLSxx4KJMDV0lRXP7cRhxGLCeNiAwWwdc8y+A66JELsuXQNb0nKgpnSIx6GBqbjkHlI4z+0juvT6yADnpSKIwuiGMowRfikW8mDZH0hDEVfNkKq03OhISTktY659tdSMES2D91MxI1oNHUNvWAPP/EPvM4eiSmaGMqJRl64RLOT/nPYyXJq2ZKIEAC8o5DCJgs6txw1Og+XI3lhdSWXLCm5BVkOt9KUm+nUFWNseGO/3ekzjjSXmuzowZGfdmgmL/DC49C4maYEy94f3OqhOtASzx3cDfOk1dBzfGvz1KYVTdz+fBPDZ4p7zQM0msULruiH4qkBTtftr5bQWwlpahAwGDBX1z4M4uqs6Petyl9QsnHf6YCg15z/N+bLbsCBa4XDLoaM6cLPdtbScakSBMM63XBL7lEVUo9r5aEE6WCFTnKiazBMBj/I76lDoPtEDUHi25C+UsI4p2S4TIkH16hL/U9lq+jTUiWcI8+4Gz5orI5/sWklikJcnIYMrVQ+WsOvWKMnmL71lRdA2nEZA0E8YU44WqrCxUXxuMSbuC+lrJC/OSU02m0DQ6s4HOEV8a3TOKXKe0eb19uFGDOlpZxQ9Zb4zlltDf2fGXcvLcQoOHvS33fLJA7a3RcTsCF//WP7eFnsTLIEXHfu39PmvrThpApWtgWxS2xVIv3W+7KYwQBGYOL5aKU/Ozx5SY+ED180/43ISiaG4Xz+p0N3lGYlGjzGOfExoxJopXI+TWFqHfBccPaT/iT3OObl6GU/yWLAoEVG+mZQhmq54RjipBrNo1lX5NBDnZNZHmT4q7QxL/5+0CWxS5zqZnfFYUleGMtjbH0hqxY3jym0YQVVwa2Jyxka0uxNCb99XDwlTUvZ4u3ic/E5EZz87nX35M0UZDfyrkqaOjFkp4o4sn7jL39Yj5IFMpgE+lLaH85L5EJqT4lPG5s1NnSSNcPiq0YzJPO3O2YwQBWyMmv6wnjfjhgchSD3I6y2V6Nl4X61kKOit7nTuVLSh/uSuRf1vgNen14FuGwiwaHa10UIq3sIhxI9y6CeehxACb6hQo+rb+PcvJKKAn8wbObwyFrspu+wMhoNenGIemhmtWfUNnxaGXiv2+4HF2MXSsNkYNKVgEDtk9Au1CEZ8UeyYQeXIHZtmG++tSr3dwUpwOsx8Wj5h0p5ZQ+yCPv/cmusRzaBlorVN0wXT8c2iA7Utb5qZghZrf1djmcBRQYzyoFjtjnZYXt41kUVO38pMCwwEpup1zjeEscqPozEXiVmHQRFaeHeLyKLIT5erKiXsTR0NC8S+lDUx60kIl6HcdGzNcagrRaFrUQliS7x0bjWByahaPUh1aEWaDxgkQ0fArjuF3FSUAmPeji4MlCzUmUpnJxn5jb7+06cbJab1P6nYub3I3dfRBTPHFQ32XIyvz7w99QOTIcOeRyOgewc3myDFUUsfQF2G8h5Tz045iQgcew5uE3KNUbxZlqV2InwkgNcFJP9MlbOu8HYGgu5eMKCBndv9wle7fnXDprOi1ouu6pcMA6MxG400FY6Qsxx5GhubSPPgqtqkRfSkpiX3w1XdNZJeCqzOI1CAPDxW7EFB8KwnBt1YO2e1bLue++aV/12z4mpj0IAeLwGFpHTankh2SmlzSoWZc3xBB+soZEXR34+94tg1nNMiqrlt5tAZFeQijAB8wlMhEoHydL0mf0VI8uHszvwma660MShVTJ4mYOZ3elkRaA8SR3e2L989zHRtGhCjnXXWU78dySKcNd4LXZd9Us+JXXWFZKPFANwEq6oQtTDLnHssfFrgMXAir8vTN/kJJu5RSnEXaFX6fLGQutdtolS3v0jwjGJsZNF5ZIpGViaYN6GkdKYWaNPp5gCPtkcQ9Qwt258IjbjEBXe3y8inNXW2C7f2a2GNwSzyI1ATpDxnAg+9opGyE1A8Tz4fBqUfehMC2to1YJoO8bniYpGDqarM6pm/BBbYBSdh41KT346680rE//XUHeHRVJ4Mbc7hTe+BdZLY0U+tl2KprQ+NRlFEHLSod6NrNpIlvZDP9eTCmVc5l7xYEqtodY0fJZtXFsAmMvpfTywXCCNL17q1VJmJnBIgFcSyWnBGKj0JzeCgsENL8b2qFj7jQxpktTfrPxsy4DWLms6ivdJuRXOM2RTRosld59VWwOVfmECFdBpA8fiZFc4pYtwWE0gi9C9Dho+7F9UYHlE8DZfKkk2JBSBJAVCK8JXyL99S8vKbVOEPcVVs1TADuK1qVeZGwWs0lf5VeukRQD9rc/ZVsonjqzFk5CjVIVbqK168a1kt2DfMicEZRKHLVN3xPnLlk2LTneMjiNtVedZdDD0+7OKGsQGso1dIA32JyoWtlHNUqC01fg+37d0PwLQH5Epdn/Okp4cX0cb0DjystpYaRfMVYkzHR/y3xvKlLffFJUWrL3Yeba53nDhmOHOzZKR6bXAZLDcUc3p2fjN+0nXDXEw45KiEbUvbbyU8CmYkbJwATCi9KMDStK2KzmFcqI0P6Z7PZ7spV3MPuNc9ySYcTdLxffQ/dqAJ8P/vmBsHlRtQnv5rMXyjULcZhbzAA5ep96utZi3PFdX6iYuPfG31k4Pi1nhmehecvKmvwQUe56u1n9aMgLzHz6o14w6c5G8hkYxMsnd9KLYhaFl7CJqtQYjEXEbu64KR31JfgEqm4oMD86yxajsXlu5LWKnoJIYN5Qj/z0nswGPvP7zijJ7Jsz/5y6EuGbg891eOtIfSeBW2lJ1byUuucqUkTyUJ623yk2/nV6WkU61kTNtVJS5uSfSW2ytnEkAUNboRBcraqtCHcJmmTurgZicessVp0E8rt66q13EkfN5wdTvNL9acjYaML6t7RJS5y3yI/yz2MvsrBtF9lWaLGGVAstTEIJZCSwOAdd2vBH4p5MrjEkGKHAdekmOQlLJ+ro/04ybSN3nf/ASGSsvyIMMtnC5I83BT2InDISuT7sQPeD6YhU9x2PnGkc3pvOxyO+YgbMnjovw6NlkS+SlwQnoeR3vVXho48+5QKW21QcFMNi74MRq648wB7tAMEGVJD+JqnjVOinQqChKOQEOekulOFLh4c1mOEhdxQhfnZYAh5yrHTS80wRpbb3Agh+QF+pQ0Iih4GfrU+Gsue0tTjJmBal+LSyhloJfDHCq8ufz4cuw+9j9tGUbNB8Ni3CWBIjKfUGqWKFJ/9zVdUxFp03JeFPpIE/VcbgpBoTzr6GQc612oCQW8Wpqq5ZysdI2gPVfTnRSNjSRNFSKIn1Nz0wOCZsuSj63cjsfdhuQC+xHWso0aJTL3iQeB4q7BB/VY1OCK9z7/qns1n35CEwhhOFKshgvZGg8KoxNY238gIosYBSpPBwu/yQO813bCtOSxGNLinKXNU3oq83HFF65dUzNSBkApFIP94ll3jS7dBU10SEkFOFseEhxIZPebOKKdOT+rhPTXwPUG+uzqYhu+ntSF3pBHr6R6BEkxRKokFSvsOim1ON4mT3x6qE32FuJwYBD8vnMfvVW+Yfy+Kcj0Gc67Mrbqw8RYA/H/uMBorcthJBaI9sa8a2C8dB2fY+aMiKKr3mLd/g4pOMT/aSCoeJgvguLGrEb2Nk9MI2yUK1fdRVmAA7TNaMQ5PcsiBJKxnM/sWL/y+GYNbcN7tE8Qr8tWHJd67lpTjO2Ju5RxQCw7FyN7bddhg7A2Sy9JOrPECCLj+HG7dW7m64KJK7agm4dzrJlLphoNv3FZr2I84JC45laVT/i7Gnu0r4vkjtWriRUOj5+uyUMkzhh1wEekSS5em84FSkdfqzQFNT7VkHfJg8N6DJ9oB7M/GddGRZu/mCxRmXrG4FqruCt/8oMqmaTaI9XGTznjJKBC/wOc5DMuuOFANAxM0nkQtnUEf9wBUlhJWu4QMtkCUSPBQxsf7/Uko8aNuAhJZ2f132pt0V7rkBOBzYd+i06AxYCcNOBsUvWssoytCIlMt2G3NRzmm99MPvWkOc3OL1d8tJ4umUBIL4U4tSP1dCjPvIJQlFPEktWbcPe3V7GKl61OV4EkDICoDG2hEqRAhV1x8xOJ/rjA/HM2Y5/mBFT7j6ehYlyST9TWIwjX3mXeMbbc4OY1MmoOe3V/KxlkpsiALAF8Yv/OlSHqrN0j1wIMwOHll+xGnPWssl/JntGm6JcPakEiDso06ap9RFFXgABN/XMmG0wpCM4LcQJBEa60eeq+72URck/6RcFjwqbZn+8cZy4oxm8Y7ZtUhFJYdK/BtVD+5NYwct1zLqPX9PM1/JY1qPE/aLZZTlsSBRT3gDkgjJdux+6cNRSMomW5dyfjFQZtxka5DCV038xZj28zFN9jPgP9j3HYm88HfoN03T65kj6KfeWhnIilggpPsmTXsXh7Ohzkvp+1LsdX519j+oKvV8lkTCr4well6De0u31I4xkFIkbA9bqiUJfwjhbJCyvF4E4dBX+kpZCt1q2KZGqjXks1F3rKHbOwJoJQFrYtKt0Py6LOWiHVSSeGYnKycjZ+AyrFtsevvb2Ha1Dr+GVAX7858EvVGWAAfOJIFS4rTnsNseLszYexB6oGL31macF7zu8MIOQSFBUVZg/hUYSJKtqG5gYVpSEU5HnwHAkAKk9t2MVtuQaMGloREivSS6PML57MKrEZ2llpKnaZ6CsPL9ZKqCDnn0NMhWLOzLm3azPsaQ943D/qeP6zlIg8t9ltfNWtWdBt6ai/aLvysNRJEgn+al4EYEgJcAEl992nvn7NPNAR0dnXvGv/w7hspkRovX1I66XSgN8nrtcsBNuusCoMZNA9BLJvAoHhCgUUXQfWrDCC00Avy9FtWk12FYSRhotLQoDVn+0vc2P/1eY8+c5wvbX2aO6V6wMM+R3QxRWYN9r/QzqRko3+xbFd9yaZP2SKnTK9nNbV1oBJkWMHpnHyA6LEueXh6dH6kbmyRs63+9ry4bjc8PFffGo6qmtHns6X1BwdR/FUj9m4vCC+cYdkwdebZ+DljE8gtG0nKL7DD84sjOX2CqewxOKr/tNVME7UFRJkiEhevaROjx3P+ROLxIEEfZ9Ie4LcTpYDc10uDP6b92jkdrPuu0bJgHKXc7rYuifp4t/QwzLBolgHtD4uc+z+DbxSKcEDdNwuwgSJANdfYiHY2k2KI7pxu3Fzh03PC32yeZ55zvNhyiAoNWMYYEpyrPPgWlJl4f4VPB1Tlss5yQZQcjZbPJRMv3gOLJZJgEWYBkozEihn/PiXwFECJ/jgeliC8OdFhRA350lOZ7cCnKFRzOehUHGOS0RFYBNaVAzq00/dq9MTHn7Cw4dvh2HuyZ15qGAyk88IKAcozPGVyL4L4ko7A8JTljlAbX5gsISzLcsETZNPWdts3Bb0JfvsQcU5QY4yXTh/ssm3D2oVeOXPC4MJmKT1jhT09CdZObz0uAkSdVZbUybpOL9twNuz1ebzfsNQgqEfAWLee3/FnYfXu+U2Vb+zP1rB8G3E+MSHEwkXnSl3gLNAA+u80r7Fgb0zz6KX+mopWcDdveuB1zuzRcWlcvc5qLCIZMhNCXs3BuKNTAPbbI9qei5EpqBjdzpnQ8zGu4Duh40wP+HjO6VGK8Juhe8SEji+O5tNaMVJ0zJUuEHoLlFvGgP9SrtS5A5qACrZnLvLY9GT1K0ZM1Mh14ULPmsVvvUmg87z9hrSmWcLrW7Q2ps4YySzrBsGdGWFshbhGTNHDmh+CRioqXQxI/RtrHYWuZ/j/g7yGkdlW8bKvnA/CH5BWRPMLKb21lIznHDtN57SFU+NYdnlwzuMvQdS6k4N0UD3P5ilkZb9CK0AYIHsBJTPRuXTPWmjQAGDPJt+rfrFa2f42qAQRBvmeiD1j0G3EmI2Njqtyywl8ZC2NScsycqtxC1lgaPDE/dVKzF+uEcyE5nS0UXFGFXKTr1YK6Kd1EJ0P1Ayj3TwgSzIr7pPwu70KNBoQxossoP8YxoHCvNKF8N2ZdioHZ9eTMDuVlwXZg+jSTwL9T7+g+PiNUuh+SCTuTCl6Qpcf0eHjC0TOuMMVeWhBOQOw2tecT0ebBehd010cFmLrkBz6gG/Tg60pINUu1s2utlqa1mLQttNgts/hYh5Fh+ZZk/wakUZGnVjA4qyVlS2AfU/oRlrDFXpO8mTjimia+VdKcwQaBUWb7ADtEhmyq8yx9VAgMtyxtW3/akZPC7R8VZV9vYrpENEouN7rIDrLtToL+1O7TuVi2LqUXOQ/MIg3Vte6y7UAsRJKRB20qJgN3MwLXlBjc/CSISQN4j6A6UPNMe292ZheY3ssQRWvTreWFchO8FypqX1lFx58D7aRNsqP665Pk63SfobRSI3w9c8nry/DLKe+SvuY/8rPxZ4pwIk33fEHABbZmxTWbbqexkOrAv6zhMjoZNnuep5SOZdVl4on52SfLas6h0FyCl8c55bkoB4aCqQTuCHkOXVBv0CiPsBMtZYGchixy6anCEL1hnBISspzwBCAAJcZtuSh0JLbPhZjqMmV7/JBoEhGyDia8HU964EGADjNMxnhzq+03ToOmIMzJyVFzm6lu39KBJCPPxbP0Ek6yjX0oP4uM2Ssc+37VH421DaDEhQ6TnxUiVbccof34tyvvJfMqqGTAP13w6YHDWNnuYuHjf7kTALvUly0iBG4/kgrWMPzLoOy1lQjg9+Gx1iaMtg6fbZPV2PD7KKbX9nBq4kdsmAbXFhQ6bQGTpECfZPW/ssCDjr/+egpwNpMICzMWGgB/CQloYkVmFVTn7Nf7dOrFLYGy9FBCzpCUlPg+yyEUquX3xu4bifO23VfnXWY+vza/XmEEJPdRyATO+kUdL3vEubjNGp9UHEiQezExhKBgQeTd34ZJtQoiU6FJ4dQjhK2iTIHQsbmH4UjC1hr9YMXT2WdsByYmokXzeF9DANAfaTNQXkpvIs3ORz/PhOdtJ0swpoAbMrPr6YM6CszNlR5/we6YHCJsUkDTHxetEZglRecBtZTh8T5+UYPRaDC/pcD5h8MH/dxmkbZP0/MicElKS+GvjAhe0CFLFIXZaT3DW/bCU+OktgiRwh91Xo1VsR73rXkYleMQGm3889rLQ0M2blkBnlaihEYrp0OJxpH9VpKKmTFLGNgbxhJIebOzPQ/ujefJswJMHKUNyPFwjj/4y6Jm8N5vAevr2voDSKMGDuQC/aqDOaH9kL5dMqjQG1RxphU9tPt3+KOkFjPsZcXMoXcEd93hizoAyqNlba7uLZa1jgYw2AU8k/a7/kc7qD/fAtNmlLxdjmwYrg5JxD/1EChckHhssEOBuOavWk2e2GCPL1F3kgdMb9Jk/9+VgT/D9PwKJmsPz0/XEo04WTnBGLtsvaw2+uXQs4xXHPt/IHrhKn1X3UxOhSpXz45NofoB+WwpMZREzZw+LUU7JkHFmWirQd+boAIWLMRi9Xa7IY45Y+Q1hcXelJlsHzedTGW7GybHClkXcwG5HVQEL6JvaRH7pk+iBFi3iaLaWkFGxf1EJO5rGVyu4wV6XkmkOLJVqBGJeTVTFBsizqPVwz2Y8VYE6Qxmk+gMMqV7UHQGynj4mGf5AWpwy6MJ8tVUHHrDn1+O7W7DXvnGfmuAivge6uQpmMnaCBQ0vA2mnCx1ZFtH6ai8lhMuHvFQdV1pN2ARdqzYA5bkKF0HH9v13Jd064Zjy7B4Bva/wAbEgo1QhvUiu3erv+FTVmWQeMrMT0fv0JnYQGtfNTP5L2HR0q+zex7jLd1lW0E9GAZCNv9Zd2zbeOOsr+ufmZvcKDoGAdFJZFOTngkW094rwlMI5rCZBzyuN4acJ264zoF9idn6MzqNRAZymDQ6964yQnrtp3A8BjjQOkrIBRn6N71Y3fw3SWGdlLDcxD5SLAcBrGGYB6FohM+kV5KAEQoa1bWENs7y0yDdFzo/zkC8cL5XNmDI7NUBNZEk9kBAWur23xoSkRIKpbGD4djZdBPTWkq9B+7zIUsaXamNN587b42mt9p0VORjgt7yZPYhWqD7GSTpR7aFTykWkkg4+joaFqzwKCTSqJqwI1WlKw+mts8XdOacKuyyKMMxdU677Dv8PX3bZdL6KVmKWdR7lXmWC/FaqaUUvgSK0QtS5wmUitlMFcbNuMFZGkuyS/7ZZjoCLrKt54UjWHBj8vfxdDXVqVD0shKt/frUUeKflSQEShAzptaM1cIEDYENh60F6i1vbVT8mufRhorqURgGJiIB4jtxokQ65CQzucpGx1my/TLisxfxxb2fsGk4ZtUbIuzQ6gxEqHhBgR4sd7ohW8iPlH7JaBnJDailVimcbPZrBkD7XMyyVBt6VpXiAvqvRnlxJrmH+cz5G+6EegyK6S8MLegXovFeygaaIlZ9GhbJurqEqM70ZFRbiQjc9qP8MBQRTpUaGL/g1zwpjMT77jhUgD/COR8ZRZ+ZJSA+1a4mn6oadVUprwnhipfp9aqjNaScI/JNkck3Hf+ZhR2x2dfJitXhoPtk7XFbGoV1EpPZwnOQWBeorWVEgGb+0gcIQlrOcJSkh6YGQg8mppEw8aDVTx+QbLvXRTB24N4igY3rc3mkA8rL1zil32D4Ly20NRumRN63MuuCPDTHbeEp88z2BG1TgcVcjDDEzN4FFrjx86UEjVj+hUjf7sAUwCJJBfQ5CQjBqN4GsBnMxTAskqrPnceCl0+kOqBTP7iprO+YwhLA5YxDv62eOFYCFcJQHCerUEGkUHss6vNbdCMAl7Shsb1+6sv8g9i0PBNFD11AR7R3AlPQhENYTRCM2B/I57lZq3U/PxuUebh7K4lhkUGey3XqqF2MdW2tCnnW17PEl7rrFIjmj4/s/0YY7yNSy/PaA/awzjzuwPykS1TTgRXxwal00Rm4b/A3de8f/uCnMww314eSbIO0wm6GPfo5qZo5V6xSAgm1SiqMkNID2QnVjOixw71+14IPLX3oeh392PmYbQTKKZ6pa7NHBEzw0o2H0ODLw5eBtwmVL6my1SNItnIG4JF5RZSLioDie4ncSuBjzs38YD9fO1DKdo1VZH8YLEOfQ0gDd9hczYgTSsvLKpjTqTz6JGhwpelZAJS67gXKsVOIs1V9rWrQLYqDu/UahXM1kra63qI3PwXHDPrz27Z5unVk/NvzKOEqEwPA4EEszU9dd7ofgZ/3C+VibUBBBSi23eGiS9g3vRZ2TChU4Ldz0/9J4d/btA79zRY2aly3hKO+So6deGhbMPoBUkihM6q/YQbWe2JkDdbQjzneHiYqYz7yKx7J4iK5W/pps196kuQ9Tn9I+/9NWWbEWHJvqgHqWGzY5e3UKupDBzI4UdQQqILnbW7aIG7HHsiGQQk70WeXNhzFZRbDLTdrKnZl4J7vpvsG3bDdLa8osoP8W4Kp95u+SwZSHsbwTw9BJkJhuTtu1jeMzAETgBsdvyFOmePxGDHXbmjuamq28V/+t5GmvGbNmBdj1qm5K4ud070aq4H076AHEOHhvH0GU4DCVs34PXRMMPZV3yffyKn0IULP/VDUn7UqQUXrvcaJ56fZeIyDCgEYyt2p8WtFPvhBRS/i1zTZ3GU5MpBAYHHifGrKoa2OxuH8UwTqbhFHAYPdyOpxOmEtJH92SKZTucrw+GlgvBucROPzrRMdyOKCIMca7+GbXgHmYCHkSDZc9BIuyoGH8bvS075IztGxGv2HcXyy8lzZldTrikPl/XJ6azYGoU6UmXWYzQjoHDJgN7a3w+sqWJeFqSQ1noJGmMDfezAnmJ3GvDPjIlZ//NSMf7G5+wgHn1GGPHTTnNfxsBRPu28A0WERMbCP3netmp2wHI9ckoVzQWy+GEIoQIAhjChVyDyHzntsWevp83XkVfwa48NhzNx6usCf8bzWoHNnOig7NIMmEwaTfUNrqNXYTUoyHOu2bRV3aJJTyTQqrK44ifrihIaGP0/+5fZaqjcqtIRkxrf6AgW6/Zv7qToowOvEYMr7nNSgBauEBQup8SYpid2LOouZuxMs+pwoAcKySb4bNvtbSgNPYs5UHgYzM3FKhegtYafxJnLmI4eY5MfnoGyaIM6QFrzFdjCaXD28Ff6VH9ymMNJwnrI6XaClQX7MvC4QjKbcW40P/0WIBpOXfaaWFVlYH8bG0Jntw2R7D82Hk6yMQS4vwOjMa1hwb3OBYmRJbZCFKZK8I/SO04/kOVn/iGMDrd9lBng9RvEzQBJhpJzUDCijn0lpJV4AlZEJGoXW0rxb0PQAUwAKP4c9rSQabQK6t/6+rPe22fGEAIWnBW1mx/f0vqPm1VVn/ZcyGl2fP5i/Gss8FNVZI8dNw8NAhIdT9Cqe248LNChh5zW8Bqi4zWxA+tRfh1YQg82Ei4Usfgc2ksOUON+MQ87XeLT3S0ZYs9a/OtUP2hyx9yKGScenP0MAIvM/i9B1tdcj1MlRcXuQE3nY8oGPsYs5J3B1p4Qr9NvQj7PI0eLpOMasQQ31YIGdl1c5QkCYd5S/S3ctteF0tM+KYq2+thuPbNac3fegMnSWhGjhkLVoKreIYjNQPPj3ckwJ6zc9B2BvmCrcwCVOWcYfU9vHCQy3MJQb3hplsYzVQkwuFYTd16J2MF7fUSQjmcAVRb5x0SCKssGlAsd0mHUMaFGUJbgfp/jUtTcSq0a8HNleV/oSeKy6IexLq4wnnhw4eXq7JjmFbt83vcPHEaqF99R0RHsmLGM+PCcm8kjqNE1WzLZ599RTLiejKpSxO6ikE0ThMexQhMkQx3L9zxLv14gpdUxqh4J7gVnhV60pexNdE+EXRD70agyEfqBVvD1yJIJOXZ40wvywrXTpn1rmyAErTqusja1pow6Vme+WTP01jLHbIS9oPllGmhtMrnyx3gGvaM8hioIPjJKcfnTzTxJpaERqkSHN3ZDa3QqVFv4OPwGaGLQP1kRJgR4K5ez67qK+lsKVUCcQaoQHvQ2G/tm2sRVr1RrIDKidBH9rqGlryXDnusDszHFJh70ZqUxCKqGm6pXa+9k30OcW7tV0goS3r2ihXfCRr54rPmjlzXXaW+ToVXGidx3/BdkXFEru85nj2N3rLPaGa1RZoa88jJvzcN2HpAhftDYY57CSqCgDHlDl/jNqwyWQfWmW3CNyVX4rwpKfDvJ6YOu8Icz2ISEvZOsJFKqB+tiOPS2/xTUH646o1HfQq18fbU+Z1yR282HB90IDOcKQbrXxt72ALw4sZVL1NHT3qyIK8FSYLP64yy1eirmubCii0+vjn2YOv3KJKJUcmdbjpw3At4Hr4HiARdR5DDuFA8MhdALWhc5fwajSFzOLS00FyJ4w8LXoPZmPKLVbi/hpVIAuxP3BnSseaeDslqREaa670mjHkm9C6IiigeXj+8kG25Vo9IBLoxHZBHdLRPWVdNxpy05MnMHPp1RPAIbb5S3qARvNvtipybk6rP5EyYwNv3vq3r0fhQ3r6OhNKzFhrJIA7B++7uiybniD2VMHWrauI+vjwAV4OfXaFBQXG7Au9EvtgLSq7U0eli1QAcTm8+Gl9ZyFlj2Cr04u/14amPFdqLPHVLno1QzXWkajD2mVawg2z6gD9ISTTERZzx8ANi1UJ1YfUu/ez6ako/qjx/jy2VIZkGJaUA2rLiMIYikja7Sj6ZOhrMpfhVZxWYyCyJbDKfQniHnTI0QLHfWfV1Q/TvT/p/TFuZF88AEV0L2y1JOpa3zpvh88Y0y9PJkGE2JuJoElSDCfqQAtZDAWQE8X1DrmMG9VCehiTJopdT74Iqza2c7DMNQ24ucIBOn2e12EzqEgik3v2VSS4J7FWSQyGyZPYheP/eaWysyMY3L6fjB9Eok7uP5MmB5pzfhDic4/lKEiqfmQsLqevk55/wY+fpJL8hd8qr1YgDQbYKQpoOG17d0POTUXer6L9H4/vbfPEabd22oPRAh1aDDUly9+bmkZXOlhPSEq0aSrgKIQu4nIC+dDl/wf24b9NOk91PbVE7nvNDPvdTBqMyc6Bg7GiDPTL6M1WhJnZ4VJxYGWJofVEZx1OSFLNs1lTqTTnnXJ+S65NE3bPQ+e086F3I6ZpMJ4TNLs8/E82zamg8dgjGPm9VbHmOo4GiuwmbrzM87TOplB7RxyZsGFv6a2dy5aJyFtXC9ZFI6YeZtktlsXllEKdHwCVgfp8sac0/bagdB48S7x7JiD3MVBshO8u30hlP2NW/dZwXIY4cAbOcjnuEkPU4ZYst10XV28xmE3CiX1czRuYZrENhvFXdssMHS7mFhlm2C5eHaWfDtQSuzJEb/mqVRwnH9iu5lAWahArlB1a3jqpKrLe4xBkCZOwliekG06HGdbeSBbxplgVDO3k2gJuwvSmnYm2TPwlGhtBKRSTWAveY/NkIdquHHzLI7owTZVhQrHbNfX39wykP7g0lAOspD7etaXyg1jiaI7Y8A2aiO/bE5pQ3D8S2qulCKtVFFonGlgkOOWoar3xl2SgtIAOttfEk0FzRexIyHBVMAyvDlhi3MUaV7L6VWxak/d1vYl9gqbQuTR2fHBlGUoAKQM5uokILCwkjUq2Jriyq0INxBkFU6xWbZ+i5AGEB5PgpuEMASe4fS3gs0xj1Ios1uuu5vfRSMzb/mniuG35bSp3EYZg1ezRpIgCmZIC3lucBOlnsRP+l66wzqtfgKMmp+4pPiBbRbPazljs5Jo7j3/72uqcFSblBL5yzZZtbrq0DZ0g5jz07bbJTW8yklds1/oqhNmGFCuxJpAL0ckgQOi2oB2xDpib2kKEeH1lgGj0H6RHNybPz/lSYtMVSCdsr4tWSakWv1bZDmys9ys8jnqLwxNPm3Xnf9ezAtRCcQgm+/DLBJjQyx8Ifczwp9sTM9ufjjsOFurgKqIj6X2FocC1e4c9z5quznAflu+wR/yV8YfqUHNxykrWybguJ17xHX6zXpmJDpgO+QYJ9LxHBwhtXxZ51NdTYHjS425nannvGfqeVYWa70M60nbURKKMzhBGTjXhsQMJMEjlCFxx+7diqFUhfodZUyhhupbB3zoLE+b5mz0Et4pQ7g+K3baVQCvoZdQwZj3pc6G1eGv/gb/Pv1Qb5Pwmq8tlxINBWRXDOcYIN5MCmItdX+wYB9RXc+FWPlrzeiEP/etFnyPPK9vSt5Kfjbe4pQrsvwx6brv+tSF0D4MrWPjHg6+FtfOVIyT8UpZfmqKvwrEWpGwPvBzRJGqOVmS0RFaDMPbVt4X8lmtMREv/c6LC5pnDhLkqGEw+MIIUJHOibCM8ApzWiyJqF6eBkkOPXUJe3LwIDjFCEuFKdWNYwmCI4hPtHUzU+MsQcJOeOlBta4VHN8/LatLEXaBE6vAzW7YnqQk4cPlzl19AI2JnQ9tbnIRPgTTR4T6gE7MhBsONb42yApHtoea6ei8AwXxbQXbYUiNcQytY/Bb6fTty/we9S6z1NkSbxcawYL97PhHhC3Jzxtdu4dKfdsC/3PSWAmm/Q5XbZOS2QpsTniNBFgW/nIxZF0DCnSgE80NXvaH/CttgDebro0vmYEUBl6BYA2z9byAzzT0IlRPBOV9zItFGcMAw9UWqzasM3W9gMJyLtY/SCvngcEmMOmA/i1UEudPbZlDaNZowSOKpYV02p0V2iM8+FHGmAK8+trxTL8zMaCO9vRhbkjXspIgkmGp5TrSVqnxAAdTnEJuy+rGJbF2X2vHOCAkLeRVy+w0bAgIT6K22gt9QBv7GwVNccw/CdBpmfbhXX4mPIZv3yLku1bEXnX/Znm/HF37DB88QwwV4211TKC3Vza4McwOasBolg1X2qp6IVEF55E5Aq2NRGqxvBJauqj/ZRle8aLxZ9q1+eSv/foIIURkYdB45XTXe3fDxTsQjrlTxdSJU5TlIcsQ3ihJHsuqfzDHn6Ksn621czknjGh0IClO4/rWOploYtBa4N5Ys71PoEcNO7G1urtoplbJtREbN3C8WWICgsNHkEgrLbbWe3g4f9J1zk2V9CUYWMZ70mZobzXEtG9FsqJDGgDuLWVFkvuBOK1vo+5G6oIedmOCoI7CQmGtKI6B9sEMOOtS7jSV7rQHlgiSZN5G/AVMcKZVKeHaI/5WR3qBpZqRWkQRxLjp+27H5pKvHWiek35BDid9OP45IltXgNSVMu2uWDRwrpKjEyjVTWxAtBvD/ZKAmsow3P/dsBHGGaACkN++6oPC7cP4mezoYVFHXrKWxmrojHUimz0HwPMgSmBvJDa3pJitVr/CO+waSOWP8JIkD6OcNF2aNi3e5+tx4WhROc/KB2hq2OhW4GRWQDbKyNEH8Ed4uISAjVfd83BYQB+HEo5VYZPVgQeJGsnmyY4Ukt3xptYQ40txRlXyOAOWaKRz3cnjb2LvRB8zeU+TL1Q6byML2PpVlpOGIAbcWhZgE8xkitxVizVu2XcXhbVVdRgEJ1VOdJPnyGLC+hwT44ny9AkaVuTENUlNnZIcfxlsVhFxrgqcGTk0rRYxLoEa1xHWCmmyM9VeLlGj0ui7JfXOxmYL+b1sN1205LXYg/Imx/L4yJSqU5XYzND/M/cIViAsD/x0KUSili/naP/iMspz5+ByL47YCohS//+z1sfKX5s7OuqOVSE0dvCEMXy+rAPc+m3jvTPX5MkKiNX1T6vbB3PSey7UrYqvPuwTBDcJzi6CkGJnZhpM4U2FDa6SyBW7NHi4/lfJJEnILHbMdzE17kWwDX4eyZ7jVHTdFkU7l3XhrZ1dZUB7v5llxlLx44NC9c1yPu22Z73ysFlaXLCd1dYqE7H6lm9VX6wx0rhvGoKF+rOw6zDEjRZwjp6shI8K+cKzWGWTa9z95Iw/JE4GXuH3iRuZHAGWVGZuNWNYhNhmyofbL73KjMqM2gKQuo8xhe4wUo+l43MezKYcs2BCH2YkwEBx2tJagSdsHaHl/1dnmct+Kk9ujTDqRe5YDesfdVAf2T9O9cyUN9sTcOlfMuVNi/50KdM0L+sHBwe699nvQdDm673YnDm9qYMFPmsBV+JSyvbsE7Qqle2wQFKnNr4WMukZHN/EbD12SuEfRxNixT+no3fUHxaCwA0zG8D7yNp0qXP2/5LrcQ4CBPiQNp5K5G6mMDlO5t6XRl/Oz9nGyakDf1fhezx7k1zrCzv0WRIuNkWAtq/prEAssyx2nDbzrJlf1YF14dfUYSB7JPN3uTpFmYuQy6AeAbPg1rHbUzC3DHwLAVcYLvST+5FuLlmPueePFrxNSm974pwkXWhe4Gu1euc5xBVxsN/ANunJj5u7Zi8dTrKXMsEBFGT/PD34+Ht5hkYk0iZ74FetZHC52Fmv5agi+JuL9Zhlq8h3CsuFwhBYH5yACkfT5hQspCCDzexROTCbrxyVHBKIU5DnFoad9CnP19Qyu2Z8z14lE9KMuAkcxLzIlHdzlmfJYlZI3LbcqbkVKeN8+vaeFWFuSm1YIYa1TcNSth7rTyxhIxmcyen8LeEMEbOt5RpkAPAr9foNYWsk1SUwIb/sC7XzDZL0Cnj6HPO/jlg//Xqm/nAT05mGw1S5wR+AC4ElE79sdKnbYSP/+2DEAH8sldJLsMPj0gxj1PPKcejumOIUQoJYGyxQJngeMj8/FOrjIvWCq8sacLT7MVWMySdcC8JABEoux4kwMblIR926KdARlRgRmN/8TIh+AwjWC/RaTq1A0cXaZIXrZJgx/BysjQVN7RltoTTI2HrRGhHd0amLYAOJEKLyAwM2XMfckg35LgufrB12EWeu0nzu6k/yPlI63AEi00EnrN8xphHSNIc70TbN95/71kShNCRAneFLWqtGThwSdZk7dt9SYWlpYUl2Gqh9yGbzW/NNgR2xexabSmGbrZ8wqYrTGXrHV7Z9BpfyjJyK8bSNh7DqPgJh8sGecbhYG5MeTl+ooApRJ64+PuRf5XxnyykOCde3J89XXG/Lx3x+95rEGg2/IinmJAfANtYwxdLyEGj8BNuzf0n12wEeNN7z/O+QE1jfIJCdpF9rWXGCFyDgwcSSFbFUX9zgeKC+R1w8sbZGOkAecs4JKFOkcVzp+Jq5dwGb6NndLLkOH9X5EVhtTSpzetdsAJnR0EjU0B+EpWs/2mtXvIGMV2jKgGhmtltq62R7CNiHe/yfAjV7MrJ6QruB+mckD7/PVNlk8lV+BDLO/k9CJAXB5wcTwBXPPPvYM1cZYtelwVH7JjDacbGfaK8iUUBRks8fDreK+GQMx4aMZ/SjiU46CmQmk0I0nj8RT2ZiIe4d/KXqGdMGxEmyh/wobPlg90XVn17I4oty6x2wse5Nlu1ntOfXThrxWK6BvozXlDgZsNLnKzKW/jttF0O8AqZw3ldw9XQrdgghm+Xkw36Fye/567SFlv6UspMazDGfMcJPAcI3v9IUlNTQhA4NYXos1dusAhkAKeHHblZguGzthS5kxLLq/fqTIXJ8nlqTugqTLp7UTBnf3ILkT72/EKeX3IAq4SQMKTkzYLEXBNaaFIbH8QrHaMaMME8Oax0gouhEy0DCLZp9J5n61rf4gMV/6GU9DJG1Djpmk+2w6lM/ZRqxBmRk5w9/rRYa0D25w67INECwJE+Sw6dGqXg1y6RyEqRVj+S2gv0jINR4IPcKxx71NCsIbKU4vg1d9/lDiuuFvTD15xwXZX03SNkUdFRWs41CS451B/EPlr+FEe7mpCAbOJGP8ay3GTTtThs5kAIFt/RMGJVz/er6F4iJHXoLrJGU78JrPugG/1vJHwn/AAlHz47kk9FwPoo/MYjUtQOq/d1tB4uwy0h3STXog86MC5ChKSPjMscN+QWuO4Od2RVeR3fboPNoHjn/TYxbUpwRaxrX+ZgRvyZGwPt0GIOWBGQHjFUKSSTYgO8UWU80dkFIem0PhI+ud2q2Dm4XYfG2OBn0JExQyAABwe7r/vv5sh3t52kNVullykqyWDao7XTEOfbS4kMPedJJrvNPHbuhTZfh4T+1ZnKvcnUMVOa3vJfLVPl91xrwptYYNk41vxEI3zPu733TKVbiOfct4AmEv03a9vlZ9XOy3G74G4yw47kvtucEBbZec0LImcAAfxwLRjhXUGxRW099xk4F5cfIZUjcm7mnLVqRBQvqlQYO/1EQPV7P3MgzrIy8wCa3eS4Qy7b6lZKLcJWxMOPdZetiul/wk7vwOR649H6KPmDsiZKSV7melmFJ+8F0RxUtq88lxvH6xfP2SpLdROsunmp0zulf0dheLOmjCcY37UTPrLirSzeHXpF9DtqE6l89S+V0/RYuysemugtiQI8vo4hHslcWbjpO1mKXEevEWP1mR4fL9IPaXuisAjsQi1vqd1SnyZxaFz/K+HZi3EcXNhqSk/Uhs69deV1Idm4T8WSkN3prQ77I1hMSSJ76GEamLYGdxQ+EvhrMe7SRTacILVLtx0ZeHteHSQR5zZXrOmYLxi4TYP31GOpAKjyhKJitd55lM5QRx/h+w7hH6Qc/iXCvFUyTtw8zOsP3LK9cPli627uzOiGlSJ8fmistawzq3QTaFzTTCviGPR2n+zZYU9nGg36cwYIWFmSHpToii+9f31lr86Kik5/QA5uOmhawdo+H1TW7cZWQJIYqgLMWRxHv8RfDkX52fXDK5Ht3Q6qN9zS7jEdqwJR8D0+2Wr33/uSes32od74hLU+TS5ptJd4ZqS0wD5DeXP50cgH67wNnFAmH6XXFOBGYucyN0yZdiKJKPYn7lIN9otDSFScJEVuOjZhRfy9E07GrFCFF0CuX4HbsWxQbNXQX/nl4wtokzzsUESPV5p3oEX4LRQAvsV4W5ZNZdFYqWc4S9KxezJ6XsIw69HYHSK9ihyIbnN9ZP1658EGYcTKxTwQ8xsDsbVJJx7UDtCrC6WmrqsHMCv2nPQoZkrNg3UHw7bZ05Ec4q6DfB3zHs7NfotQtaaTrYyFON5X6GA5np3jyhs+ujmBxxadwlO2w1AL2MEgELSFLtYfz5EPfiVXwfKh+hrwsyaDDAY/Vc6J7gEC9V3bKmaF/trVoF1feeZqC8G2sxyd+i7o81+Hsj1quJeZj0+ESYiuF4eLSON5hxVD3pIAFeSKXGzRG44BzJX8Y7esJvpkBZKj78T/0E6ewapMugNxmHodfaid19YYei8AdiojQazAY2RZlUSnbCPpSfDIhQ9MZFT5kfU9NaVWjc/kBYVuA9mfFovXqtgzFOWdxvdQ30fxntgSMyAf7Gs8fkl1PhUYw40NrcYIhPub4uoywRmlA2sA9zYdJhRsP4OK5MjevXigQ7uDx3n3S0USvbCGdiPIa9rCeQ5IjEMhXQ8mfitBqh2nRwfeARnicpDksj3sS4cwF4RtGKjHE6DLYrQPGc3vINYg+sz8htrbtOTD2moT5yn9v0hVx/6YKnywNlbj7nwkCKSyZf6Pj1m6fAzfa75iM+lgNwwyb/QyfThbDTDHqsWjZesuW44MNNvUr+UXTs6RLn27BwVxY4RwDRW8hEu8F1i8oTVKoqnh01D2Sgpoj+fbrMiVgNp5HSjILNvetnrouZe8/9yP8w+7XRJrAp42kbTowHSgyPFUgbJewb7yUy8UmE7gLkd1lHEl5lac9DKeMsWs8bpvvBu8Eu6svPZx2hT6/ul9KIR4h+4JZBPhbCy/P/eYvt8f3XfcSoNX/ei+Cnfn4+6p8HBa8wuv/j8hKAOFKYBsH7qIY1t7NtaSZ51jCum0yL6J5JdZxGnA1UD1HqE8L8OakqnSnUrOrKevVsKstdwTuRQTtdmk9MNaSnkL7wway8QKdxK21eTOKRrTdZxElyiJoUKJ/OB7JgmW8XZvAVhAx8BRSKlHLmeG/hb4EAVFY7nejKZ+D0rUyUpV9WZMGqvg/S8B6Lm5AtdHHziSRXTbc2RBHpeBiIPrM3awrT9dC5gA8ZEe1UK/HD5ZHqqDER7xk2mDQ5nyLGzi/7GfCRCneHgUzqxd+1C78p06tGaf2AuKqGuOvATiSms84cuCNt2GXybIg7VuxK8JDbfMiaLLDb6IJM/4RHmu5ZyarrfNYwijraatKkHaJihjG+3vrZ4e9p0SlJjIMlk5w9wHWDfmVSJexzLjkr9dDzGzh5Sk81KMmVAKrjZu0PtvIoyCYax9cAOnEw2oNuQcSNkyY9SIpAAVFHrGDtVUgxrVCqBvgn2LIG8nWniT+QQntwztS9Hj4lo9fDD6mIDA5cOX4A5fNGXKK1gu9dQpPeLtj4oQel2Hv9CMzIm7lh5PowIy9y3Hn5a6m4VypXrlBZrRYIoXtc7kzf6mgLo5Hu/QMBhuY3M9MkexzovQbmVCkmAaLVT3Mk7SplJjW4FJZKvwR0pSM+XZaz5Fenk19xN9buo/IzYdZOHRxk6zmGODkx5Tr5aQwyEL57qDsliHthwM722G4lN1zh/sRtkLIcB8Dtnf58ncXfk2g8gk9YsKiA+5SNa0QjygShSB0TiEyjl4AHYjvwULhSahNrFCJqBxUHJK4F/QfUK6uvuDMlRwYla04IJ9hUds3Du9UG8Fw3rYnxuHwGDvQv3k3fE/I2L/Q9NJ6n0j8aoF1gPosoRW2jtuPtCdntzzGv/h+YM2wNVXzw+OnF3JwWV8CI/VMFMsMA3LWv8Vj5+JX4ksnjeRjaiKlPf1qVuFrgypqOQeKjNgTKve8MzWuRTK6X9GUucJOHyRJ/7rXA51q6zDTPRntoJa3SP7qoXa+zBzly9aqPrnJw3fk60N03zZQ0rLUXOg8wL+3lU35Lg/P0766UqlDNk1rgOS8swb9njI5flwYWDe7p+9Q7SjESP3zyQBBCTP8JS6MsluyUHSy2Vyi88etcmsSV0NnKyR8llo//9F/xbnwT7gm9PaYw35QEnlFCSCLeS96U/0dmxHfqPpuZdZa8swR5xXN70LhD4gfdC3BkMbauniOjihCy2PSxiKsG8+cW2hC2NhdYTbNa699WSJtaOLd6tZr+TMZPYNOn1Tt89KaPSycVroKf/mY4Ye3U/v76dNnGkz7rOgzKVSWp8bnwfD0iW83VSikq7kU9msNxRQdHYSF8wsZhRL4GISWcxRMbXH7PbLlesX7urHngEKd1rCy5uTgREikqob4CYChCDb8Gkv/Mh+R5El8r6c9PYn/p8JKzdJkPiMxkeH5jNf4Sy3wffZqQgyMBN2tcFWSmENpjZJKSUC9YuetR8/6A8PtM5rawn5cw3VGnixUPZCil/HILrSVIgvfy3kLYc950GbY6AbNg83qefFhPBvdUK+If3JNt8agMEe86wErdAbjVYKhXRAkgmuP7ayxX/39hP+g16VhPXkObam2zOQ59OW/gQsxf8uYpDtE/gT2zr4a43RfiX87Fc47suGJ0Y0CNxhvcf3p53rH5M2E/CoN1vYqQzy52xSOTzqZo78zcNx7/+gvb1C5nzheKv2G/4QIGWO7EPPN2MxDxFJvo7jind/ldyFzMZnvETbsqssJE1Tir+KPYFE2WuKQX516OgdXuT0oG4r+UJrindBw86KiS7Sb9WW+K0g1lkDBR88heDP2F/mp+XptoAhzZaf4uIFEN1h8vXsJ/jaCmYsOpMFykV2lJUXGwsVw0E/dCa8zQWyM38jo9fduf/VBZaAN4dsId3ezBzAIXxvllTxorfVovyoQU8Z2ZG9ADHImyRMDoMDleQ0XSiPLBqqYThQ1ADD8wue7ze0gski9pKSXhLmGjBj9Pl8NcLWmvQX0o/Dm8UO45aY7uRGTYzJSMGvQJgllYoX8ukQI+k+hjGqYxZH0cZF/ehSTfs5ivE6eojb93kBauMdWJNJaoUePx9DqQQpQ/g1obWGEF5t+5Z2xxgdVdgTdCfi4FtMFGQCaO0EJYlqUoRuXRLdvayoO2wgsv4HOjwn7+cDCao7qSXPvwMlmu+LXZamMqZ1w9ii9zYGk1aaB962oVHs4GvhEFYDf5ib0loN210aihCqen+OUdUBCYgDG3rcOwW8O+Gqz3NPAv1Yp1Rm2ptlfAJvjOI68bBJ8ekEKafis/LNHCqs3pw+wBNyXS4jRBrqQSIxLxUMDvO5HyokREPdj6Pw9C7hdR+B51TUreKfhnhkGdfDezs1NxAwiCitF26OX8+8gYHYBOyRFa5JoedIubYLN4XB3Y7LJlkgypjL1RN6uFe5/789+lPVnaDKU7yhauLxpSK1I7LUF6zi7ya/NFhC272+fne9ZNgxKT1/4QuZfB4LmiZEnCyfruh0sfz1qVsD06/SlmfewBdW3yLK2QsxPqzHtw+Mb4OXvYUs6CFA4pZiqStf1tjLW2KtywPjErmVbArhD6NFVijocMLiBiIVRNB3FsF/bS5OXVZjcjCDHdFnWPM1Eyzxe+o88iXWZVwgmcvnmfm5tqcYFKj3rjEe2TwqUFOujm529btlh0VdHpIwml2/9xpQ3DdGyKY3lD7es3vEjEUZT+WGw6egleVRZit8Sad4EFEMW5mgGliCVzUjiEi2o2krXZ0dYc/SxUc8GSQkfAT87/O2Az8nSIDLhFIIH/HMOfixxv1A1xtqbwj2Gs2OOKtSx6MNhO5YiCsfBOUrajM9VohWS5A+Znik0xJKicODIQktUSc2yrZ0JV6DwMI/TXnvLc81kbGPF1xNHwIdBFpyLHotVKu6gTggHBAA7KLXQ9wjGa+lORm/U/D7bYO0T58CzvK8rM1kDOxJBaj49OGnopXuAr2kYfG9JsWT/AM3f6M51EjNGZhU8gH3TZ2G/yqns+5/YYK3SeNlhlrymtoW2il4QeKG5kSLUhw1Or04NXPV7JsCYzBF9ByYkcfdzjSpClnhIOTAQOgW9bglN39AVMPdYJXGRFnbYxSj9J4aPaLOoQOokJ7fuz5FP5d46h11DiJpoOFVPZZb73X0vG1VyZkrsSt4tRebnUE/mQD5J0ojOlaKd7Zgy4TKcTovLtwoB/JbhSBInQz2kTfsShoh+zFPQIJrhq1lrUiu6fmHSOw5yYO3aHKcIA+ubjV63/quEJFXMkgnilz/x8VuDbT4pBPdlQMv8pFnJQe7HuveRDaihHucVBbBcnNKcZA5c398ZTCsLe+TVTVX3e6iSMNA2mLRjXwcrOO54hCMVo2FjdPmxanBvWsiXW3z4ty1rAF7rWG0TqiQu/CWAqeVldQHRqgYihbZCzgOB42ye7mQTPrxUIDtzO+VVToF1sgRxNKS59zyEAF1kHss4RClOrInp21uENaBg9/awJq1xsAHmaZfMDTudmy4ZIvJI30K0TOFVUXqVXj1O+mqvK6z170kh2I5Kd0HR6/zXUir0qC8XzUHcqYmmF+waAVV/nYXCMPzkQrOjI1r+nMcxpUfLU3xT2oSzStGrWg4S+j3g67MtsMPSODw5iTdjhG5TtzEyleRv7VG52tgR4lUXkl/8NZ/fhe0Cymy6JL8SAR+2CjpFqT/kcl3lFn60ImhknOqTLOup206ErUsv9w7sjj8BF0n9rocN8rdgZx1pM8dMq9VfIyk+JUFkFP7Z235Od0vivMXdSO3VBJ4Xt9ZH6Uce0ILVYfoiu5S9DEI+h/ysXjy6WfhuLzG56GZWRSzMpTSLLg3RHT/D3VHQij7UdAC8CJPs9NEzyrwAKJVF5QYGySceTFZQDLgJVEaJk0vKL5OjRgq86hHpyDYHp78+1vtLksJAdG8zq+SDmgstbZvmyKj1e3SmNzuFBGC/Z0yMOHJ+4PqejlZCFq2q4DgSgzBoH6qddV3uPafoxyEjaS4RzZKGkIdJ512kFG5Pa7wtg4LI80DBe0IfX1mQ56pw0Hglgf/mCc9L/Kjdd3o6s53T1myxEhfRiLe3cBLpEd26QuPFfWjdzU4/hZ4lSxvhqgLnR9CpCNJDzxVD0O8W5KX438oHZeQFWE0yqSGY77yQM5+ir6uPenNJvGXyh5uAZ6isJWTrIlIYx5CcL0lBVChnjcP4XXR9XINtDR/5N/xRN5JKPplzrvYQFapSoeauETxCBbOeKtnyXKiJKcHkQalOhx7oVuo/19lCcXEL41fRhqev6tUej1Qsl/3gTPzA9NLmrYN0jO5I083JoNYQ3dTcE/D6UYDa+Z7izkIXFujKsD1q8w5BF8n9lFb/Yb7ctsLM8R74IlE7VU2mTaMayQh99OD3AeVFPNSk7Jmm2GuO9G2gcw7JW3LMtF2ZQ5TCT4AyaoSAaQA/FvvqLkyrwor7eXksTMfQtHHmIWfwR2S5ahnuNA4uKLEmCqmyPvxFvh2qvTrIn/DMVNgkYe0NvHG2mP1OoGISVxo1Fg7rLAlH7fnnAu2IOYOGMSXm4dnVWU33CMDWycuhm0Gsyx11rEMta4BWzDX3XFdr9i3BFcnehlFM33f6jPSagVnj/DQxCCkyxF73YqieIWQBzt+wRLuhvJmshjZp/r2CF8Ugn7jtrLe2GSIIAvBeJw1DTqoQZxCVNj508k8QI7X0YbXwMmCBrBeWxWCEpl2+o3HxLu4ApPExKwLxEVTDU6aAZY9PzTsUvTsa5h3+6lYQQdtnfe4dinK6hVwnHs9aYoc9RFxcRu/JvZZO+nuul4wRzy1VwToRFI6AtjmenKMV++J5igzADEQPWIPmzzs3YYpKSGQDmPYS5ttqnjHOxPi03KDDhWocJJ4cnOXWBXjeT61Jng6C0sygQ4tnRZMfreqLnBcapy4yqxwFLr0TBwcJGC5sWfC59Q02lD3zoDQSZwGyxMVOwGeRpz7/a8/0bwZzZMMdbnNi2aOnk/vbcrLq3tJ2FZpgpykVZFLuz5D/J4pnL3e0p3d7IqgrvSSz08JNq3yd6eoakLajPGSfzEw3W5T06/Bq7J8zL8vq8NUBvKktT5w7RSSrOldrGzcFH34KGsWqPHTpil2ayDnnJB2E17ACD5TWfY7AuhpmxIgZhuqWrDoIkePpSLtVwXVAJDrhcv3rV4KzGB6PJl7quVa+FnvV/QR6lXpLODv1KSHLU+/f6nZFkhb5WGaJKNjN7DnR/g49yCyluak+EK6gFwjlIRoMNVlEFd6vnwJUiDXCW6x3zQcJu5yv3hSRM6GHVS1wMb5UC3cAKHwvm5hOKHh74SILUz8LFBrMQ1hIENtL/PvT5lb7PGQ4HSNE7jII2QS4cUEYmlqVdKjszkntggp/0sEKuDy1Nv6VQccEe+BlEBIeAG1vhMnPnn2EMDzCt843IjFF8BksNlMhzVCQoq/17o7Ef92HSWXuQL1nVVsrTq/j8jG+fwubLU4Ur6c+gGON2ctNQZxsoWg+UDYye7yLdA+7NpzXwrNZLE2uVa2G7/C7oUeYw+jcNkdyLnYrWBngjziFb3+BukdFZ7lXZzqcSNwyVFyvpWtEOJ1ohPQBCQ346XTqrxNvaxjT8ClZX67dIWomPxkMSJMS+Qz58i0rKS0q1gQ923BKEgqhZDTr5S4tferwdgkrawjulOU0VMULY4HXvPkoYNTw6VdLWjMCBK6izKKLnawmCUYJs0dWlplb/lXWobmq6rtNSTvf07MVCeaPkEFvcXLwmuohkBLj/xcV3rRu4e/l+Bs/bz3hZUlj2ax/EBMr3Xrk+W7dpZdAcJZhdnUJHu6mMJFb7TTTGXEm22zeqFO0nE0M+6OTcqMlKz8J7J6tw6/x5iQJmDX2X6hqomId5Ppm10AW7ZnD4aBEHxIcIRjobNc9dbIRXIjx5L8/qg4zpdNtUO00ab2C7cTXKoL9aQoRNbrdmtTzT2ATzgpFXT+eDAVEgebItzgz+clq871/DPBgUSqxQovhpqb+j6uOIH5d+/QA0EjFxJFUSkMxrKAcQFqfEYviY+m3YIy2c/z8KlspyqYwsF7KbEwJmYChu+rAWA0SAoPmyM2EMz/p5zg9BEnT3RnJn8yzRW2h9lsGQSEE3U1Z5i4NpAL+Q3iKTPKkn7G3Yw760dYAubXqy/703vfFzudzz/29qzfM2JO6xfrMYPNQ2pgSuPWSMNsaCJP8QD3tM9b8hOcjPquTE9rjQI/pl14EZ5Q6ui4P1UTSG+XAy/AqrPsxsVWqqoOxVeDPhGuEjSiWWy2Z498epr2elDcXJN2rrpnCWAAo719Xz9SCo/UzscFZ2AyYIf2xW9zgEqAU0q8hYzlqxVT0qrKtXdQgi/hBR+E44HDuyGNeQ6rIzfTN8bIrzuGRwKcH9F+pOzLxzL2zHg0HnCz/7/iFAddQ2HOWFoAtOadbg2ee6EzMplFhHwUTUDWFfMwmvAob5MAqAYfQtqCe6M8DLYSMKLNB99HbCm7oy2JfY1Kh04Y16adwVmZ429gRv9/G1ZLXmT4/Vn7RH/adUb5Ixo3FgUlobBf3/kjtJy6wHAhIhK+l+uFgPoeyRyUL+H3W0R2gysdgOU7+qqJVfu+FuRsUhEeeAZYG6xA9oXpmF+zSPrQJkmIYev/47IRF6XLVy0Mmg4iexO0Xor8NobQi2/AjeqZdavzPpIYYM3cx3jVyk9o9stG1fX/QlIKsWwTWmvPCBPIH1YeRMReDezvLJKZ9bUmQRts0s+aiAcwZBe1hgDyEzc71cLuZVzGdaNto+VC8QLcfV95hY85C6PkfzbauGSyfdYMlHSdwFb0fLfWN9fU3kSthQZ/fuoP/Ct6k0TPPoX9bgcb5U7nOFHrCG0yRp6ZG4pXPmrYSjPBd8SXxHg5P/2eMnVHRYkdVzYB+O3MW8Ppv5Y3FBpLab33C8ooX0ulfAh6cOPk1r0TrbV+rkZzpkXf/tbLVw+qGPMI7k6IH8vwY+l16IeWYvlMbvY5+FcTh7Ns2DiQyToX32aX6pU55l4HE/ycow8hfHD7oyIXZ95Nx3cIDGVFS/Gx8wLgKhfhnYWYiAaFzHS7HzgTD/IyXkgPnrb3XmTfT1C9WKzjTnQARwYruYZVQjxMW6sMq9vAYhlLuXNVt5vE264lsyta0iDVs6NkFZomn10H+v9dHeqaPJ+iCW9K+goeXieBi3tL5WPty6D0THF6T3jXDxIeKylPrGEfDLiWvvrpuW0K8zk13BTfyzErpF1qWeOxikb72cxRdMl1vXig2GM4wqDlmwEJ/APzoauuEnjZ1OimOOohJ09gD89UJNJY83/s+l/yNpotcxFU1mK9TMFlZ9rdsY2LvENHoImhvoXybBDshPOqpA1vQIKcGSq42bSIWbphSbho2WdZSt82QRSyMDdEinf9SaAW0mbv3H/jGCSs7fiK7+AdPKXnBEH1Z5v7c2/uJeyPAFYh/JbB++Ya27+kFJxkKedPaGP9b/0zN3qra4yx6XxNkJAUNXDPMEBYQR+hBPKc0nYL4PTY9rcnAep1gL5B8+UVRnSPg68moxuH46MHE6sh7hSRb3KgLLDfDRigqi1X2UuvEB1G9ylR9mJJKOsfGYPM6Yh3zTQ78UUe1cU5j+rtn+KpqEbTq7JkhoQiN/2P8q5bsmMZSmat1+S4sTExRKYFGVAx+Qq5XmpiScscBCZeKdSJ62VXaCR0w5680tQ6AnrU9G8nkviQErnyaS5Acf3hoVOsvynBh9TXCAqg3Tsb9ULLK3ekz4wRP6Ig9o4WS/7jgM9fY7II0cX4kMs3xtcJto1KUhayXboL6R0Ew5uolCegZBz9TWDISdQQam5YBZ+uaK67MZDpfU4A/S9KoGra8j2EJ3pTZEGJc9pyLthwu8ciU/xXzn0n+oR8H6/zAZPHNeWyl3wQa23F8RwOAWRvk2C0eoaJvm5xXZutqeDFIUlzkRLQISauWfF55nNralU/wRIaQl5mur52j79fIIMh204P5A6wofEgYTTeNGqYsy6S3Ac+zChxkPPmOF1tdpeIEaG4rRGUFU8Pl9h/13o1HdDt9+uGferIiEeZOb1UcU72SQWQVL0vJtS9cE2PXl3Rpfvj8gA1+1g08vYJAGm9Og/21tNmdyO9EntJapXffPLbKaJTmAyiUvJyMmW0/QC7tJFclSpFPtsH86FwbNfX2XABpmTkEax1dlK5cwJnHuBX6OoeDieVDzlAMT/kNLC0JLmPINVLyGa8qUuaaO9kN4gat/jUUwP5neiiLfnMo1NcM8dwohQZQNyeBXe/h1gri/6f3fUWpofnxUCtAABl6DUQ0iU8j1yBIeBWWkdtXNsWdZ2b03TepqJBwdG3oaEIfPFv8HxctUREILm8Pqkph9rRrP92NxB2DIgyRkKeaOguAqdl3jz57vs5/uu+4oWliqNUi3WbWYSkrQFwbKl7u2EdaoGIplVcm6bEuPgsw/53mi8an2wxkZmFR4EmfZsxoxna9fVa+1MK0N8EGBcKjm5G8YKJVyYQ2R8rc2asX1TadIkntXNt+UGfLuLptRMnEQkkTtyigzV9exewl8CEd9ENGbmMt4EqsbnkkvC2j8xRZYTpVfUU6LcZXdCtHUaIMA64U2xc7wRbpf8J4dcyuqNhzS8KBgHRFPzWniJNN2qLLwFviR5YwNirbMmCu3WiXB0P/InfW7hqEP2nycEwa2D9QQCq1kST2zUskM01h+zmtRuQe7dpp04delnRDr9isVkLttRYSK0YKGSPlPyHem+rehKprmLT9qm9ZGqisZ9U+bIk8KBg9qH8OKYoZXZlGzH07zyJ0jqXMOFJq8+0Ge75p5DDxVhDNbERLOVnrIfY3yF1sEmofYcm9ydSYqdbEJY/Za75fMZ/w23hJ8UyeL3GGHgNJQOoahEo940pGDaxHCS16td7YuBb7PJJLevoaq1YRunnG9CnM6lsjkWjpITfZsmHVFfS5LheLuklCYqzBHG07ZyYL0nCB8IXFDbbFgkqjhqIvWL/iyTXX+jnv/K7AqFPCmK3hiOWKXq4d8a65HWKR7xcOSU+r5ns0cNme8Z7thtR6ZAGBzRtfPbWVRs90DFeTsbrTuuFHLgIpexuqYJGvY4dH9ErtQAuuff2S2WQ/rj+QCXAn/AKm435l+R91Px9c4xA5BOfuxadZ8iC8g8CCPxfGItQ/C6GRtCdXTa68WO3s6EwwR1fjxVIL5HBlPSpDTyDGi5uZb7fmi8Ftkgc06yH6ZzhIObhkff8HasNH3BfbiDH0nKgfdFr1HG4izuVdWXAuZ5Z1oH4SPPxPnhhF9xlu/UEj8tH/FqB50jIuqXzTX2qc04XGbd4wQIQkerCA3jtaBRnNdRpV2xQD+hYaGhD1MhxyVVIFmQevavDBZSHGqI8NcuXuaFm+X8i8vIsReXso5JadNkdkzxe299alz+qeievJ1o/jjODYWhKVys9E6HAbTWYCNNwF27X8sP2YjhLb5EDilu+3jBr35LcxkTq82b+UrgxlIXEZPF0CU0IlozGEWr+jGLu6iVbjBq73vJ4KwXagD2dszrwka0/1/GW5qairJXdziESAi1rFwwe0n/gW7+5l2nhm+qW0mDYrzeFDdgXbncpkLgUfRY6wN5fNtOH9Jg4Srk2CnBmsmraxXiEVlUdSd2wDzh81FXDF/MxESjUYHi8I1To6aGaFmFyvVekCBzeGzJV7nUrreEXufuCcokjyDNAov4p1kGx+prgBLbAMtc5IsyrOqlSqlSEhT08s2vwxixan1Ws5XSr1WRQP3BMJgziEucS1kUXhBii7Q5pwSIukLNVIO1ngdBl4gs7UYAW8yras8S1yXKWO10mYT0k89uznsEf1sWD+ceugqfLUEa1hgyJpVSGhWg1Ft1EzbY55KWh5pjeynFjGTevHid1th1nj9B1fyRnDyPgRotfeOUNYG/gNoavvrfolVfDvjNXBD7vq3r4cF/zhi0h9pviRMvW1a7sWFptRhIzsLSRpcDbnLDSPvS4ZaT9y3YmO0q+21C/Kftdb42NxANlxhdZGDA6oXNvgXJBY6cRb/8vzLTChjLB/N2khL+WScYhoDMH80oq+R0lmN0R7P2p6y6Ql4IX/iebHQJsV6Tb+ur2N+jnqeuibue/l60IrNP0O/oWzaL08p7kK/xXVA3ZeqrQ7CsPkAbBzrxycyvRoyrRqQuUqPVg/I0aWECUO/WJYL2zE0ikr348+GaGsKJbEyNKMd/sqPhVxRuBMJ+KKPjx9O5EY5Kf1ZYaJpHrgaRoZe5dN5O4Spdu6BPG7ng+UK/vBFRPvqvnoPJsmNnx9akcqn/E48c1sIFskfsj62xPMbbercCidYuVl+2L1FMnyeRFObcvaGxn/LSNhuHMIakmph2xyWa8+4OMhzT3Gx/+fthcSjnkMmQ7hYUTlCX0gNXql2oaoZNEmdKoyRYEU2L0AtYiyIsOCdU43nXzELWGYtItlutzKlhmyS0/TadgdNhqJUdDTfVhnJhXjKXsTDShYS9xwRtZTo8guEsa7TUk+/aDuB1MprRDboOgNNAxkX1xeGgG1QaneRQMaVOn/w/Xk1LFX2rxgnmWFwpuagq14LJJ7JC7h9yT2vSOxAFrYhSDg2ZhsZ9Cl2aum8ThGHUkT6I3B/CZwlQx9GuDYzmCpLrIIoMXM5KHJb1GSFlYQQ5XEE5joYFsCL+zLxlzJJjaQhwol51sgkO4p1ImDq3ObAQ0o3/xf5tFHVoMqbBQDTNasSqMt8yPT+7MLCgsJnZJiaRAjH5LRVBAWCM0CxbYBFWqgrG/yyC5ZeSxSe/rMrVy2Q7AT0b2l1W5pHE7VhDsgIXNUTOwGmGTogwk8oMnjOZSPKAx1N0/CJwwq/On2m6eFUYz0ebVF3ZbVp5MRblIL/SIhJ/mrnbl6vmV7BDUOad2G5wT2mr7YUOKemry5sM9HLJn8SPcomA+VR+QUczgW0uyYaEQ/p8ZQV8a3TVLfL2TODovmf1flG9FAYEyRyyESZ3bMz8rMqeZ+bqhC6aBOxBH2is5HnZy9F0cU88tAZFuERyOvsQvMeY3vQnoIMBfhy/jbrDnBWa1hM9ClDVOXrZzev1l9GdgSdYkngSdMhhPs+F4h29sbekixlEbc6olZGIBCvFqBBfeoYCU6IMfB8UCPzFUEkvG7sykrIztXi1+tKKavd7C40T15/0DashkMBKV7hmwJwp0IF9Sivp7FyhrDhiQsnjEfbMahJcPI4eJVoDvRO6TZS2aBmc0CscmktH+l+FBaAAsG6zBvr/wCFqfSqCObQ/Eqd38eFg3lI0hiOoUKfAFS40Oo9KjN/XAQSNDIyu5/0uDdBkYB4IoaOTc8/4aCh/wDpC5r8tTnT7ddDYTE/Vu+G7o3mwxPrQzLAOIRkXq4S64JOD4KnaE1NLACOnZis8f3JdFrZ6XdbrWLIsGiv24d6Hj0xPG8fnDa/Wn9IeU+qTHef3bBF16Jig9uaGoqFPPmG2bh3wFePQ8OKJ2uRYbLAH87AhVIGF+2c5c2HcHkVCGZjTWuvTDo586emjzKyYAdFncZzmLKJtMr1ygaFnOj6typcY9zvHbXvWUadSXKyxKFgv3CVaak9q5R8LOOJ/5YxqI1l+7jrpGs2imV6i/5vNgGeyEFZzz2KKOFeQ2htUkJeaWDKu5GPK46UAgPIvzbwjOKQzl8rrtSvS5GlP8F7XJpT0Vftejo2vKbG37ttNHLeQeuN3zORzMpTb8l08W4VXcd/pgbm2UbRAvmykjTzlzLUxAUKCTUvtJJDB2mFP4gY+ClsLcf1om64BRTVlxxee8TuOLEUWlG5MHduq3H34NnxBzLWoXpkSNGqoan7RsyZ3H0uc8e3RWXS0rWDNL67Hj+7dnx5y4jC1di1XqIvzVDayBluFyzunfqV6TIaRCZ3nnZTHvxXeOqRKPAb14TbUmgLzSNLXPxFNAK9OHh70y1q7ASYvGPGl1wNkRG2G0Q94mIZKqT9Bau9vKsY4Dx2H0GA52PaVI+e8M2HwxmQPbd2T0Y2Z9+bPSeIgoT5xzsewWu7bjKyo1x/7KZZ4qfGeSqnFpXUJXBfy7o3BbdTo4jGr97QONVPDLBrNnUHgjTRO2wXl8sPLADdMk6Y6QUI+ezohdzBJONfcCMTPPrA3DUMBtJTXS5OSe2hHHl6LDNZJOkw47isWZVdHSuciRRMhuKZ179npWBeZJAaq/xN+j9Yn36X0UUJJMmE6C0+yuxUpTZNXQ4PNTdY0sKDqlYuJScokQXE4YrjEDUNNFK9cEBc4NM0hoM/x+gZlQqgBRl+riJEXjzvQWEmmivfxrQWCH4RHrY7LopIyp+jCguSIn877b1NkZwYojCAPTdFry0QrJZQfHmjRJT+7S+sC4Qy7XR/SQzpXNU4zAigZFz9J3xUUUacy/Va9SerTiEgZZIPn2wbo0llpfVwvX+rMY5bqOBoLvWHVic+Zz8rFBCdZqdFxE2z6jfPQjnkF9YSzVmqdUirL4ze+BJUNCzy7gDh109Ek18O9zDU65CPscZ5LLdce4mall4p/jZIxTp4STBbrQ1AOG9MG7woQVL5Wywzs8q6oKqGARQAxhz01s5Rr8LSC+1MVw2kF4MvsjLh9wrbiLozrpXnbNqpSa3LrwTtCfEfAloRG1DKwkHYcyaRlU+2/d7PyAmtfRjIvGTk9cAIcRR2iDV1We3rdVvTf0fqKq10nJ2t0qO9iS5ovL9VqWywp/JoQgDcuyQAo/pSRg0FdBo4l4DgVDWgTKipmJWyfJ8RUeQxuPYTaFe7w/CXvX7wl2ogBDh5OUq0FsJoAKI3XGL6spioc7zqA+0SOdx8wDxP4hLYMT3R91u7nfoCKr9ECGw/3rre1A22llSF55Kax1ZH4xIBlRAyKkpW3QSxmjPxs4cQL8qZ3ppM4Tt+1GR55o2yr281lMNanNOv+JgfxTQuWsUsCBAuLb4GoCXfsx3/PoN17rAhXGH8VyV+15eI7pz71BQJGbx8YRgBu/x4wcpYhNoPxUyrcZzTWne76vvCus9hdpoKru28juFEzc4VHAHQDV+Pp6WZ7IaYc5vWwLGA1QfvMWuED776RtHLHv0PG8aOzW1XbihcISUk7M2cK36FYUeTPLy5vv4uDiJ1GSzSV7iLIeqJSdxwieAVVXQTANhwK7vIHB24UgRxuMSlK5KrTkxmTgyIus4eZ/kBo8V1edrK+Z+TQZLL0gltLU41EUC8KQd8SGAJ/8jbS6aoZK9DI/rgMlraOq9nJpXIz3Q9ZsSNH7vudblsrff6zWCyZows0fHEiSGMfntAB/VsEsJgUK73dpvV1aV+MQLiATA7k9prtS386uDEzt8aGnjWFrVRd4BAWBeq1myQCu9pWEg7Q96SWoPwNjEMvkDefk9qfiE8vQjPn79KW9++oZSroQpIt3d/2jWX75dr74Xt+PZw7sAXmcXehXZpUnSZki7rXU0IMGt0gI03b8qqZnFQGblQiveLlJMUkTsb/Zv+mvMKxe+B5ILrbpFdJ+4JeYKkQFhCx8vy+L6AmuJshTisxKL2DgOfI98ODOI3cRQEJCDIk3yPB6gUuHuyWCdHavoPmunFJkxkdlMURnwzvtU9ATs4QxwXMSwIL0QwaTiDF+FI8XM7ylVdnghfZuHV+qok1AcBFLZDNb7Bsue4ypM1ONkBDYxqZhoF2aBY5XxWjc3jd8jKRjdmF1mEk5HI3Ly5H9mDQa6UF+RNkmBWl87RY9GrTLC++GKJf4xXTl5GVoFQ1awFAp+1cHnaTnfie7j9BuLwrHUGPFKxEtI5O6B21/v9mD6bVNtxD5wdpAZUKujnrakHsIyWnm5fD8mVG+4QnW1TrwMZo3oAIg2BQsTMmFgQSdpgXwWXc6gw/tVYi4wNBKo1boX93IdvjEDoW/LRnwV1eUxqK82UkAAYzE/x+D4Ubt07oEzowCjf26ziRKZWL8GEnp11qHJ9Wiq5FlWDCEwrZs+nkIa83z1QOB2mVt/28eEaHdvzR8cPRJoLI6tsVYi7yZ2g849rKrvnp1w/t1hA+zO6snu3tGhpOmcoY/Ii3qQ4GIG9Rfq6S4CWTxWBwBcScB5ItEITkICibtAoi5BgEZMlRQzRhezThtLHJSTV0L7GcLqY+q6XgtwosvPl4E/seHP4zegkulpg8wVKAcs44xvWs5MP0qlbMtQZNam9wBHyP6DHyPBWVtXSmc+knKRiM3Df1D/c4lccXisgMuJNNjGEp3RW/9u0mstUxo6uIKwQEqJ4xNs0cwrR95d4S8e+kIiuRpegggq+4beeXyjpJ3f3C4TYqVALEfXuX1KJSv221jPe6GyZTf/8jBAeEFLiiEaMBdZoCwK727ddvpoK41OUQYSrTnKQG1zW7gs6ff7oLdRI6gjReeOJrbxqld9KgYDvKWPTmBUbXK63Wt/sttoHjJ/6pgvC9zECzKrYgzSRYs4PW2nFnfcMDW8TzT2ybfN01J1fszOn2py7baFU9NUTQWRuAfu1L8f9BXdMGJfxJKTF5hOzRlFHwbj50zp6V1pdtuFIWIG50MCuHNGp72wxRL7LY+Q8I5LIlZewReqi8nLdniSJS2EZ+NeZSr4selKVZWZujbUA42Lt5/nNkZrq7alZHY4et1OAYPDs521gzMhLu3hHvQSrlshVuefNyVo/rkzUATS7cJXJZba2mMy7zf9lNfDTXDGVH/8y7s/RW0BSZAUzUyhTIW2hTCa4q2hJACVMBhcmU1hpRzywWtSQCQ2ttzdoEDTd3qDfElTMQ/09y4OqWtgrlRItqO/lemk6w1hk6/wNRPmoIux0HVZIK9LGSu+CFppaHHmUkzFUpLtH2wYeeDlQa5w18IfDzZPg3IN/eNHM5whM/Qs+ygVblGK+F/9zxVZHeSk5S5avMPRXY2bTY79WaNwlwShtM5BSL4u1eNWq32jk9lGkyETnCQ7tqVZHJys5hsL0rftB0R7IPSa5baw/E/ZlLV6yMuZqPpcsJk1Lnpgwavg4Yf82XF7Q7MTmeIcdbqgAEx3LxTODaUBuogAC+QpRQJBvjItqlqasqGnXNUex5T0Vqv7VBP0gKGwWClzvcsNqDAD6hvcimuxuBQTee80u3i/PWSBkCuRm7tYghxwTD4wvD3uAY8ebpWWnnFaonn/NfhPshRD7NSLeu0dyWX5s2LTH2R5VCdI5QgCG06MHW0Y0fN2Q9cAd71oGX9Xx63aGER9X4X4MYaEAR50oxp9IGe5VZb0PYtAqqT8mDEG09nynydhaK3xnlkaELStK1kYTWxUjO8ocNx9yS3aCYh0Q/OW+qetkhGC0Ui7KYqxGr6mii846ONDmc9f2FjKMHwFVHrCvEEdSFNRURLQ7hJ3NJeEmpFUh/RnVeoM8j+foBfNhlqHc36mnGC07vokVvw1rArnTzJXc6jaYA/rukXunCEOHha6SXl6M0msz+PysV6JOjTJVQ8LuP2PFNPDFHEoO605luIGiOVICm7oda6gNclJDiPeyKkmlYELPYGRG8izOsmtBcD9hck4y8nRlj29aU+H2E5KGEmgcguELEevJ5K/+S8IuSaaW318c2du54MwsgEDp4yix5o7f8GxjeTs96mu7ur2xTbq+ltCvx/GQLfXuO81ar7V+reMekcYeboh9APvga9p08vSDHARaAA0kSCW64ZDAXqyygKQSasykPp5HHNHflpQ8SOUz9h2LsrTopolgCPZFBpbLZVy0S4uvapKe8u4w/xC1UzH2EMyi6VnT613ronXNZhXs+bB+Ko2dkKNbym1WHGzLUtC7TIB62nJ74wJGWi75rfF1NhspH5CdMcltcD7v0SLXNrsqRHLVDTaI/TuNOm7aQnna6Kjl7mwY2g0WHsOyHtSGeGYnGWZz2MFQ5gg5+gBxAeT45PitwylsgR99zckUsvQRM11fVYUwYUdduZvxeG6D6P04KHcVAhrAm0lpTX/+7LvkYebSos6LotYbVKgabfw+g2jl6S+pmq8kkTYRRZjQ/xiinhrM6d/AoA9YFo+tI92wIq6fMF88+b+AyHMqirPxD6FN8b8n3k7EUfONdztNH2PtVbk6IwV2LGnflj9jgMZ1mrkDSU0PIYHV3/c/jibiD06Vygn6ixzg557nU8ij0zqQvkWS3SNHXZo9N5oNZkEuYbgg54KNC5SS8XbtbRsljSL9y/GsMqyNmDmMOF1/zwgB0zGJ9t5nzCsqXNIKjcPuEJrddi1/s7kHITBTT5bLHW5deJ0BpGhqR/PErmN0BZ0x55GCottWvFUKhxrZ46PCqOlqORdDZFZoHyufx9+wzxondT4oFVfPnDEI47BB4wltu9bkhew099Q7ANc/5aEBfRrXfjpPX2jY0bTAIzEC15oxpxQ4mJ6oo8XhMOCQ0xNTCB7MYZ1xw+9yD0AzZd2oqUTD0r8t+rq8tPCzLjNQA8Jjjx9VVDaGDoT4cu+Vm+AZdXJpVB05ucuDdrSxOwD+Umb2wBpC47mm1evOCM7K0CAW+e43E4KF77g4LvaFAT9KTOZaYSHYLksl4hX+k4CUIXibk3uinll8ijU0rr9b85UC9GnqDHNFzZrekzAon1h6RDTr5SJ08SqmGEnoqTytpsp+iBiHDDNSVvalqnstGEd4H2wMiZQePdQ+rURtAV+Kim70WCCrxm5BJKuOVMacM9PlNJNuoU6JCbWwRFGfNLO1aPX3IF9wdMBy+mZG2pquYk7gWToxUo9QTrYulLlf0nuv6ZmyBPA7+RS02FNoqBxNq79Rsrs5zS79xq7mzVvQ8J/cB8m76LTdyZlddfDqvbosZCvqkcRKOKmdQsyxBRvZbIy3S/IA3xwANYVzxXHRkVTaUOnOovB7oIxw//WsQ5SB0ASHMTAvC01eBBcboL567LU+I2kOi1UnXZye1QlrD//xVk1lvDdWAznr5E7rJd5/PlL35GjFSEtpDeXVcSipr14yPrW6n65X10l9bSMAhctWMXKCDUAUmmGiBI6P+HU7Rly8KgrS0WgkmDjNHsR+Zd+g+9YTbB28Kaqshq3TpSn+uPsTuvS1O8uyFNDnoJzBWBsh5BkOZ5jLQ4bc9WlyfMme/blmqc2iJJI901y1qINOWr7/F2nkUhHlQPZtMcgbo12TA/Txj/b2urQ57D0DzcFoM5sdQeDB7iXr2FNRbPBqhYuxcQgsqF0LW3z+ANNhEuk+DGoRy6mI7PzCvNEzUV01cb3YA8SiyDSnpkNyoUZbjkBLo34OmDdlCXfMg+mdBfbVccpgByivytDNylXSR1KaFIm4y6M7X0X/id0oc/oG/lm+4FPSU61Q/oQQBIzNiz62D3W32/gV8WEeh9yH1/UPd2oCf3yQSubFj1T3mDT5iHyBH3pGjwX+1Kfpo0zCAzNTmBI/7pU4EXt8OE+Ef6+K2l2r1NzVygKvvFAbuyrUWarJhE9zAB6G8Oo760I/6IYjjfhNqVhE/RHhpFe8+KJc8DZEPdtfTTkFRl1pkvA/pY3ihKdjeQCIXP/bck+07yakiBAp8d1l6wpDBWdaUQ7XZfeNQ5xnif8h5+Im2NGUDAqIj6tvqRufvIN/xeehvFM/N6qCUkfVAS+pfd0r2jgmnhrP7xonLf7Cgt/VsyY/Hn1WyjivLN8ShDHqTo7Dlt6yG4hD7jqHNCIToXKbh8QJaYqi5xlRPkcqsgz0SwhguFsWYbdA2vP6k7idmRj17JKoyEHZQOmpHvIelJkU+54JuXg3SeTbU3MhApONCDpZaQ17JmvEr4oFGX1IX1xbuF68ouK7GOafryvO0F4vK4VRgBrKi74DNeLbptYY1TugeO25qXgwFsgwL/5mv/pIvM7RK5tf/fMA2TRjlkVrZ/gAfzaUDVuj8dM6LIMJmPkrzjPL/nZ6QUV6jNVbBZBYQYowT42t+RzeqNI+RnFmcyV5iyRov0GvcS8nklFcAYDKEmplTgcW41rJPbamZdHwDc+DafdDv2JJkg9dagFZSDh84gR12j8ZXFeJRnIOi66ITZHwTE96qR8Bgi5AGP2WfLuLRoJfj6UWbqtmtFM3eECY5hufSZcS1ql4i4cy9m/21cLQUKgWFu2gOoMiGzkiOwRFgEpDGgt1nLxlBw4EesQdVTTWuTnhREopsxVQNfXNa1ujc+GTYgWyh+3spmwx2IbUMactT6dM3aNbQy9gPF29TTxVP8ZSlFc5wTu2tZg9cs2QZBQSls/gbmYBY04p1ByoydGL4ZmIJcGEpLk5UiN9welWjSHB8z3UFFBbOTi+j4pgIfw/Wq6OgNNMYQii3Xyx00V7wpzad/hHzZGqpXjZkUh3/bPtVaIt57aBE/dfgQ/HnuGQgbd3cxfWVyDRe+G2KBPZ1y401LN5GiwxitAs+wc/bhODMr6065woLFYkmrkfLEwhmiWeGEjjpL7XGE1cUbdECeAyCGrEew7kHOppHvaBcUrsyOf7reco7kCC+5sDDRqO0P//gCYrjWQOQMIELBEQWDou0bQ77qTX0ojtHyTagwblvGpw1iBs+QZpprYA6vdBM1r75zNDrALSIGdTqHmJ2GYxV0JYKqkjDuALHOlcuYXckiOHWVfSF/snbwRPu0al/+E6W/ITSVtkQ6PRfzN4Y/hyusxSIX6AaTPSK6fNkKCC8JtNG1ZRB3x0nVaV6MMCbGke9vHAVFsnEefHljfZhc0wr+WyuSJpT5Q/AQhmRqtJ4hwnKYMbE8z9MuW6yaF3VORT2alNraGoqn5/kXVjGA/q+YUJa4VHPFdGj/1YVSbbr8riDWVYc74p+YUiQ1+JmYPuZkE4gQJhlyWlQkk94GYO4YXbBvzBFvWDO3P5znf+1gqKpMXy9h0y/Co8uuuivBpKDzZAbU2kqzLFf48SFDru8eXuMkLJ04qhQDdQW6+lHRbZSHl12aO//B8BAQaYM+6ypJET6r8b1+jHL41rVXxUqoA/yINORiGOOQpAcO+au1b+2QiFEHJ2hfosfrPeOXE1u2NRCc9dEf3J6ayhLW341vcW2cWNVpWfkfhJ9zLnjXf/rtxPCqeZ772puPKj5I6apOBPNQRZfQmQlahzFX7ruluhWFQzkEGylIKD1kceKE3DetkFJm8l1L8ct1V+4H2Ju5tm1sxpDFGfGElWHEplUQ9cMSBKewzrGjVrr0Wm3W8HwBkzOaOTeiTWYJ9U18+aaf1FV/wtJE6vkZAgBUs8I9jHqEeybjyomBevXRCo4jrlsFrNRADKR9yM1dQSbGyBi8wqjThmEk1sHvSG4UyZScyLGkxweQvfXhoam4nUp9G3clChZZeckgIex9929sCLBjdJuGmtjrh09uXmyVOrvVf8l1hjjTflbuhYw0IHYJMwkWU0Z2qspvkDqwnKW5dE4Q05wgDzTIqSLwiiBc63yq5jQLemSLhAJUR2BOacVZG+aCJhX+SJ0kVZ0GyJk9pKGAHmXl0aLMudXKnxgi2fpn+0bczAUzc+6w/+mdyYessK/9lDWtKTDWGC6HcNGkDDJNqc93LNoWTZGBG/6vwlt9ZhpghQI3S68pR0BVkJiggNzcICCyj5IWSsjZ4lIry+q+HXSCExLpkcoszFOBA0eRq7QW8KucIvHueI0GVneKgXc/75kwuRIOd5On7F+5djyyetoHRZvCHDDxoUWcXD7y1djQM6VExP0z41VPYyT/yEuo4aa33SDyxEV/Pf9Sr/Mg9POVkNfLBfbN32fPdAMVI9na/Jc/crBwQTjf6bwjk8nf0egKdX45SXBjAIULWrdM7Zv1BsyYIYiF81v15H0inCneuN7JqEwAqBMdaRCfwialhrGeWw4VmBfejXGH+zkelV9qJs/BfYCr8Ve2LcttX1SNCDpoUeBv1l/4wndxr1TQov5VIOzwc0r7ATSXD7L1HUOZ/zv/FVajN+BIQKysbRQngAlBbJWuoRvQ5MitvNqMhDhVVN/Ibv7N6Rz+pQ9ag3Fp1pfOGhziNK1hx1frFHeIDinxlktUPwDxpU8VjrH7BKhci8O7+DIQqSOy2Zgh38jSju51wLLgTe2NpnKjXNsXPQK4qLCfqg/3C04GLWekYABYHSnE57ZO1yWy3RsqgTyNaNklc5ftTUq3cuN3Ty3E92vPfsaDrUkEvhn6bpaaYKNUA92G9RYLYXEWPEyq9iX7ocmwkIcliqolk/mIu3GLJCMwXN9ATGDqalWJRqRm0/cKyB8yKLSZh7zS/vJS/2KHrXGT6OFi7S+TWN55yO3hAESCitxX3WUQVexRaSNtXgV+lGJIF7ziO9XHFRh5Y1roWeSCW4TyOSKJ6VUmBnjkdnayZ922fMbYrxfkw/csPu3EW1/vpRE1vl6OzoFzN/kcuvKhxfOcDZUM4Dg87K1b61njNm+PRSa20d5YpFY/P1SE7bs3PX8NXJ/f0B58KL5TRCUUDFZJlJiX0bOSf/APafCBThM1MyOAFywb3tHtET7Ew/iN45GdGvipSrEZx2dfIo1WG7Mlxrb3rHCUfJdP4/MNApa5KWwAnHDHx7i/5+IlelYIMpffx6BxSV5TcCPVGVskmJ3tmlfQFNCE1dxGSzOS8GZ2EI+WQTVnHiLXVoPgYEHAzO5N45AkVLSOh3TA2SwYOWOMaOPkVqN2li6vHfMMfI8SWgI1FKbLpbuCK+06ZrZBHOBupXji+E7DuwV7pSnp8Vm1csCgDSa6l2p3ESyEay/THctC/ZsByHvimqskLOWAfDjA/scfm2o7WIahBWNDvcy0PxrqwAoUE7xEMKLUc6ph1TpwTGRYf9+Fh4ML3JFwluqGEtBNsPfQzKMawrZoqbM6tI74DLuhPFbExQjZ3488wVQsZ7rCZFFNJbYLF6htYgBn4SaT3Zd09EzXFo6v4DX0QE+lpCfkt8fwky4vLe/gGgppECrMutlMsq2GVUagQ1m9UebS2hPTxOUJ4w4W++Fmf5uvNq5ah4b0IOlDG4WHTMF7h0CDPz7NgX71elc/8hcVOBSipv1+l6VHegJw3x/Z3+AI17plSQt+RFdrpK880UvbJH27/wZMViVBwwK8aKGjUwWV7EPnqt8kRWj164Nd8bXi3SlKGdwQA9snFnbZb0XSOVVGaSOwxwzyyDAlBXmgHm6nnVUugdaP3LH3EU/lhXFapGg9qL0yt2GRzZRPSLSN8gYg3qIbEMbQ4aU6yf1TK8luEX/j02qYPqE1qnA8nWpQYc9ACjD6ONwHXPcfyEUcRfX8H/uta/QNn1WAoFugcMBXfz33v4rX2KoOdUGtoTEQRNOTz+CJsvnUuLl/JLq27m3GXY0GWOSxkwomHbwuejh8XroBDsmzhfULIqdC6LC9fpQFulFmw8K8FV/GgVPUoi6NNS1uFbBUVu3Lwt8uIeqhu74GaH/Yih/B+KuXzaK2bvNJ0dE/4O1amebqh9Se88haw1rk9xm+OR2tl4v0Q1PnN6ckk8ZdVPamPWmmsOc8yN0butUWOh8czcLGHCb1mqKhPNiKDslsxWnw7ht9swMAg6/RIfpOP6ttGb2VPDOH+o0gMrdFsTTm8EYrumJEDoqX2me2IPi6SVRSxf8nv9Ki7SIaeYAHZe09aRhMvhNSESaXTFFgDqAaZ7hrr57827rX9s8WmIktjUjN5cDKhmQtRRInIzPauDqsb5F2i7ma5/UFskBuZqtRV2k4sH1Yo2UDUhxnjVnUZSFEVuWqNaH4HbH1ifgDs2ehP2tpo+dFJqkvD1aTgphkP2V6MN36nrD12yuhtLlADNYEsHtmr8MeVI1vG7c5lgAZ4HEJPDmYgKXKLFENZb603+4zSKkGSqnpa6fg7xNLF3SX2jTbmmDoL5Cmi3voHoqxOijxlwOxEOvvJHUtVy2c715P90KqV4+0loXBhdTzjSmbLYRheJb+1cIlpcUaRApnDw44aQRlx9B6EPLwGP7yYwqfdWqmuY5T7siCIsByiOeyE+tE49RvMxC8LWGE5qr/K85D1u+5q7FLO7BMZphvk0MNwFrotlw1ydLTWuB64+/Iw63aQYHtYa7earUxAdQaXZiyIJdkOcsAqo4tPeoFB3v5WIKZmd3PkwNjlWtN5hFzxSow5hUp6dOKwV+T4kvHTtXvRHMElXj1VJzQdcwjumplV+XbXyh0B1lM9Q8Ew/Ga3G4jxTYhokq2ZRU210OBd/JRg9Gb6OgMHAsLcCNLpt7lLMWiygk02IJjim9JGnHrTCl4VrenU+RXtm9gAh9gSOPFBZGdSwuyQN1PF+MvJPJlJJ017a8eNgVZiYx8gfGaIeY9YJm0Qu7b8pesXR+8dA7GMBvrGS9CtKMaWmoLb8g7m+LFYl0XLHAhwMwZvwf9NM1ii3mwvTlkOuDFH5RJjfWuP+YScYpsKSHyQbpKtDINOvk5CwT/3UnT5HX1Rjg4xtfedzKR3+rfhsiQ5sYWVJd1ssXmWhM6YbE1y5hMgpsoWtLcyu4tOQrRrdvGeF36t1Iwhequ7iH72YTWO0QNgcM1lOnkNJR5iFQeVpJ1X8tIDCkSLtA8MmR6+yUA0JdngT1eP+Yn6znpB7O4qH8jnVBTNmB7Q+g5jaoiojcB4GgjZ2rGwIijUPdMe0HM+AJ61Zu464sN0cWaagFnTiVw1JDjgSWc1yJM8OSSjNlA54v2hlF573ZaF++znlXbTMibrX54UwQQsJTm8kZhRahYROHLCaa14g+7IkNDmCbwQMgUue46m8Jy6HxJ3xaVWtgVCGemdSlQobJxZIwZADN6a01vnxvgjVvBF8I60wtxs92a91WOiPIbRhdbUOAi8+ejpquHxED4lblKbq2bDbX80/+Q9nLb6MXM2jykkLJw7kwWOXfsuWsvXjjEAjsePjPDWCZTES3n44UBcXs/FHTG0oDfAJOiBIAPYg9KmxZIODNwUGDFiVbsmWw15XTTqjmCd8mFEiJ2u8ZWM3Atfp6s/KYey7kHLBpXqMBxOkqrWCoBJdk44+VCRSG1dqLb7jLa2G3WICfZxfCzJnH5INNWNzrxsxOwlzkKtzx3sV5Yyl7IARX3yIA4XpJyFyP8mNnrC58DlWJIPCIzVo5QZtNSo16s4zH4g/jBr1uTqG1VqMUHC+K0fxnIxrRtnPmSQXo0l8ONZqSox1CHAf+nQdBJRnjwc/04YxYCiohrlfRAnv0WJxuUwMoxgBPpemL4uXBhR3h4gn5of15HnoMXSpz+TvsRJEW7g16NSsotwxj0H0b8XIUM4wiyFF7EyAa3oPeAkIF8x9JkZH6AxnH2iwmNgK5FsDs1VJLgIr0qTsgrply4XE7CTtrewDC1HawaEpmInAmbbKAfMlctPHcpZy9Y2/uCm/RGf+PY28U59A1d3Yy7uzfe8dkd971GKnH+eAiIVWDDX+2J3sgvgMwIOCdA1Fx0FMu4WJLc6y1ngMHgW2Rq+kbJC0kwUOdGEea1XvTkAklhCTWN6nbPxJw6lW5ZOmmS4lMvf6eQ9c5+6+kvRvzwsor+lomaCBVYJJyTe8i74Y5XoGiVvT5tJK9Jtpb0XmITyLNeYf+Wb6JryiM+caG1i0xyVpjNhsL7RolHYVAtjTHrmVbjfrWlz0m6QtM4ldf9kG4w4hg570QYjcRZ5hnMG92nwhlnr0HztAbTEBOVxVS/0FJeTHk9jMd8dM0TW8NzU3RXcVCyUwqFCiZr1pebE4uiFsmduOhA2STZHd1SK3LU0dW3Qe4USXURlT4ZDOIjdrixVABSrmuIEL9gTIFcFAGJJtrZ60DYwosJ23SN+fBfsfkQ/0E7BMiGHUCqle/mxVklqDH5pFgVSth8I2KVopT9qeVGL0q0DTn5x9eF6K4VK6CCRVKfxs+wYCMqsa4FJAYWAMEDyMd4wFmXA9ij2OKYY8br8YwUiCIum6M3Ni3nLqtoMta9ZDnri/dUS7kHloK/+WYvgDg2aOFIIFd5Z+QAH3FvryGClbsYNaAuLneqTbu+x/FlWcOgztLdiz00ezbbXkgv48UAJ8l9ZDEYGUe3wajycAlVDwn1VYL0QULSPskoX/R1GZ57KgIrsXQzfyy86OdVM0OHAHCXNRvx3WGek/k9XLD0NnlJzz7CxzzcVxhPDSzxkEaF2Y9PQRwgsw57jE8lJv8XPxKRL7d+cSMAjORmi9c9QYM1S7F9FdYvUPMbD95zDmfBgKnEQmCA6D88dEg8UOsqC8iNB7+ZKvcnMkKwXlxDY/YTwiUwdVJk9FQSPLa8DoKWN0UJTcnkTVmdf8XeZuQOvgJuOSQbIvkGkW5TFZY5CefHliw1PkF6hNZ9IroUCMgS3v7oLBft16VvzOYxbo17jRtaDqkckpJFVwuEyumzSRXvJm9CEZVb7RbGqXuFKZr8M4uUbRZMMHuCT4Umblz2MWk0MM3Irpg+/I592n3aRqeBEjUvL03vFsQknbYTFglqFltYtLp8C0YBYFCguP4pDGUuEEguIccrWrnYapSSatuCvk3mV+2INyLOzw0lKthnqzzPx+qzEiOAbmJ27fHUuqWKNj68tYRyIGkPlyBj8iGuN6uXenyKz4ApMpj8FEcO8v9rQ1riiuDsYwnxLWW0Y0cqx8lFb/8kvHI0icyqfWGJfoFxc6pyobSDcCkgmAdrjWrXogfnCuYn922cTi6Qb7vHWByJdspvYUhCVID1g6l64Al8AtBanESc6h7C/LRY5bcBVtUsrwB+V0P6GTjIMgBhrkadFIHsSc077Jux+kxSA5Z7Y5SK1QEVEhEsy1nC1Xy8Lbm6mhDqemsrOcyKPWm0TfDF8xxmbNXcsiO8ISeqQVEU7cmMQl6N</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      &lt;hr/&gt;&lt;h5 style=&quot;text-align:center&quot; &gt;Need Password&lt;/h5&gt;&lt;hr/&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="Notes" scheme="https://hotkang.cn/tags/Notes/"/>
    
      <category term="面试" scheme="https://hotkang.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JS" scheme="https://hotkang.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>GitHub修改邮箱后</title>
    <link href="https://hotkang.cn/2018/GitHub%E4%BF%AE%E6%94%B9%E9%82%AE%E7%AE%B1%E5%90%8E/"/>
    <id>https://hotkang.cn/2018/GitHub修改邮箱后/</id>
    <published>2018-07-23T08:05:18.000Z</published>
    <updated>2018-08-09T16:51:23.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改邮箱后。。。-待完善"><a href="#修改邮箱后。。。-待完善" class="headerlink" title="修改邮箱后。。。 [待完善]"></a>修改邮箱后。。。 <span style="font-size:.5em">[待完善]</span></h2><blockquote><p>有一天突然发现自己的提交记录变少了？？？？绿色少的可怜？？于是我就回想自己干了嘛！！！！<br>恩…前几天换了个邮箱…并且毫不犹豫的把旧邮箱删除了…</p><p>把旧邮箱重新添加回来,绿色也回来了！！！<br>但是我强迫症,不想把旧邮箱留着…</p></blockquote><a id="more"></a><p><br><br><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><ul><li><a href="http://blog.51cto.com/dangzhiqiang/1657864" target="_blank" rel="noopener">参考链接</a></li><li><a href="https://help.github.com/articles/changing-author-info/" target="_blank" rel="noopener">Changing author info</a>。</li></ul></blockquote><p><br><br><br></p><h2 id="全局Git设置"><a href="#全局Git设置" class="headerlink" title="全局Git设置"></a>全局Git设置</h2><hr><ol><li><h5 id="全局设置用户及邮箱"><a href="#全局设置用户及邮箱" class="headerlink" title="全局设置用户及邮箱"></a>全局设置用户及邮箱</h5><pre><code>$ git config --global user.name &quot;hotyan&quot;$ git config --global user.email &quot;hotyann@163.com&quot;</code></pre></li></ol><p><br></p><ol start="2"><li><h5 id="命令行查看全局设置"><a href="#命令行查看全局设置" class="headerlink" title="命令行查看全局设置"></a>命令行查看全局设置</h5><pre><code>$ git config  user.name #hotyan$ git config  user.email #hotyann@163.com</code></pre><p>补救措施只对以后的 commit 起效。（解决了修改邮箱后的绿色~）</p><p>如果想修改之前的作者信息(删除旧邮箱的前提下拯救之前的绿色),Github 给出了可靠的官方指南：<a href="https://help.github.com/articles/changing-author-info/" target="_blank" rel="noopener">Changing author info</a>。</p></li></ol><p><br></p><ol start="3"><li><h5 id="取消全局设置用户及邮箱"><a href="#取消全局设置用户及邮箱" class="headerlink" title="取消全局设置用户及邮箱"></a>取消全局设置用户及邮箱</h5><pre><code>$ git config --global --unset user.name $ git config --global --unset user.email </code></pre></li></ol><h2 id="修改密码后"><a href="#修改密码后" class="headerlink" title="修改密码后"></a>修改密码后</h2><p>博客push将失败,需要重新添加SSH。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改邮箱后。。。-待完善&quot;&gt;&lt;a href=&quot;#修改邮箱后。。。-待完善&quot; class=&quot;headerlink&quot; title=&quot;修改邮箱后。。。 [待完善]&quot;&gt;&lt;/a&gt;修改邮箱后。。。 &lt;span style=&quot;font-size:.5em&quot;&gt;[待完善]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;有一天突然发现自己的提交记录变少了？？？？绿色少的可怜？？于是我就回想自己干了嘛！！！！&lt;br&gt;恩…前几天换了个邮箱…并且毫不犹豫的把旧邮箱删除了…&lt;/p&gt;&lt;p&gt;把旧邮箱重新添加回来,绿色也回来了！！！&lt;br&gt;但是我强迫症,不想把旧邮箱留着…&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://hotkang.cn/categories/GitHub/"/>
    
    
  </entry>
  
  <entry>
    <title>基于GitHubIssue的评论功能</title>
    <link href="https://hotkang.cn/2018/%E5%9F%BA%E4%BA%8EGitHubIssue%E7%9A%84%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>https://hotkang.cn/2018/基于GitHubIssue的评论功能/</id>
    <published>2018-07-19T11:45:13.000Z</published>
    <updated>2018-08-14T17:18:58.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加评论功能-完结"><a href="#添加评论功能-完结" class="headerlink" title="添加评论功能   [完结]"></a>添加评论功能 <span style="font-size:.5em">[完结]</span></h2><blockquote><p>可以手动添加issue，这样非常简单，但是如果文章越来越多，手动添加肯定不现实。因此可以写脚本来实现自动创建issue。由于本人并不想把别人的脚本直接搬过来，所以自动创建issue暂时被搁置…</p></blockquote><a id="more"></a><p><br><br><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="http://wingjay.com/2017/06/08/rebuild-personal-blog/" target="_blank" rel="noopener">参考链接1</a></li><li><a href="https://hydroecology.net/using-github-to-host-blog-comments/" target="_blank" rel="noopener">参考链接2</a></li><li><a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html" target="_blank" rel="noopener">参考链接3</a></li></ul><p>参考链接1&amp;2都是参考的链接3,建议先看一遍链接3,了解大概流程后再细看每个链接。具体代码参考的链接1。</p></blockquote><p><br><br><br></p><h2 id="实现评论功能"><a href="#实现评论功能" class="headerlink" title="实现评论功能"></a>实现评论功能</h2><hr><ol><li><h5 id="手动创建Issue"><a href="#手动创建Issue" class="headerlink" title="手动创建Issue"></a>手动创建Issue</h5><blockquote><p>进入Github博客仓库</p></blockquote><blockquote><p>单击 <span id="inline-green">Issues</span></p></blockquote><blockquote><p>单击 <span id="inline-green">New issue</span></p></blockquote><blockquote><p>编辑Title、Leave a comment</p></blockquote><blockquote><p>单击 <span id="inline-green">Submit new issue</span>完成</p></blockquote><blockquote><p>获得 commentIssueId 值</p></blockquote></li></ol><p><br></p><ol start="2"><li><h5 id="文章添加commentIssueId字段"><a href="#文章添加commentIssueId字段" class="headerlink" title="文章添加commentIssueId字段"></a>文章添加commentIssueId字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我是置顶博文</span><br><span class="line">date: 2018-07-18 21:30:35</span><br><span class="line">tags: 留言板</span><br><span class="line">categories: hotYan_博客之路</span><br><span class="line">top: 100</span><br><span class="line">commentIssueId: 1    </span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="3"><li><h5 id="添加-github-comments-swig-文件"><a href="#添加-github-comments-swig-文件" class="headerlink" title="添加 github_comments.swig 文件"></a>添加 github_comments.swig 文件</h5><p>在/themes/next/layout/_partials文件下新添github_comments.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">/*内容如下*/</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div id=&quot;comments&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;post-header bg-&#123;&#123;site.default_post_color&#125;&#125;&quot;&gt;</span><br><span class="line">            &lt;h1 &gt;留言区&lt;/h1&gt;</span><br><span class="line">            &lt;p&gt;本站留言区搭建在 Github Issue 上,请点击下面按钮进行留言。&lt;/p&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        function loadComments(data) &#123;</span><br><span class="line">            var commentUrl = &quot;window.open(&apos;https://github.com/hotyan/hotyan.github.io/issues/&#123;&#123; page.commentIssueId &#125;&#125;&apos;)&quot;</span><br><span class="line">            $(&quot;#comments&quot;).append(&apos;&lt;div class=&quot;submit-comment&quot; style=&quot;text-align: center&quot;&gt;&lt;button onclick=&apos; + commentUrl + &apos; class=&quot;btn btn-primary&quot;&gt;留&amp;nbsp;言&lt;/button&gt;&lt;/div&gt;&apos;)</span><br><span class="line"></span><br><span class="line">            for (var i=0; i&lt;data.length; i++) &#123;</span><br><span class="line">                var cuser = data[i].user.login;</span><br><span class="line">                var cuserlink = data[i].user.html_url;</span><br><span class="line">                var avatarlink = data[i].user.avatar_url;</span><br><span class="line">                var clink = data[i].html_url;</span><br><span class="line">                var cbody = data[i].body_html;</span><br><span class="line">                var cavatarlink = data[i].user.avatar_url;      </span><br><span class="line">                var cdate = new Date(data[i].created_at);</span><br><span class="line">                var dopts = &#123; month: &apos;short&apos;, day: &apos;numeric&apos;, year: &apos;numeric&apos; &#125;</span><br><span class="line"></span><br><span class="line">                $(&quot;#comments&quot;).append(&apos;&lt;div class=&quot;timeline-comment-wrapper&quot;&gt;&lt;div class=&quot;avatar-parent-child timeline-comment-avatar&quot;&gt;&lt;a href=&quot;&apos; + cuserlink +&apos;&quot;&gt;&lt;img width=&quot;44&quot; height=&quot;44&quot; class=&quot;avatar rounded-1&quot; src=&quot;&apos; + avatarlink + &apos;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;timeline-comment current-user&quot;&gt;&lt;div class=&quot;timeline-comment-header&quot;&gt;&lt;h3 class=&quot;timeline-comment-header-text text-normal f5&quot;&gt;&lt;strong&gt;&apos; + cuser + &apos;&lt;/strong&gt;&lt;span class=&quot;post-meta&quot;&gt;&apos; + cdate.toLocaleDateString(&quot;en&quot;, dopts) + &apos;&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div style=&quot;display: block !important; padding: 15px;&quot;&gt;&lt;article class=&quot;post-content&quot;&gt;&apos; + cbody + &apos;&lt;/article&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&quot;https://api.github.com/repos/hotyan/hotyan.github.io/issues/&#123;&#123; page.commentIssueId &#125;&#125;/comments&quot;, &#123;</span><br><span class="line">            headers: &#123;Accept: &quot;application/vnd.github.v3.html+json&quot;&#125;,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            success: function(msg)&#123;</span><br><span class="line">                console.log(msg);</span><br><span class="line">                loadComments(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .timeline-comment-wrapper &#123;</span><br><span class="line">        margin-top: 0;</span><br><span class="line">        position: relative;</span><br><span class="line">        padding-left: 60px;</span><br><span class="line">        margin-top: 15px;</span><br><span class="line">        margin-bottom: 15px;</span><br><span class="line">        border-top: 2px solid #fff;</span><br><span class="line">        border-bottom: 2px solid #fff;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-avatar &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: -60px;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .avatar-parent-child &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-wrapper a &#123;</span><br><span class="line">        color: #0366d6;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        background-color: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-wrapper .avatar &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-wrapper .rounded-1 &#123;</span><br><span class="line">        border-radius: 3px !important;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment.current-user &#123;</span><br><span class="line">        border-color: #c0d3eb;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        border: 1px solid #d1d5da;</span><br><span class="line">        border-radius: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment.current-user .timeline-comment-header &#123;</span><br><span class="line">        background-color: #f1f8ff;</span><br><span class="line">        border-bottom-color: #c0d3eb;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-header &#123;</span><br><span class="line">        padding-right: 15px;</span><br><span class="line">        padding-left: 15px;</span><br><span class="line">        color: #586069;</span><br><span class="line">        background-color: #f6f8fa;</span><br><span class="line">        border-bottom: 1px solid #d1d5da;</span><br><span class="line">        border-top-left-radius: 3px;</span><br><span class="line">        border-top-right-radius: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-header-text &#123;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">        padding-bottom: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-header h3 &#123;</span><br><span class="line">        margin-top: 0px;</span><br><span class="line">        margin-bottom: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment-header-text .post-meta &#123;</span><br><span class="line">        margin-left: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">    .timeline-comment article p &#123;</span><br><span class="line">        margin: 0px;</span><br><span class="line">    &#125;</span><br><span class="line">    .text-normal &#123;</span><br><span class="line">        font-weight: normal !important;</span><br><span class="line">    &#125;</span><br><span class="line">    .f5 &#123;</span><br><span class="line">        font-size: 14px !important;</span><br><span class="line">    &#125;</span><br><span class="line">    .submit-comment .btn &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 6px 12px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        font-weight: 600;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        -webkit-user-select: none;</span><br><span class="line">        -moz-user-select: none;</span><br><span class="line">        -ms-user-select: none;</span><br><span class="line">        user-select: none;</span><br><span class="line">        background-repeat: repeat-x;</span><br><span class="line">        background-position: -1px -1px;</span><br><span class="line">        background-size: 110% 110%;</span><br><span class="line">        border: 1px solid rgba(27,31,35,0.2);</span><br><span class="line">        border-radius: 0.25em;</span><br><span class="line">        -webkit-appearance: none;</span><br><span class="line">        -moz-appearance: none;</span><br><span class="line">        appearance: none;</span><br><span class="line">    &#125;</span><br><span class="line">    .submit-comment .btn-primary &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #28a745;</span><br><span class="line">        background-image: -webkit-linear-gradient(270deg, #34d058 0%, #28a745 90%);</span><br><span class="line">        background-image: linear-gradient(-180deg, #34d058 0%, #28a745 90%);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="4"><li><h5 id="修改-themes-next-layout-macro-post-swig"><a href="#修改-themes-next-layout-macro-post-swig" class="headerlink" title="修改/themes/next/layout/_macro/post.swig"></a>修改/themes/next/layout/_macro/post.swig</h5><p>在文件最后<code>&lt;/footer&gt;</code>前引入github_comments.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% if page.commentIssueId %&#125;</span><br><span class="line">        &#123;% include &apos;../_partials/github_comments.swig&apos; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="5"><li><h5 id="修改-themes-next-layout-partials-head-swig"><a href="#修改-themes-next-layout-partials-head-swig" class="headerlink" title="修改/themes/next/layout/_partials/head.swig"></a>修改/themes/next/layout/_partials/head.swig</h5><p>文件最后引入JQuery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.commentIssueId %&#125;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br><br><br></p><h2 id="总有一个适合你"><a href="#总有一个适合你" class="headerlink" title="总有一个适合你"></a>总有一个适合你</h2><hr><h3 id="选择真的太多了-先大概了解一下有哪些"><a href="#选择真的太多了-先大概了解一下有哪些" class="headerlink" title="选择真的太多了,先大概了解一下有哪些"></a>选择真的太多了,先大概了解一下有哪些</h3><ol><li><p>hexo已提供的选择</p><pre><code># Duoshuo ShortName  //多说...# Disqus ...# Hypercomments ...# changyan  //畅言...# Valine...#youyan_uid //友言...#livere_uid...# Gitment </code></pre></li></ol><p><br></p><ol start="2"><li><p>其他选择</p><p>网易云跟帖<br>来必力<br>Gitalk<br>Gitter<br>…</p></li></ol><p><a href="https://blog.shuiba.co/comment-systems-recommendation" target="_blank" rel="noopener">了解各种评论系统的利弊和效果预览&gt;&gt;</a></p><p><strong>But</strong>上面提到的个人都不太钟意~</p><p>一直在寻找!直到发现了<a href="http://wingjay.com/2017/06/08/rebuild-personal-blog/" target="_blank" rel="noopener"><strong>他</strong></a>！！是自己想要的效果！！</p><p><br><br><br></p><h2 id="独立Comments板块"><a href="#独立Comments板块" class="headerlink" title="独立Comments板块"></a>独立Comments板块</h2><hr><p>因为我的blog有背景图片，个人比较喜欢独立出来的效果，花了点时间满足自己的强迫症，<del>是自己瞎捉摸出来的</del>,不是唯一的办法。</p><ol><li><h5 id="修改-themes-next-layout-macro-post-swig-1"><a href="#修改-themes-next-layout-macro-post-swig-1" class="headerlink" title="修改/themes/next/layout/_macro/post.swig"></a>修改/themes/next/layout/_macro/post.swig</h5><p>删除之前引入github_comments.swig文件的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*删除*/</span><br><span class="line">&#123;% if page.commentIssueId %&#125;</span><br><span class="line">&#123;% include &apos;../_partials/github_comments.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">/*删除结束*/</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="2"><li><h5 id="新建GitHub-Issue-swig"><a href="#新建GitHub-Issue-swig" class="headerlink" title="新建GitHub_Issue.swig"></a>新建GitHub_Issue.swig</h5><p>在/themes/next/layout/_partials文件下新建GitHub_Issue.swig,并加入下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.commentIssueId %&#125;</span><br><span class="line">    &#123;% include &apos;../_partials/github_comments.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="3"><li><h5 id="修改-themes-next-layout-post-swig"><a href="#修改-themes-next-layout-post-swig" class="headerlink" title="修改/themes/next/layout/post.swig"></a>修改/themes/next/layout/post.swig</h5><p>在<span id="inline-green">block content</span>最后 <span id="inline-green">endblock</span> 之前引入GitHub_Issue.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">...</span><br><span class="line">    &#123;% include &apos;_partials/GitHub_Issue.swig&apos; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="4"><li><h5 id="修改-themes-next-source-css-custom-custom-styl"><a href="#修改-themes-next-source-css-custom-custom-styl" class="headerlink" title="修改/themes/next/source/css/_custom/custom.styl"></a>修改/themes/next/source/css/_custom/custom.styl</h5>添加代码如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#comments&#123;</span><br><span class="line">    margin-top:20px;</span><br><span class="line">    padding: 40px;</span><br><span class="line">    background: white;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="5"><li><h5 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h5><img src="/img/Comments.png" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加评论功能-完结&quot;&gt;&lt;a href=&quot;#添加评论功能-完结&quot; class=&quot;headerlink&quot; title=&quot;添加评论功能   [完结]&quot;&gt;&lt;/a&gt;添加评论功能 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;可以手动添加issue，这样非常简单，但是如果文章越来越多，手动添加肯定不现实。因此可以写脚本来实现自动创建issue。由于本人并不想把别人的脚本直接搬过来，所以自动创建issue暂时被搁置…&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hotYan_博客之路" scheme="https://hotkang.cn/categories/hotYan-%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Hexo" scheme="https://hotkang.cn/tags/Hexo/"/>
    
      <category term="博客" scheme="https://hotkang.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="GitHub Issue" scheme="https://hotkang.cn/tags/GitHub-Issue/"/>
    
      <category term="Next" scheme="https://hotkang.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Github添加SSH密钥</title>
    <link href="https://hotkang.cn/2018/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/"/>
    <id>https://hotkang.cn/2018/Github添加SSH密钥/</id>
    <published>2018-07-18T13:33:55.000Z</published>
    <updated>2018-08-03T10:00:23.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加SSH密钥-完结"><a href="#添加SSH密钥-完结" class="headerlink" title="添加SSH密钥 [完结]"></a>添加SSH密钥 <span style="font-size:.5em">[完结]</span></h2><a id="more"></a><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">GitHub Help</a></li><li><a href="http://www.cnblogs.com/ayseeing/p/3572582.html" target="_blank" rel="noopener">参考连接</a></li></ul><p>参考链接有整体的流程总结。跟着步骤来没有问题。但我会觉得GitHub Help比较官方？权威？</p></blockquote><hr><h2 id="一、查看现有的SSH密钥"><a href="#一、查看现有的SSH密钥" class="headerlink" title="一、查看现有的SSH密钥"></a>一、查看现有的SSH密钥</h2><pre><code>$ ls -al ~/.ssh</code></pre><p><br></p><h2 id="二、生成新SSH密钥"><a href="#二、生成新SSH密钥" class="headerlink" title="二、生成新SSH密钥"></a>二、生成新SSH密钥</h2><ol><li><h5 id="根据实际情况填写GitHub电子邮件地址"><a href="#根据实际情况填写GitHub电子邮件地址" class="headerlink" title="根据实际情况填写GitHub电子邮件地址"></a>根据实际情况填写GitHub电子邮件地址</h5><pre><code>$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; </code></pre></li><li><h5 id="文件生成位置"><a href="#文件生成位置" class="headerlink" title="文件生成位置"></a>文件生成位置</h5><pre><code>Enter file in which to save the key (/Users/hotkang/.ssh/id_rsa): [Press enter]  /*按回车默认文件位置*/</code></pre></li><li><h5 id="设置push密码"><a href="#设置push密码" class="headerlink" title="设置push密码"></a>设置push密码</h5><pre><code>Enter passphrase (empty for no passphrase):Enter same passphrase again: /*设置push文件时的密码,回车默认没有密码*/</code></pre></li></ol><p><br></p><h2 id="三、添加密钥到GitHub"><a href="#三、添加密钥到GitHub" class="headerlink" title="三、添加密钥到GitHub"></a>三、添加密钥到GitHub</h2><ol><li><h5 id="打开-ssh-id-rsa-pub-文件-将内容复制到剪贴板"><a href="#打开-ssh-id-rsa-pub-文件-将内容复制到剪贴板" class="headerlink" title="打开 /.ssh/id_rsa.pub 文件,将内容复制到剪贴板"></a>打开 /.ssh/id_rsa.pub 文件,将内容复制到剪贴板</h5></li><li><h5 id="单击右上角头像"><a href="#单击右上角头像" class="headerlink" title="单击右上角头像"></a>单击右上角头像</h5></li><li><h5 id="单击-Settings"><a href="#单击-Settings" class="headerlink" title="单击 Settings "></a>单击 <span id="inline-green">Settings</span></h5></li><li><h5 id="单击-SSH-and-GPG-keys"><a href="#单击-SSH-and-GPG-keys" class="headerlink" title="单击 SSH and GPG keys  "></a>单击 <span id="inline-green">SSH and GPG keys</span></h5></li><li><h5 id="单击-New-SSH-Key"><a href="#单击-New-SSH-Key" class="headerlink" title="单击 New SSH Key"></a>单击 <span id="inline-green">New SSH Key</span></h5></li><li><h5 id="填写Title并将-ssh-id-rsa-pub文件内容粘贴到Key"><a href="#填写Title并将-ssh-id-rsa-pub文件内容粘贴到Key" class="headerlink" title="填写Title并将/.ssh/id_rsa.pub文件内容粘贴到Key"></a>填写<span id="inline-green">Title</span>并将/.ssh/id_rsa.pub文件内容粘贴到<span id="inline-green">Key</span></h5></li><li><h5 id="单击Add-SSH-Key完成"><a href="#单击Add-SSH-Key完成" class="headerlink" title="单击Add SSH Key完成"></a>单击<span id="inline-green">Add SSH Key</span>完成</h5></li><li><h5 id="如果出现提示-请确认你的GitHub密码"><a href="#如果出现提示-请确认你的GitHub密码" class="headerlink" title="如果出现提示,请确认你的GitHub密码"></a>如果出现提示,请确认你的GitHub密码</h5></li></ol><p><br></p><h2 id="四、测试SSH连接"><a href="#四、测试SSH连接" class="headerlink" title="四、测试SSH连接"></a>四、测试SSH连接</h2><pre><code>$ ssh -T git@github.com</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加SSH密钥-完结&quot;&gt;&lt;a href=&quot;#添加SSH密钥-完结&quot; class=&quot;headerlink&quot; title=&quot;添加SSH密钥 [完结]&quot;&gt;&lt;/a&gt;添加SSH密钥 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://hotkang.cn/categories/GitHub/"/>
    
    
      <category term="SSH" scheme="https://hotkang.cn/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>我是置顶博文</title>
    <link href="https://hotkang.cn/2018/%E6%88%91%E6%98%AF%E7%BD%AE%E9%A1%B6%E5%8D%9A%E6%96%87/"/>
    <id>https://hotkang.cn/2018/我是置顶博文/</id>
    <published>2018-07-18T13:30:35.000Z</published>
    <updated>2018-08-12T05:39:11.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h2 id="❤️About-Blog"><a href="#❤️About-Blog" class="headerlink" title="❤️About Blog"></a>❤️About Blog</h2><p><br></p><p><strong>作为学习过程的记录总结。</strong></p><p><del><strong>目前没有SEO优化,博客文章也不会被百度、Google搜索引擎收录。</strong></del></p><p><del><strong>如果这都被你发现了❓❓留下你的脚印❓❓</strong></del></p><p><strong>❤已Google SEO优化❤</strong></p><p><strong>来了还是冒个泡❓</strong>🐟🐟</p><p></p><p><br></p></blockquote><a id="more"></a><p><br><br><br></p><h2 id="❤️About-Link"><a href="#❤️About-Link" class="headerlink" title="❤️About Link"></a>❤️About Link</h2><hr><p><strong>本站的参考链接都是自己过滤后的,可能来自各大官网文档、Others’s Blog、简书、掘金、社区或者外网。如果涉及到外网链接打不开也没有关系,可以参考我的文章。</strong></p><p><br><br><br></p><h2 id="❤️About-Post"><a href="#❤️About-Post" class="headerlink" title="❤️About Post"></a>❤️About Post</h2><hr><p><strong>本站文章主要由【 <del>优质</del> 参考文章】和【个人记录总结】构成; 网上资源玲琅满目,如果每个人都一篇篇筛选,浪费时间走弯路; 记录自己 <del>踩坑</del> 完成过程并在参考文章的基础上进行个人总结。</strong></p><p><br><br><br></p><h2 id="❤️About-Comments"><a href="#❤️About-Comments" class="headerlink" title="❤️About Comments"></a>❤️About Comments</h2><hr><p><strong>本站唯一的评论搭建在GitHub Issue上,点击<span id="inline-purple">Comment</span>跳转到博客文章对应的 Github issue 处,在 issue 下进行评论,文章展示时会实时获取数据。还在等什么❓❓【<a href="https://hotkang.cn/2018/%E6%88%91%E6%98%AF%E7%BD%AE%E9%A1%B6%E5%8D%9A%E6%96%87/#comments">测试</a>】一下❓❓</strong></p><p><br><br><br></p><h2 id="❤️Problem"><a href="#❤️Problem" class="headerlink" title="❤️Problem"></a>❤️Problem</h2><hr><p><strong><del>手动生成Issue,<a href="https://hotkang.cn/%E5%9F%BA%E4%BA%8EGitHubIssue%E7%9A%84%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD">实现评论功能</a></del></strong></p><p><strong><del>文章详情界面点击不出现桃心,理论上应该是有效果的吧❓❓<a href="https://hotkang.cn/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E4%BA%8C/#%E5%8D%81%E4%B8%89%E3%80%81%E7%82%B9%E5%87%BB%E5%87%BA%E7%8E%B0%E6%A1%83%E5%BF%83">可能源码被我改砸了❓❓</a></del></strong> 💔</p><p><strong><del>Gulp压缩不成功❓❓已用<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a>替代</del></strong></p><p><strong>刷新一次不蒜子PV统计加2 ❓❓理论上加1才对</strong></p><p><strong><del>文章目录<a href="https://hotkang.cn/2018/05/29/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E4%BA%8C/#%E5%8D%81%E5%9B%9B%E3%80%81%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">只显示大标题</a>❓❓</del></strong></p><p><strong>自动生成Issue❓❓</strong></p><p><br><br><br></p><h3 id="博客文章预览-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-About-Me"><a href="#博客文章预览-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-About-Me" class="headerlink" title="博客文章预览&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;About Me"></a><a href="https://hotkang.cn/archives/"><span id="inline-blue">博客文章预览</span></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://hotkang.cn/about/"><span id="inline-green">About Me</span></a></h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h2 id=&quot;❤️About-Blog&quot;&gt;&lt;a href=&quot;#❤️About-Blog&quot; class=&quot;headerlink&quot; title=&quot;❤️About Blog&quot;&gt;&lt;/a&gt;❤️About Blog&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作为学习过程的记录总结。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;del&gt;&lt;strong&gt;目前没有SEO优化,博客文章也不会被百度、Google搜索引擎收录。&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;&lt;p&gt;&lt;del&gt;&lt;strong&gt;如果这都被你发现了❓❓留下你的脚印❓❓&lt;/strong&gt;&lt;/del&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;❤已Google SEO优化❤&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;来了还是冒个泡❓&lt;/strong&gt;🐟🐟&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hotYan_博客之路" scheme="https://hotkang.cn/categories/hotYan-%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>在GitHub Pages上部署自己的简历</title>
    <link href="https://hotkang.cn/2018/%E5%9C%A8GitHub-Pages%E4%B8%8A%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AE%80%E5%8E%86/"/>
    <id>https://hotkang.cn/2018/在GitHub-Pages上部署自己的简历/</id>
    <published>2018-06-28T09:11:27.000Z</published>
    <updated>2018-08-03T10:55:00.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitHub-Pages-完结"><a href="#GitHub-Pages-完结" class="headerlink" title="GitHub Pages [完结]"></a>GitHub Pages <span style="font-size:.5em">[完结]</span></h2><blockquote><p>包含个人隐私信息(电话、照片)的简历不建议贴在网上哦~</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></li></ul><p>看了很多教程,发现官网是说的最简洁明了又清楚的,最终解决了我的问题。建议打开<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a>,两边参考着看更简单易懂。</p></blockquote><hr><h2 id="一、什么是GitHub-Pages"><a href="#一、什么是GitHub-Pages" class="headerlink" title="一、什么是GitHub Pages"></a>一、什么是GitHub Pages</h2><ol><li><p>GitHub Pages是一个静态站点托管服务,旨在直接从GitHub存储库托管我们的个人,组织或项目页面。不支持服务器端代码，例如PHP，Ruby或Python。</p></li><li><p>我们可以使用Jekyll Theme Chooser在线创建和发布GitHub Pages网站。我们也可以在本地工作，使用【GitHub Desktop】或【命令行】。</p></li></ol><blockquote><p>注意:</p><ol><li><p><strong><a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a></strong>:一个上传项目到github的软件。不想用命令行的不二选择。</p></li><li><p><strong><a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/" target="_blank" rel="noopener">命令行</a></strong>:指使用git命令上传项目</p></li></ol><p>PS:不会命令行没关系，谁敢说自己连一个软件都不会用呀？</p></blockquote><p><br></p><h2 id="二、GitHub-Pages-提供什么"><a href="#二、GitHub-Pages-提供什么" class="headerlink" title="二、GitHub Pages 提供什么"></a>二、GitHub Pages 提供什么</h2><p>在官网上有这样一句话:</p><pre><code>You get one site per GitHub account and organization,and unlimited project sites. </code></pre><p>意思是:</p><pre><code>GitHub Pages为每个GitHub帐户/组织提供一个【站点】,以及无限制的【项目站点】。</code></pre><blockquote><p>注意:</p><ol><li><p>我们只能有一个【<code>User or organization site</code>】;但是我们可以有很多【<code>Project site</code>】。</p></li><li><p>部署简历用【<code>User or organization site</code>】简直是大材小用,用【<code>Project site</code>】就可以了。</p></li><li><p>【<code>User or organization site</code>】可以拿来部署个人博客,点击<a href="https://hotyan.github.io/categories/hotYan-%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/" target="_blank" rel="noopener">用hexo搭建github博客</a>了解如何搭建个人博客。</p></li></ol></blockquote><p><br></p><h2 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h2><ol><li><h5 id="默认已有GitHub账号-并已创建好存储库或会创建存储库。"><a href="#默认已有GitHub账号-并已创建好存储库或会创建存储库。" class="headerlink" title="默认已有GitHub账号,并已创建好存储库或会创建存储库。"></a>默认已有GitHub账号,并已创建好存储库或会创建存储库。</h5><ul><li><p>没有<code>GitHub</code>账号？？<a href="https://github.com/" target="_blank" rel="noopener">点击注册</a></p></li><li><p>没有存储库？？<a href="https://help.github.com/articles/creating-a-new-repository/" target="_blank" rel="noopener">了解如何创建</a></p></li></ul></li><li><h5 id="默认已有html简历-命名为-index-html"><a href="#默认已有html简历-命名为-index-html" class="headerlink" title="默认已有html简历,命名为 index.html"></a>默认已有html简历,命名为 index.html</h5><ul><li>没有简历？？<a href="http://cv.qiaobutang.com/" target="_blank" rel="noopener">制作并下载</a></li></ul></li></ol><p><br></p><h2 id="四、简历部署"><a href="#四、简历部署" class="headerlink" title="四、简历部署"></a>四、简历部署</h2><ol><li><h5 id="创建新存储库"><a href="#创建新存储库" class="headerlink" title="创建新存储库"></a>创建新存储库</h5><ul><li><p>点击右上角 <strong>+</strong> 选择 <strong><code>New repository</code></strong></p></li><li><p>填写 <strong><code>Repository name</code></strong> 并勾选 <strong><code>Initialize this repository with a README</code></strong></p></li><li>点击 <strong><code>Create repository</code></strong> 完成创建</li></ul></li><li><h5 id="上传简历"><a href="#上传简历" class="headerlink" title="上传简历"></a>上传简历</h5><ul><li><p>在新建的存储库点击 <strong><code>Upload files</code></strong></p></li><li><p>点击 <strong><code>choose your files</code></strong> 上传你的 <strong><code>index.html</code></strong> 文件</p></li><li>点击 <strong><code>Commit changes</code></strong> 完成上传</li></ul></li><li><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ul><li><p>点击 <strong><code>Settings</code></strong> 下滑到 <strong><code>GitHub Pages</code></strong> 部分</p></li><li><p>修改 <strong><code>Source</code></strong> 为 <strong><code>master branch</code></strong> 并点击 <strong><code>Save</code></strong></p></li><li>再次下滑到 <strong><code>GitHub Pages</code></strong> 部分就会看到一个链接</li></ul></li><li><h5 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h5><ul><li><p>如果不成功,再次修改 <strong><code>Source</code></strong> 为 <strong><code>master branch</code></strong> 并点击 <strong><code>Save</code></strong></p></li><li><p>点击链接就可以看到部署的简历</p></li><li><p>将简历链接写在你的<code>README.md</code>或者任何地方</p></li></ul></li></ol><p><br></p><h2 id="五、创建【User-or-organization-site】"><a href="#五、创建【User-or-organization-site】" class="headerlink" title="五、创建【User or organization site】"></a>五、创建【User or organization site】</h2><p>跟创建一般存储库流程一样,只是因为我们每个用户只有一个【<code>User or organization site</code>】,所以存储库的名称比较唯一,必须是<strong><code>username.github.io</code></strong> 格式,其中<code>username</code>是我们在<code>GitHub</code>上的用户名或组织名称</p><p>如果不正确则不起作用，因此请确保正确无误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GitHub-Pages-完结&quot;&gt;&lt;a href=&quot;#GitHub-Pages-完结&quot; class=&quot;headerlink&quot; title=&quot;GitHub Pages [完结]&quot;&gt;&lt;/a&gt;GitHub Pages &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;包含个人隐私信息(电话、照片)的简历不建议贴在网上哦~&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="GitHub" scheme="https://hotkang.cn/categories/GitHub/"/>
    
    
      <category term="GitHub Pages" scheme="https://hotkang.cn/tags/GitHub-Pages/"/>
    
      <category term="简历" scheme="https://hotkang.cn/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>CSS_属性继承</title>
    <link href="https://hotkang.cn/2018/CSS-%E5%B1%9E%E6%80%A7%E7%BB%A7%E6%89%BF/"/>
    <id>https://hotkang.cn/2018/CSS-属性继承/</id>
    <published>2018-06-21T10:29:02.000Z</published>
    <updated>2018-08-18T17:34:10.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-属性继承-待完善"><a href="#CSS-属性继承-待完善" class="headerlink" title="CSS_属性继承 [待完善]"></a>CSS_属性继承 <span style="font-size:.5em">[待完善]</span></h2><blockquote><p>哪些属性可继承？？呃。。。往下看。</p></blockquote><a id="more"></a><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://www.cnblogs.com/thislbq/p/5882105.html" target="_blank" rel="noopener">参考链接</a></li><li><a href="http://www.runoob.com/cssref/css-reference.html" target="_blank" rel="noopener">CSS 参考手册</a></li><li><a href="https://www.w3schools.com/cssref/css3_pr_align-content.asp" target="_blank" rel="noopener">CSS Properties</a></li></ul></blockquote><hr><h2 id="一、无继承性的属性"><a href="#一、无继承性的属性" class="headerlink" title="一、无继承性的属性"></a>一、<strong>无继承性</strong>的属性</h2><h3 id="1-display"><a href="#1-display" class="headerlink" title="1. display"></a>1. display</h3><p>定义元素生成的框的类型,下面是常用的属性值:</p><table><thead><tr><th style="text-align:center">display值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">inherit</td><td style="text-align:left">继承父元素 display 属性的值</td></tr><tr><td style="text-align:center"><strong>none</strong></td><td style="text-align:left">不会被显示</td></tr><tr><td style="text-align:center"><strong>block</strong></td><td style="text-align:left">块级元素，前后会带有换行符</td></tr><tr><td style="text-align:center"><strong>inline</strong></td><td style="text-align:left">默认。内联元素，前后没有换行符</td></tr><tr><td style="text-align:center"><strong>inline-block</strong></td><td style="text-align:left">行内块元素</td></tr></tbody></table><h3 id="2-文本属性-部分属性无继承性"><a href="#2-文本属性-部分属性无继承性" class="headerlink" title="2. 文本属性[部分属性无继承性]"></a>2. 文本属性[部分属性无继承性]</h3><table><thead><tr><th style="text-align:center">文本属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">vertical-align</td><td style="text-align:left">垂直文本对齐</td></tr><tr><td style="text-align:center">text-decoration</td><td style="text-align:left">规定添加到文本的装饰</td></tr><tr><td style="text-align:center">text-shadow</td><td style="text-align:left">文本阴影效果</td></tr><tr><td style="text-align:center">white-space</td><td style="text-align:left">空白符的处理</td></tr><tr><td style="text-align:center">unicode-bidi</td><td style="text-align:left">设置文本的方向</td></tr></tbody></table><p></p><h3 id="3-盒子模型"><a href="#3-盒子模型" class="headerlink" title="3.盒子模型"></a>3.盒子模型</h3><table><thead><tr><th style="text-align:center">盒子模型属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">width/height</td><td style="text-align:left">宽/高</td></tr><tr><td style="text-align:center">margin: top right bottom left</td><td style="text-align:left">[上右下左]外边距</td></tr><tr><td style="text-align:center">padding: top right bottom left</td><td style="text-align:left">[上右下左]内边距</td></tr><tr><td style="text-align:center">border: top right bottom left</td><td style="text-align:left">[上右下左]边框</td></tr><tr><td style="text-align:center">border-[top/right/bottom/left]-style</td><td style="text-align:left">边框[上右下左]样式</td></tr><tr><td style="text-align:center">border-[top/right/bottom/left]-width</td><td style="text-align:left">边框[上右下左]宽度</td></tr><tr><td style="text-align:center">border-[top/right/bottom/left]-color</td><td style="text-align:left">边框[上右下左]颜色</td></tr></tbody></table><h3 id="4-背景属性-均无继承性"><a href="#4-背景属性-均无继承性" class="headerlink" title="4.背景属性[均无继承性]"></a>4.背景属性[均无继承性]</h3><table><thead><tr><th style="text-align:center">背景属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">background</td><td style="text-align:left">[颜色/图片/位置/大小/重复/原点/素材/附件]</td></tr><tr><td style="text-align:center">background-color</td><td style="text-align:left">颜色</td></tr><tr><td style="text-align:center">background-image</td><td style="text-align:left">图片</td></tr><tr><td style="text-align:center">background-position</td><td style="text-align:left">位置</td></tr><tr><td style="text-align:center">background-size</td><td style="text-align:left">大小</td></tr><tr><td style="text-align:center">background-repeat</td><td style="text-align:left">重复</td></tr><tr><td style="text-align:center">background-origin</td><td style="text-align:left">指定原点位置</td></tr><tr><td style="text-align:center">background-clip</td><td style="text-align:left">背景(颜色或图像)应在元素内延伸的距离</td></tr><tr><td style="text-align:center">background-attachment</td><td style="text-align:left">背景图像是否与页面的其余部分一起滚动,或者是否已修复。</td></tr></tbody></table><h3 id="5-定位属性"><a href="#5-定位属性" class="headerlink" title="5.定位属性"></a>5.定位属性</h3><table><thead><tr><th style="text-align:center">定位属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:left">指定元素应该如何浮动</td></tr><tr><td style="text-align:center">clear</td><td style="text-align:left">指定元素浮动元素的哪些边不允许浮动</td></tr><tr><td style="text-align:center">position</td><td style="text-align:left">指定用于元素的定位方法的类型(static/relative/absolute/fixed/sticky)</td></tr><tr><td style="text-align:center">top/bottom</td><td style="text-align:left">影响定位元素的垂直位置</td></tr><tr><td style="text-align:center">left/right</td><td style="text-align:left">影响定位元素的水平位置</td></tr><tr><td style="text-align:center">min-[width/height]</td><td style="text-align:left">定义了元素的最小宽度/高度</td></tr><tr><td style="text-align:center">max-[width/height]</td><td style="text-align:left">定义了元素的最大宽度/高度</td></tr><tr><td style="text-align:center">overflow</td><td style="text-align:left">溢出</td></tr><tr><td style="text-align:center">clip</td><td style="text-align:left">指定一个矩形来剪切绝对定位的元素</td></tr><tr><td style="text-align:center">z-index</td><td style="text-align:left">指定元素的堆栈顺序</td></tr></tbody></table><h3 id="6-生成内容属性"><a href="#6-生成内容属性" class="headerlink" title="6.生成内容属性"></a>6.生成内容属性</h3><table><thead><tr><th style="text-align:center">内容属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">content</td><td style="text-align:left">::before和::after伪元素一起使用,以插入生成的内容</td></tr><tr><td style="text-align:center">counter-reset</td><td style="text-align:left">创建或重置一个或多个CSS计数器</td></tr><tr><td style="text-align:center">counter-increment</td><td style="text-align:left">增加或减少一个或多个CSS计数器的值</td></tr></tbody></table><h3 id="7-轮廓属性"><a href="#7-轮廓属性" class="headerlink" title="7.轮廓属性"></a>7.轮廓属性</h3><table><thead><tr><th style="text-align:center">内容属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">outline</td><td style="text-align:left">轮廓[宽度/*样式/颜色]</td></tr><tr><td style="text-align:center">outline-style</td><td style="text-align:left">样式</td></tr><tr><td style="text-align:center">outline-width</td><td style="text-align:left">宽度</td></tr><tr><td style="text-align:center">outline-color</td><td style="text-align:left">颜色</td></tr></tbody></table><h3 id="8-打印属性"><a href="#8-打印属性" class="headerlink" title="8.打印属性"></a>8.打印属性</h3><table><thead><tr><th style="text-align:center">内容属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">size</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">page-break-before</td><td style="text-align:left">元素之前添加分页符</td></tr><tr><td style="text-align:center">page-break-after</td><td style="text-align:left">元素后添加分页符</td></tr><tr><td style="text-align:center">page-break-inside</td><td style="text-align:left">指定元素内避免分页符</td></tr></tbody></table><h3 id="9-声音样式属性"><a href="#9-声音样式属性" class="headerlink" title="9.声音样式属性"></a>9.声音样式属性</h3><table><thead><tr><th style="text-align:center">内容属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">pause-before</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">pause-after</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">pause</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">cue-before</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">cue-after</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">cue</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">play-during</td><td style="text-align:left"></td></tr></tbody></table><h2 id="二、有继承性的属性"><a href="#二、有继承性的属性" class="headerlink" title="二、有继承性的属性"></a>二、<strong>有继承性</strong>的属性</h2><h3 id="1-字体系列属性-均继承"><a href="#1-字体系列属性-均继承" class="headerlink" title="1.字体系列属性[均继承]"></a>1.字体系列属性[均继承]</h3><table><thead><tr><th style="text-align:center">字体属性</th><th style="text-align:left"> 描述</th></tr></thead><tbody><tr><td style="text-align:center">font</td><td style="text-align:left">[*size/* family/weight/style]</td></tr><tr><td style="text-align:center">font-style</td><td style="text-align:left">样式</td></tr><tr><td style="text-align:center">font-variant</td><td style="text-align:left">变形</td></tr><tr><td style="text-align:center">font-weight</td><td style="text-align:left">粗细</td></tr><tr><td style="text-align:center">font-size/line-height</td><td style="text-align:left">尺寸</td></tr><tr><td style="text-align:center">font-family</td><td style="text-align:left">字体系列</td></tr><tr><td style="text-align:center">font-stretch</td><td style="text-align:left">对字体进行伸缩变形</td></tr><tr><td style="text-align:center">font-size-adjust</td><td style="text-align:left">更好地控制字体大小。</td></tr></tbody></table><h3 id="2-文本属性-部分继承"><a href="#2-文本属性-部分继承" class="headerlink" title="2. 文本属性[部分继承]"></a>2. 文本属性[部分继承]</h3><table><thead><tr><th style="text-align:center">文本属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">text-indent</td><td style="text-align:left">文本缩进</td></tr><tr><td style="text-align:center">text-align</td><td style="text-align:left">文本水平对齐</td></tr><tr><td style="text-align:center">line-height</td><td style="text-align:left">行高</td></tr><tr><td style="text-align:center">word-spacing</td><td style="text-align:left">增加或减少<strong>单词间</strong>的空白（即字间隔）</td></tr><tr><td style="text-align:center">letter-spacing</td><td style="text-align:left">增加或减少<strong>字符间</strong>的空白（字符间距）</td></tr><tr><td style="text-align:center">text-transform</td><td style="text-align:left">控制文本大小写</td></tr><tr><td style="text-align:center">direction</td><td style="text-align:left">规定文本的书写方向</td></tr><tr><td style="text-align:center">color</td><td style="text-align:left">文本颜色</td></tr></tbody></table><h3 id="3-visibility"><a href="#3-visibility" class="headerlink" title="3.visibility"></a>3.visibility</h3><h3 id="4-表格布局属性"><a href="#4-表格布局属性" class="headerlink" title="4.表格布局属性"></a>4.表格布局属性</h3><table><thead><tr><th style="text-align:center">表格布局属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">aption-side</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">border-collapse</td><td style="text-align:left">表格边框是应折叠为单个边框还是按标准HTML分隔</td></tr><tr><td style="text-align:center">border-spacing</td><td style="text-align:left">相邻单元格边界之间的距离</td></tr><tr><td style="text-align:center">empty-cells</td><td style="text-align:left">是否在表格中的空单元格上显示边框</td></tr><tr><td style="text-align:center">table-layout</td><td style="text-align:left">布置表格单元格，行和列的算法</td></tr></tbody></table><h3 id="5-列表布局属性-均继承"><a href="#5-列表布局属性-均继承" class="headerlink" title="5.列表布局属性[均继承]"></a>5.列表布局属性[均继承]</h3><table><thead><tr><th style="text-align:center">盒子模型属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">list-style</td><td style="text-align:left">[type/image/position]</td></tr><tr><td style="text-align:center">list-style-type</td><td style="text-align:left">类型</td></tr><tr><td style="text-align:center">list-style-image</td><td style="text-align:left">图像</td></tr><tr><td style="text-align:center">list-style-position</td><td style="text-align:left">位置[inside/outside/initial/inherit];</td></tr></tbody></table><h3 id="6-引用属性-quotes"><a href="#6-引用属性-quotes" class="headerlink" title="6.引用属性:quotes"></a>6.引用属性:quotes</h3><p>引用的引号类型:none|string|initial|inherit;</p><h3 id="7-鼠标光标-cursor"><a href="#7-鼠标光标-cursor" class="headerlink" title="7.鼠标光标:cursor"></a>7.鼠标光标:cursor</h3><h3 id="8-打印属性-1"><a href="#8-打印属性-1" class="headerlink" title="8.打印属性"></a>8.打印属性</h3><table><thead><tr><th style="text-align:center">盒子模型属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">page</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">windows</td><td style="text-align:left">发生分页时必须在页面<strong>顶部</strong>保留的最少行数</td></tr><tr><td style="text-align:center">orphans</td><td style="text-align:left">生分页时必须在页面<strong>底部</strong>保留的最少行数</td></tr></tbody></table><h3 id="9-声音样式属性-1"><a href="#9-声音样式属性-1" class="headerlink" title="9.声音样式属性"></a>9.声音样式属性</h3><table><thead><tr><th style="text-align:center">盒子模型属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">speak</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">speak-punctuation</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">speak-numeral</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">speak-header</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">speech-rate</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">volume</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">voice-family</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">pitch</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">pitch-range</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">stress</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">richness</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">azimuth</td><td style="text-align:left"></td></tr><tr><td style="text-align:center">elevation</td><td style="text-align:left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-属性继承-待完善&quot;&gt;&lt;a href=&quot;#CSS-属性继承-待完善&quot; class=&quot;headerlink&quot; title=&quot;CSS_属性继承 [待完善]&quot;&gt;&lt;/a&gt;CSS_属性继承 &lt;span style=&quot;font-size:.5em&quot;&gt;[待完善]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;哪些属性可继承？？呃。。。往下看。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="好记性不如烂笔头" scheme="https://hotkang.cn/categories/%E5%A5%BD%E8%AE%B0%E6%80%A7%E4%B8%8D%E5%A6%82%E7%83%82%E7%AC%94%E5%A4%B4/"/>
    
    
      <category term="CSS" scheme="https://hotkang.cn/tags/CSS/"/>
    
      <category term="属性继承" scheme="https://hotkang.cn/tags/%E5%B1%9E%E6%80%A7%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>图书管理系统四</title>
    <link href="https://hotkang.cn/2018/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%9B%9B/"/>
    <id>https://hotkang.cn/2018/图书管理系统四/</id>
    <published>2018-06-19T15:49:33.000Z</published>
    <updated>2018-08-04T07:28:17.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现具体功能-完结"><a href="#实现具体功能-完结" class="headerlink" title="实现具体功能 [完结]"></a>实现具体功能 <span style="font-size:.5em">[完结]</span></h2><blockquote><p>所有的功能实现都在写在这里了。</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="http://www.alloyteam.com/2015/03/sexpressmysql/" target="_blank" rel="noopener">参考教程1</a></li><li><a href="https://www.xiabingbao.com/node/2017/02/20/node-express-forum.html" target="_blank" rel="noopener">参考教程2</a>(划重点!)</li></ul><p>虽然前期看了教程1之后，功能没有实现，但是给教程2奠定一定的知识储备,建议都看看。</p></blockquote><hr><h2 id="了解整体架构"><a href="#了解整体架构" class="headerlink" title="了解整体架构"></a>了解整体架构</h2><p>仔细看看<a href="http://blog.fens.me/nodejs-express4/" target="_blank" rel="noopener">Node.js开发框架Express4.x</a> 下的以下部分</p><pre><code>2. 目录结构3. package.json项目配置4. app.js核心文件5.Bootstrap界面框架(选看,里面涉及到的重复代码前面讲过)6. 路由功能</code></pre><p><br></p><h2 id="完成注册-登录"><a href="#完成注册-登录" class="headerlink" title="完成注册/登录"></a>完成注册/登录</h2><p>看了很多网上的教程吧,只有<a href="https://www.xiabingbao.com/node/2017/02/20/node-express-forum.html" target="_blank" rel="noopener">参考教程2</a>让我成功了,作者写的也非常用心超级仔细！！！！我只跟着敲了用户注册登录,后面基本很顺畅~</p><p><br></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>看了所有推荐的链接,基本上就没有什么问题啦。靠谱的教程让我们少走弯路,少踏坑。</p><p><br><br><br></p><h2 id="项目具体细节记录"><a href="#项目具体细节记录" class="headerlink" title="项目具体细节记录"></a>项目具体细节记录</h2><hr><h2 id="一、保持用户登录状态-app-js"><a href="#一、保持用户登录状态-app-js" class="headerlink" title="一、保持用户登录状态(app.js)"></a>一、保持用户登录状态(app.js)</h2><ol><li><h5 id="加载依赖库"><a href="#加载依赖库" class="headerlink" title="加载依赖库"></a>加载依赖库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);  </span><br><span class="line">var session = require(&apos;express-session&apos;);</span><br></pre></td></tr></table></figure></li><li><h5 id="定义cookie解析器"><a href="#定义cookie解析器" class="headerlink" title="定义cookie解析器"></a>定义cookie解析器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret: &apos;hotyan&apos;,  // 用来对session id相关的cookie进行签名</span><br><span class="line">    saveUninitialized: true,  // 是否自动保存未初始化的会话，建议false</span><br><span class="line">    resave: false,  // 是否每次都重新保存会话，建议false</span><br><span class="line">    cookie: &#123;maxAge:  60*60 * 1000 &#125; // 有效期，单位是毫秒</span><br><span class="line">    &#125;))</span><br></pre></td></tr></table></figure></li><li><h5 id="在app-js文件下添加自定义中间件-实现保持用户登录状态"><a href="#在app-js文件下添加自定义中间件-实现保持用户登录状态" class="headerlink" title="在app.js文件下添加自定义中间件,实现保持用户登录状态"></a>在app.js文件下添加自定义中间件,实现保持用户登录状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.use(function(req, res, next)&#123;</span><br><span class="line">    // 如果session中存在，则说明已经登录</span><br><span class="line">    if( req.session.hotyan )&#123;</span><br><span class="line">        res.locals.hotyan = &#123;</span><br><span class="line">            UserId : req.session.hotyan.UserId,</span><br><span class="line">            UserName : req.session.hotyan.UserName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        res.locals.hotyan = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    next();//此处必须有</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h2 id="二、数据库连接"><a href="#二、数据库连接" class="headerlink" title="二、数据库连接"></a>二、数据库连接</h2><ul><li><h5 id="在-models-下新建-db-js"><a href="#在-models-下新建-db-js" class="headerlink" title="在 models 下新建 db.js"></a>在 models 下新建 <code>db.js</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var mysql = require(&apos;mysql&apos;);</span><br><span class="line">var pool = mysql.createPool(&#123;</span><br><span class="line">    host: &apos;localhost&apos;,</span><br><span class="line">    user: &apos;root&apos;,</span><br><span class="line">    password: &apos;XXXXXX&apos;,</span><br><span class="line">    database: &apos;XXXXXX&apos;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = pool;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="三、Mysql语句"><a href="#三、Mysql语句" class="headerlink" title="三、Mysql语句"></a>三、Mysql语句</h2><ul><li><h5 id="以对图书管理员进行增删改查为例"><a href="#以对图书管理员进行增删改查为例" class="headerlink" title="以对图书管理员进行增删改查为例"></a>以对图书管理员进行增删改查为例</h5><p>方法总结于教程2,新建(SQL/adminSql.js)文件,将需要的Mysql语句全部独立出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//对bookadmin进行增删改查</span><br><span class="line">var admin = &#123;</span><br><span class="line">    /**添加图书管理员 */</span><br><span class="line">    insert :&apos;INSERT INTO `bookadmin` SET `BAId`=?, `BAName`=? ,`BAPassword`=?,`BAPhone`=?,`BAEmail`=?&apos;,</span><br><span class="line">    </span><br><span class="line">    /**修改图书管理员信息 */</span><br><span class="line">    update : &apos;UPDATE `bookadmin` SET `BAName`=? ,`BAPhone`=?,`BAEmail`=? WHERE `BAId`=?&apos;,</span><br><span class="line">    </span><br><span class="line">    /**删除图书管理员 */</span><br><span class="line">    delete: &apos;DELETE FROM `bookadmin` WHERE `BAId`=?&apos;,</span><br><span class="line">    </span><br><span class="line">    /**精确查看图书管理员信息 */</span><br><span class="line">    queryById : &apos;SELECT * FROM `bookadmin` WHERE `BAId`=?&apos;,</span><br><span class="line">    </span><br><span class="line">    /**查看全部图书管理员信息 */</span><br><span class="line">    queryAll : &apos;SELECT * FROM `bookadmin` &apos;</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = admin;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p>实现功能的函数放置在<code>models/users.js</code></p><ol><li><h5 id="加载依赖文件"><a href="#加载依赖文件" class="headerlink" title="加载依赖文件"></a>加载依赖文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var pool = require(&apos;./db&apos;), // 连接数据库</span><br><span class="line">    admin = require(&apos;../SQL/adminSql&apos;),//图书管理员的Mysql语句</span><br><span class="line">    crypto = require(&apos;crypto&apos;); // 对密码进行加密</span><br></pre></td></tr></table></figure></li><li><h5 id="以添加图书管理员为例学习如何使用封装的函数"><a href="#以添加图书管理员为例学习如何使用封装的函数" class="headerlink" title="以添加图书管理员为例学习如何使用封装的函数"></a>以添加图书管理员为例学习如何使用封装的函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">adminadd: function (BAId, BAName, BAPassword, BAPhone, BAEmail, cb) &#123;</span><br><span class="line">    pool.getConnection(function (err, connection) &#123;</span><br><span class="line">        if (err) throw err;</span><br><span class="line"></span><br><span class="line">            connection.query(admin.insert, [BAId, BAName, BAPassword, BAPhone, BAEmail], function (err, result) &#123;</span><br><span class="line">                if (err) throw err;</span><br><span class="line">                    cb(result);</span><br><span class="line">                    connection.release();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>此处应了解一下query()方法,参数可2可3,query(mysql语句,内容数组,回调函数）;我把Mysql语句独立了出去,看了教程2就知道。</p></li></ol><p><br></p><h2 id="五、表单提交POST请求"><a href="#五、表单提交POST请求" class="headerlink" title="五、表单提交POST请求"></a>五、表单提交POST请求</h2><ul><li><h5 id="以添加图书管理员为例"><a href="#以添加图书管理员为例" class="headerlink" title="以添加图书管理员为例:"></a>以添加图书管理员为例:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/badAddAdmin&quot; method=&quot;POST&quot; class=&quot;ad_data&quot;&gt;//注意1</span><br><span class="line">    &lt;div class=&quot;data&quot;&gt;</span><br><span class="line">        &lt;label&gt;管理号&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;输入图书管理员编号&quot; name=&quot;BAId&quot; /&gt;//注意2</span><br><span class="line">    &lt;/div&gt;   </span><br><span class="line">    ...     </span><br><span class="line">    &lt;div class=&quot;data&quot;&gt;</span><br><span class="line">        &lt;label&gt;邮箱&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;输入图书管理员邮箱&quot; name=&quot;BAEmail&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;input class=&quot;add_btn&quot; type=&quot;submit&quot; value=&quot;确认添加&quot; /&gt;//注意3    </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>注意三个地方:</p><ol><li><code>action=&quot;/badAddAdmin&quot; method=&quot;POST&quot;</code></li><li><code>name=&quot;BAId&quot;</code></li><li><code>type=&quot;submit&quot;</code></li></ol></li></ul><p><br></p><h2 id="六、添加POST代码"><a href="#六、添加POST代码" class="headerlink" title="六、添加POST代码"></a>六、添加POST代码</h2><ul><li><h5 id="以添加图书管理员界面为例-routes-index-js"><a href="#以添加图书管理员界面为例-routes-index-js" class="headerlink" title="以添加图书管理员界面为例(routes/index.js):"></a>以添加图书管理员界面为例(<code>routes/index.js</code>):</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/badAddAdmin&apos;, function (req, res, next) &#123;</span><br><span class="line">/*获取表单传来的数据*/</span><br><span class="line">    var BAId = req.body.BAId || &apos;&apos;,</span><br><span class="line">        BAName = req.body.BAName || &apos;&apos;,</span><br><span class="line">        BAPassword = req.body.BAPassword || &apos;&apos;,</span><br><span class="line">        BAPhone = req.body.BAPhone || &apos;&apos;,</span><br><span class="line">        BAEmail = req.body.BAEmail || &apos;&apos;;</span><br><span class="line">    /*调用密码加密函数*/</span><br><span class="line">    var password_hash = user_m.hash(BAPassword);</span><br><span class="line">    /*调用添加图书管理员函数*/</span><br><span class="line">    user_m.adminadd(BAId, BAName, password_hash, BAPhone, BAEmail, function (result) &#123;</span><br><span class="line">        console.log(&quot;添加成功&quot;);</span><br><span class="line">        res.redirect(&apos;/badAddAdmin&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="七、EJS循环渲染"><a href="#七、EJS循环渲染" class="headerlink" title="七、EJS循环渲染"></a>七、EJS循环渲染</h2><ol><li><h5 id="在-routes-index-js-中加入"><a href="#在-routes-index-js-中加入" class="headerlink" title="在(routes/index.js)中加入:"></a>在(<code>routes/index.js</code>)中加入:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/badCheckAdmin&apos;, function (req, res, next) &#123;</span><br><span class="line">    console.log(req.body);</span><br><span class="line">    var BAId = req.body.BAId;</span><br><span class="line">    user_m.adminId(BAId, function (result) &#123;</span><br><span class="line">        console.log(&quot;精确查看成功&quot;);</span><br><span class="line">        res.render(&apos;badCheckAdmin&apos;, &#123;</span><br><span class="line">            title: &apos;查看图书管理员信息&apos;,</span><br><span class="line">            datas: result     //返回json数据,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>返回json数据,需要依赖模块body-parser,此处应了解一下res.render()</p></li><li><h5 id="在-views-badCheckAdmin-ejs-中渲染代码"><a href="#在-views-badCheckAdmin-ejs-中渲染代码" class="headerlink" title="在(views/badCheckAdmin.ejs)中渲染代码:"></a>在(views/badCheckAdmin.ejs)中渲染代码:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;tbody&gt;</span><br><span class="line">    &lt;% for(var i=0;i&lt; datas.length;i++)&#123; %&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td &gt;&lt;%= datas[i].BAId %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= datas[i].BAName %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= datas[i].BAPhone %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= datas[i].BAEmail %&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;% &#125;%&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h2 id="八、日期格式YYYY-MM-DD"><a href="#八、日期格式YYYY-MM-DD" class="headerlink" title="八、日期格式YYYY-MM-DD"></a>八、日期格式YYYY-MM-DD</h2><ul><li><h5 id="在-routes-index-js-文件中"><a href="#在-routes-index-js-文件中" class="headerlink" title="在(routes/index.js)文件中:"></a>在(routes/index.js)文件中:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*加载依赖模块*/</span><br><span class="line">var time = require(&apos;silly-datetime&apos;)</span><br><span class="line"></span><br><span class="line">/*在需要的地方使用,以注册时间为例*/</span><br><span class="line">RegTime = time.format(new Date(), &apos;YYYY-MM-DD&apos;);</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="九、图书应该归还日期-30天后"><a href="#九、图书应该归还日期-30天后" class="headerlink" title="九、图书应该归还日期(30天后)"></a>九、图书应该归还日期(30天后)</h2><ol><li><h5 id="在-models-users-js-中添加date方法"><a href="#在-models-users-js-中添加date方法" class="headerlink" title="在(models/users.js)中添加date方法:"></a>在(models/users.js)中添加date方法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">date: function (AddDay) &#123;</span><br><span class="line">    var date = new Date();</span><br><span class="line">    /*****获取AddDay天后的日期 ********/</span><br><span class="line">    date.setDate(date.getDate() + AddDay);</span><br><span class="line"></span><br><span class="line">    var Y = date.getFullYear(),</span><br><span class="line"></span><br><span class="line">    /***** 获取当前月份的日期，不足10补0 *****/</span><br><span class="line">        M = (date.getMonth() + 1) &lt; 10 ? &quot;0&quot; + (date.getMonth() + 1) : (date.getMonth() + 1),</span><br><span class="line"></span><br><span class="line">        /****获取当前几号，不足10补0  ****/</span><br><span class="line">        D = date.getDate() &lt; 10 ? &quot;0&quot; + date.getDate() : date.getDate();</span><br><span class="line"></span><br><span class="line">    return Y + &quot;-&quot; + M + &quot;-&quot; + D;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="在-routes-index-js-借书界面调用date方法"><a href="#在-routes-index-js-借书界面调用date方法" class="headerlink" title="在(routes/index.js)借书界面调用date方法:"></a>在(routes/index.js)借书界面调用date方法:</h5><pre><code>var ShouldTime = user_m.date(30);</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现具体功能-完结&quot;&gt;&lt;a href=&quot;#实现具体功能-完结&quot; class=&quot;headerlink&quot; title=&quot;实现具体功能 [完结]&quot;&gt;&lt;/a&gt;实现具体功能 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;所有的功能实现都在写在这里了。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Express+ejs+Mysql图书管理系统" scheme="https://hotkang.cn/categories/Express-ejs-Mysql%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="图书管理系统" scheme="https://hotkang.cn/tags/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql命令小结</title>
    <link href="https://hotkang.cn/2018/Mysql%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
    <id>https://hotkang.cn/2018/Mysql命令小结/</id>
    <published>2018-06-19T14:04:20.000Z</published>
    <updated>2018-07-26T18:16:42.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql语句-持续完善"><a href="#Mysql语句-持续完善" class="headerlink" title="Mysql语句 [持续完善]"></a>Mysql语句 <span style="font-size:.5em">[持续完善]</span></h2><blockquote><p>常用命令小结</p></blockquote><a id="more"></a><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://juejin.im/post/5ae55861f265da0ba062ec71" target="_blank" rel="noopener">参考链接</a></li></ul></blockquote><hr><h2 id="一、DATABASE"><a href="#一、DATABASE" class="headerlink" title="一、DATABASE"></a>一、DATABASE</h2><p>新建数据库：</p><pre><code>CREATE DATABASE database_name;</code></pre><p>删除数据库：</p><pre><code>DROP DATABASE database_name;</code></pre><p>查看所有可用的数据库：</p><pre><code>SHOW DATABASES;  </code></pre><p>选择数据库：</p><pre><code>USE database_name;</code></pre><p>显示数据库服务器的状态信息：</p><pre><code>SHOW STATUS;  </code></pre><p>获取当前所选的数据库中所有可用的表：</p><pre><code>SHOW TABLES; </code></pre><p>获取表中所有列的信息：</p><pre><code>SHOW COLUMNS FROM table_name; </code></pre><p><br></p><h2 id="二、TABLE"><a href="#二、TABLE" class="headerlink" title="二、TABLE"></a>二、TABLE</h2><p>新建表:</p><pre><code>CREATE TABLE table_name;</code></pre><p>删除表,使用DROP TABLE子句:</p><pre><code>DROP TABLE table_name。</code></pre><p>清空表中记录:</p><pre><code>delete from table_name;</code></pre><p>显示表中的记录:</p><pre><code>select * from table_name;</code></pre><p><br></p><h2 id="三、导入导出"><a href="#三、导入导出" class="headerlink" title="三、导入导出"></a>三、导入导出</h2><p>导入.sql</p><pre><code>source .sql文件路径</code></pre><p>备份数据,导出.sql文件</p><pre><code>cd 存放目录mysqldump -u root_name -p database_name&gt;file_name.sql例如:mysqldump -u root -p hotyan&gt;db.sql</code></pre><p>退出MYSQL命令:</p><pre><code>exit(回车)</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mysql语句-持续完善&quot;&gt;&lt;a href=&quot;#Mysql语句-持续完善&quot; class=&quot;headerlink&quot; title=&quot;Mysql语句 [持续完善]&quot;&gt;&lt;/a&gt;Mysql语句 &lt;span style=&quot;font-size:.5em&quot;&gt;[持续完善]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;常用命令小结&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Express+ejs+Mysql图书管理系统" scheme="https://hotkang.cn/categories/Express-ejs-Mysql%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Mysql" scheme="https://hotkang.cn/categories/Express-ejs-Mysql%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/Mysql/"/>
    
    
      <category term="图书管理系统" scheme="https://hotkang.cn/tags/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Mysql" scheme="https://hotkang.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>图书管理系统三</title>
    <link href="https://hotkang.cn/2018/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%B8%89/"/>
    <id>https://hotkang.cn/2018/图书管理系统三/</id>
    <published>2018-06-11T15:24:23.000Z</published>
    <updated>2018-08-03T11:00:02.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Use-Homebre-Install-Mysql-完结"><a href="#Use-Homebre-Install-Mysql-完结" class="headerlink" title="Use Homebre Install Mysql [完结]"></a>Use Homebre Install Mysql <span style="font-size:.5em">[完结]</span></h2><blockquote><p>安装Mysql,你可能会进入Mysql官网,下载安装适合你自己电脑的版本,我用的Mac,所以我继续看了一下在【macOS上安装MySQL】,然后就跟着操作,结果不成功,解决不了？？？卸载试试？？？重新安装,依旧失败~</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/installing.html" target="_blank" rel="noopener">Mysql官网</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/osx-installation.html" target="_blank" rel="noopener">在macOS上安装MySQL</a></li><li><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew官网</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/Homebrew/index.html" target="_blank" rel="noopener">本文参考链接</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/MySql/index.html" target="_blank" rel="noopener">YouTube视频教程</a>(划重点,是这个视频让我成功的！！！)</li></ul></blockquote><hr><h2 id="一、安装homebrew"><a href="#一、安装homebrew" class="headerlink" title="一、安装homebrew"></a>一、安装homebrew</h2><p>请参考<a href="https://hotyan.github.io/2018/use%20homebrew%20install%20mongodb" target="_blank" rel="noopener">Mac Use Homebrew Install Mongodb</a>,那里有详细记录,这边不再赘述</p><p><br></p><h2 id="二、安装Mysql"><a href="#二、安装Mysql" class="headerlink" title="二、安装Mysql"></a>二、安装Mysql</h2><ol><li><h5 id="终端下运行以下命令"><a href="#终端下运行以下命令" class="headerlink" title="终端下运行以下命令"></a>终端下运行以下命令</h5><pre><code>$ brew install mysql</code></pre><p>【暂时忽略你看到的一些提示！！！】</p></li><li><h5 id="启动Mysql服务器"><a href="#启动Mysql服务器" class="headerlink" title="启动Mysql服务器"></a>启动Mysql服务器</h5><p>先把服务器start再说</p><pre><code>$ brew services start mysql</code></pre><p>【现在可以跟着你看到的提示一步一步来！！！】</p></li><li><h5 id="先安全登录Mysql"><a href="#先安全登录Mysql" class="headerlink" title="先安全登录Mysql"></a>先安全登录Mysql</h5><p>运行提示一:</p><pre><code>$ mysql_secure_installation  </code></pre><ul><li><p>根据提示设置user root密码</p><pre><code>Enter password for user root：（此处输入你的密码）</code></pre></li><li><p>根据提示进行设置</p><pre><code>可一路yes</code></pre></li><li><p>设置完后，你会看到提示</p><pre><code>All done！</code></pre></li></ul></li><li><h5 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h5><p>运行提示二:</p><pre><code>$ mysql -uroot</code></pre><p>或者</p><pre><code>$ mysql -u root -p    </code></pre><p>回车后,输入刚刚设置的密码：</p><pre><code>Enter password：</code></pre></li><li><h5 id="success！"><a href="#success！" class="headerlink" title="success！"></a>success！</h5><p>成功之后,就可以对Mysql进行操作啦</p></li><li><h5 id="退出mysql"><a href="#退出mysql" class="headerlink" title="退出mysql"></a>退出mysql</h5><pre><code>mysql&gt; exitBye</code></pre></li><li><h5 id="关闭mysql服务器"><a href="#关闭mysql服务器" class="headerlink" title="关闭mysql服务器"></a>关闭mysql服务器</h5><pre><code>$ brew services start mysql</code></pre></li><li><h5 id="配置-bash-profile"><a href="#配置-bash-profile" class="headerlink" title="配置.bash_profile"></a>配置.bash_profile</h5><p>先查看你的mysql安装在哪:</p><pre><code>$ which mysql</code></pre><p>比如我返回的是:</p><pre><code>/usr/local/Cellar/mysql/5.7.22/bin/mysql</code></pre><p>打开.bash_profile文件:</p><pre><code>$ open ~/.bash_profile</code></pre><p>将下面这行代码加入.bash_profile文件:</p><pre><code>export PATH=&quot;/usr/local/Cellar/mysql/5.7.22/bin:$PATH&quot;</code></pre><p>保存,退出后,保存新配置:</p><pre><code>$ source ~/.bash_profile</code></pre></li><li><h5 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h5><p>开启服务器:</p><pre><code>$ brew services start mysql</code></pre><p>登录Mysql:</p><pre><code>$ mysql -u root -p</code></pre><p>操作Mysql:</p><p>【<a href="https://hotyan.github.io/2018/Mysql%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93" target="_blank" rel="noopener">Mysql指令小结</a> 】</p><p>退出Mysql:</p><pre><code>mysql&gt;exitBye</code></pre><p>关闭服务器:</p><pre><code>$ brew services stop mysql</code></pre></li><li><h5 id="基本完成"><a href="#基本完成" class="headerlink" title="基本完成"></a>基本完成</h5><p>其实我遇到过很多问题，也尝试解决，Google了很多，并没有很成功的解决问题，课设期间时间也比较有限，所以在尝试解决不成功后，出现问题我选择卸载，重新安装~</p><p>根据上面打开流程，基本不会再出差啦</p></li></ol><p><br></p><h2 id="三、卸载Mysql"><a href="#三、卸载Mysql" class="headerlink" title="三、卸载Mysql"></a>三、卸载Mysql</h2><ol><li><h5 id="打开终端-依次输入"><a href="#打开终端-依次输入" class="headerlink" title="打开终端,依次输入"></a>打开终端,依次输入</h5><pre><code>$ brew remove mysql$ brew cleanup$ sudo rm /usr/local/mysql$ sudo rm -rf /usr/local/var/mysql$ sudo rm -rf /usr/local/mysql*$ sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist$ sudo rm -rf /Library/StartupItems/MySQLCOM$ sudo rm -rf /Library/PreferencePanes/My*</code></pre></li><li><h5 id="查看是否成功"><a href="#查看是否成功" class="headerlink" title="查看是否成功"></a>查看是否成功</h5><pre><code>$ mysql</code></pre><p>提示mysql 没有发现，多半就可以了。（其实我也不确定哈，只是我这样就可以~）</p></li><li><h5 id="最后重启电脑重新安装即可"><a href="#最后重启电脑重新安装即可" class="headerlink" title="最后重启电脑重新安装即可"></a>最后重启电脑重新安装即可</h5></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Use-Homebre-Install-Mysql-完结&quot;&gt;&lt;a href=&quot;#Use-Homebre-Install-Mysql-完结&quot; class=&quot;headerlink&quot; title=&quot;Use Homebre Install Mysql [完结]&quot;&gt;&lt;/a&gt;Use Homebre Install Mysql &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;安装Mysql,你可能会进入Mysql官网,下载安装适合你自己电脑的版本,我用的Mac,所以我继续看了一下在【macOS上安装MySQL】,然后就跟着操作,结果不成功,解决不了？？？卸载试试？？？重新安装,依旧失败~&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Install" scheme="https://hotkang.cn/categories/Install/"/>
    
      <category term="Mysql" scheme="https://hotkang.cn/categories/Install/Mysql/"/>
    
    
      <category term="图书管理系统" scheme="https://hotkang.cn/tags/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Mysql" scheme="https://hotkang.cn/tags/Mysql/"/>
    
      <category term="Homebrew" scheme="https://hotkang.cn/tags/Homebrew/"/>
    
      <category term="Node.js" scheme="https://hotkang.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>图书管理系统二</title>
    <link href="https://hotkang.cn/2018/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BA%8C/"/>
    <id>https://hotkang.cn/2018/图书管理系统二/</id>
    <published>2018-06-11T15:24:16.000Z</published>
    <updated>2018-08-04T07:28:08.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EJS模板引擎-完结"><a href="#EJS模板引擎-完结" class="headerlink" title="EJS模板引擎 [完结]"></a>EJS模板引擎 <span style="font-size:.5em">[完结]</span></h2><blockquote><p>初步渲染页面~</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">EJS官网</a></li></ul></blockquote><hr><h2 id="一、首先来了解一下项目结构"><a href="#一、首先来了解一下项目结构" class="headerlink" title="一、首先来了解一下项目结构"></a>一、首先来了解一下项目结构</h2><pre><code>.├── app.js  //程序启动文件├── bin│   └── www├── package.json  //项目依赖配置及开发者信息├── public        //静态文件(存css,js,img)│   ├── images│   ├── javascripts│   └── stylesheets│       └── style.css├── routes          //路由文件│   ├── index.js│   └── users.js└── views           //页面文件(ejs模板)    ├── error.ejs    ├── index.ejs    └── layout.ejs</code></pre><p><br></p><h2 id="二、渲染界面"><a href="#二、渲染界面" class="headerlink" title="二、渲染界面"></a>二、渲染界面</h2><ol><li><h5 id="对views文件夹进行操作"><a href="#对views文件夹进行操作" class="headerlink" title="对views文件夹进行操作:"></a>对views文件夹进行操作:</h5><pre><code>在现有的首页index.ejs里面加入你的首页界面代码新建注册界面reg.ejs,并加入该界面代码新建登录界面login.ejs,并加入该界面代码...</code></pre></li></ol><p><br></p><ol start="2"><li><h5 id="对routes文件夹进行操作"><a href="#对routes文件夹进行操作" class="headerlink" title="对routes文件夹进行操作"></a>对routes文件夹进行操作</h5><p>在<code>index.js</code>文件里面分别渲染<code>index.ejs</code>、<code>reg.ejs</code> 、<code>login.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/&apos;, function (req, res, next) &#123;</span><br><span class="line">    res.render(&apos;index&apos;, &#123;</span><br><span class="line">        title: &apos;index&apos;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br><span class="line">router.get(&apos;/reg&apos;, function (req, res, next) &#123;</span><br><span class="line">    res.render(&apos;reg&apos;, &#123;</span><br><span class="line">        title: &apos;reg&apos;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br><span class="line">router.get(&apos;/login&apos;, function (req, res, next) &#123;</span><br><span class="line">    res.render(&apos;login&apos;, &#123;</span><br><span class="line">        title: &apos;login&apos;</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="3"><li><h5 id="将相同代码独立出来"><a href="#将相同代码独立出来" class="headerlink" title="将相同代码独立出来"></a>将相同代码独立出来</h5><p>比如我的(基本资料/修改资料/借书/还书/借阅记录)这5个界面,上半部分是重复代码。</p><p>新建<code>TopBar.ejs</code>,放置重复代码,在其他五个界面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- include TopBar %&gt;</span><br></pre></td></tr></table></figure><p>所有重复代码以此类推</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;EJS模板引擎-完结&quot;&gt;&lt;a href=&quot;#EJS模板引擎-完结&quot; class=&quot;headerlink&quot; title=&quot;EJS模板引擎 [完结]&quot;&gt;&lt;/a&gt;EJS模板引擎 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;初步渲染页面~&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Express+ejs+Mysql图书管理系统" scheme="https://hotkang.cn/categories/Express-ejs-Mysql%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="图书管理系统" scheme="https://hotkang.cn/tags/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Mysql" scheme="https://hotkang.cn/tags/Mysql/"/>
    
      <category term="Express" scheme="https://hotkang.cn/tags/Express/"/>
    
      <category term="EJS" scheme="https://hotkang.cn/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title>图书管理系统一</title>
    <link href="https://hotkang.cn/2018/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%B8%80/"/>
    <id>https://hotkang.cn/2018/图书管理系统一/</id>
    <published>2018-06-11T15:24:02.000Z</published>
    <updated>2018-08-11T09:40:02.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express-完结"><a href="#Express-完结" class="headerlink" title="Express [完结]"></a>Express <span style="font-size:.5em">[完结]</span></h2><blockquote><p>图书管理系统大家应该都不陌生~<br>老师对大一的说：写一个图书管理系统吧？！！！<br>老师对大二的说：写一个图书管理系统！！！！<br>老师对大三的说：写一个图书管理系统！<br>大一的图书管理系统VS大三的图书管理系统？？</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><h3 id="个人比较喜欢先甩参考链接-可以选择直接去看参考链接。"><a href="#个人比较喜欢先甩参考链接-可以选择直接去看参考链接。" class="headerlink" title="个人比较喜欢先甩参考链接,可以选择直接去看参考链接。"></a>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</h3><ul><li><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">Express官网</a></li></ul></blockquote><hr><p>首先默认你已经安装了 Node.js,没有装的可以参考<a href="https://hotkang.cn/2018/%E7%94%A8nvm%E8%A3%85node-js">用nvm装node.js</a></p><h2 id="一、为你的应用创建一个目录（-hotyan）"><a href="#一、为你的应用创建一个目录（-hotyan）" class="headerlink" title="一、为你的应用创建一个目录（/hotyan）"></a>一、为你的应用创建一个目录（/hotyan）</h2><pre><code>$ mkdir hotyan</code></pre><p><br></p><h2 id="二、进入此目录并将其作为当前工作目录"><a href="#二、进入此目录并将其作为当前工作目录" class="headerlink" title="二、进入此目录并将其作为当前工作目录"></a>二、进入此目录并将其作为当前工作目录</h2><pre><code>$ cd hotyan</code></pre><p><br></p><h2 id="三、install-Express应用生成器"><a href="#三、install-Express应用生成器" class="headerlink" title="三、install Express应用生成器"></a>三、install Express应用生成器</h2><p>通过应用生成器工具 express 可以快速创建一个应用的骨架。</p><p>通过如下命令安装：</p><pre><code>$ npm install express-generator -g</code></pre><p><br></p><h2 id="四、创建工作项目"><a href="#四、创建工作项目" class="headerlink" title="四、创建工作项目"></a>四、创建工作项目</h2><p>当前工作目录下（/hotyan）创建一个命名为 Librarys 的工作项目。</p><pre><code>$ express --view=ejs  Libraryscreate : Librarys/create : Librarys/public/create : Librarys/public/javascripts/create : Librarys/public/images/create : Librarys/public/stylesheets/create : Librarys/public/stylesheets/style.csscreate : Librarys/routes/create : Librarys/routes/index.jscreate : Librarys/routes/users.jscreate : Librarys/views/create : Librarys/views/error.ejscreate : Librarys/views/index.ejscreate : Librarys/app.jscreate : Librarys/package.jsoncreate : Librarys/bin/create : Librarys/bin/wwwchange directory:    $ cd Librarysinstall dependencies:    $ npm installrun the app:    $ DEBUG=librarys:* npm start</code></pre><p><br></p><h2 id="五、进入Library并安装依赖包"><a href="#五、进入Library并安装依赖包" class="headerlink" title="五、进入Library并安装依赖包"></a>五、进入Library并安装依赖包</h2><pre><code>$ cd Librarys$ npm install</code></pre><p><br></p><h2 id="六、启动这个项目（MacOS-或-Linux-平台）"><a href="#六、启动这个项目（MacOS-或-Linux-平台）" class="headerlink" title="六、启动这个项目（MacOS 或 Linux 平台）"></a>六、启动这个项目（MacOS 或 Linux 平台）</h2><pre><code>$ DEBUG=librarys:* npm start</code></pre><p><br></p><h2 id="七、在浏览器打开-http-localhost-3000"><a href="#七、在浏览器打开-http-localhost-3000" class="headerlink" title="七、在浏览器打开 http://localhost:3000/"></a>七、在浏览器打开 <code>http://localhost:3000/</code></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Express-完结&quot;&gt;&lt;a href=&quot;#Express-完结&quot; class=&quot;headerlink&quot; title=&quot;Express [完结]&quot;&gt;&lt;/a&gt;Express &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;图书管理系统大家应该都不陌生~&lt;br&gt;老师对大一的说：写一个图书管理系统吧？！！！&lt;br&gt;老师对大二的说：写一个图书管理系统！！！！&lt;br&gt;老师对大三的说：写一个图书管理系统！&lt;br&gt;大一的图书管理系统VS大三的图书管理系统？？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Express+ejs+Mysql图书管理系统" scheme="https://hotkang.cn/categories/Express-ejs-Mysql%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="图书管理系统" scheme="https://hotkang.cn/tags/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Node.js" scheme="https://hotkang.cn/tags/Node-js/"/>
    
      <category term="Express" scheme="https://hotkang.cn/tags/Express/"/>
    
      <category term="EJS" scheme="https://hotkang.cn/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title>用nvm装node.js</title>
    <link href="https://hotkang.cn/2018/%E7%94%A8nvm%E8%A3%85node-js/"/>
    <id>https://hotkang.cn/2018/用nvm装node-js/</id>
    <published>2018-05-30T14:23:44.000Z</published>
    <updated>2018-08-03T16:42:39.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于node安装-完结"><a href="#关于node安装-完结" class="headerlink" title="关于node安装  [完结]"></a>关于node安装 <span style="font-size:.5em">[完结]</span></h2><blockquote><p>本地安装？全局安装？nvm安装？傻傻分不清楚？<br>使用 nvm 管理不同版本的 node 与 npm</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li>了解<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">NVM</a></li><li>了解<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>了解<a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">通过包管理器安装Node.js</a>NVM部分</li><li>了解<a href="https://www.npmjs.com/get-npm" target="_blank" rel="noopener">NPM</a></li><li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html" target="_blank" rel="noopener">本文参考链接</a></li></ul></blockquote><hr><h2 id="一、卸载全局安装的-node"><a href="#一、卸载全局安装的-node" class="headerlink" title="一、卸载全局安装的 node"></a>一、卸载全局安装的 node</h2><p>在官网下载的 node 安装包,运行后会自动安装在全局目录,使用过程中经常会遇到一些权限问题,用以下方法卸载全局安装的 node。(不需要卸载则跳过此步骤)</p><ol><li><h5 id="删除-node-和-node-modules-相关的文件和文件夹"><a href="#删除-node-和-node-modules-相关的文件和文件夹" class="headerlink" title="删除 node 和 node_modules 相关的文件和文件夹"></a>删除 node 和 node_modules 相关的文件和文件夹</h5><p>打开Finder,按 shift+command+G 来打开前往文件夹的窗口,分别进入下列目录,删除 node 和 node_modules 相关的文件和文件夹</p><pre><code>/usr/local/lib/usr/local/include</code></pre></li><li><h5 id="如果你是使用的-brew-install-node-安装的-还需要在终端中执行以下命令来卸载"><a href="#如果你是使用的-brew-install-node-安装的-还需要在终端中执行以下命令来卸载" class="headerlink" title="如果你是使用的 brew install node 安装的,还需要在终端中执行以下命令来卸载"></a>如果你是使用的 brew install node 安装的,还需要在终端中执行以下命令来卸载</h5><pre><code>$ brew uninstall node </code></pre></li><li><h5 id="检查-node-和-node-modules-相关文件-文件夹是否删除成功"><a href="#检查-node-和-node-modules-相关文件-文件夹是否删除成功" class="headerlink" title="检查 node 和 node_modules 相关文件/文件夹是否删除成功"></a>检查 node 和 node_modules 相关文件/文件夹是否删除成功</h5><p>检查个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹</p></li><li><h5 id="进入-usr-local-bin-并删除-node-可执行文件"><a href="#进入-usr-local-bin-并删除-node-可执行文件" class="headerlink" title="进入 /usr/local/bin 并删除 node 可执行文件"></a>进入 /usr/local/bin 并删除 node 可执行文件</h5></li></ol><ol start="5"><li><h5 id="你可能还需要在终端中输入一些额外的指令"><a href="#你可能还需要在终端中输入一些额外的指令" class="headerlink" title="你可能还需要在终端中输入一些额外的指令"></a>你可能还需要在终端中输入一些额外的指令</h5><pre><code>$ sudo rm /usr/local/bin/npm$ sudo rm /usr/local/share/man/man1/node.1$ sudo rm /usr/local/lib/dtrace/node.d$ sudo rm -rf ~/.npm$ sudo rm -rf ~/.node-gyp$ sudo rm /opt/local/bin/node$ sudo rm /opt/local/include/node$ sudo rm -rf /opt/local/lib/node_modules</code></pre></li></ol><p><br></p><h2 id="二、OSX-安装-NVM"><a href="#二、OSX-安装-NVM" class="headerlink" title="二、OSX 安装 NVM"></a>二、OSX 安装 NVM</h2><ul><li><h5 id="用-X-Code-的命令行工具"><a href="#用-X-Code-的命令行工具" class="headerlink" title="用 X-Code 的命令行工具"></a>用 X-Code 的命令行工具</h5><p>运行以下命令</p><pre><code>$ xcode-select --install$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</code></pre></li></ul><p><br></p><h2 id="三、安装多版本-node"><a href="#三、安装多版本-node" class="headerlink" title="三、安装多版本 node"></a>三、安装多版本 node</h2><ul><li><h5 id="查看远程服务器上所有的可用版本"><a href="#查看远程服务器上所有的可用版本" class="headerlink" title="查看远程服务器上所有的可用版本"></a>查看远程服务器上所有的可用版本</h5><pre><code>$ nvm ls-remote</code></pre></li><li><h5 id="安装最新版-Node"><a href="#安装最新版-Node" class="headerlink" title="安装最新版 Node"></a>安装最新版 Node</h5><pre><code>$ nvm install node </code></pre></li><li><h5 id="安装某一版本-4-2-2"><a href="#安装某一版本-4-2-2" class="headerlink" title="安装某一版本(4.2.2)"></a>安装某一版本(4.2.2)</h5><pre><code>$ nvm install 4.2.2</code></pre></li><li><h5 id="安装4-2-系列的最新的一个版本"><a href="#安装4-2-系列的最新的一个版本" class="headerlink" title="安装4.2 系列的最新的一个版本"></a>安装4.2 系列的最新的一个版本</h5><pre><code>$ nvm install 4.2</code></pre></li></ul><p>nvm 遵守语义化版本命名规则,nvm 会寻找 4.2.x 中最高的版本来安装。</p><p><br></p><h2 id="四、在不同版本间切换"><a href="#四、在不同版本间切换" class="headerlink" title="四、在不同版本间切换"></a>四、在不同版本间切换</h2><p>每当安装了一个新版本 Node 后,全局环境会自动把这个新版本设置为默认。</p><ul><li><h5 id="nvm-提供-nvm-use-命令用于版本切换"><a href="#nvm-提供-nvm-use-命令用于版本切换" class="headerlink" title="nvm 提供 nvm use 命令用于版本切换"></a>nvm 提供 nvm use 命令用于版本切换</h5><ul><li><h5 id="切换到最新版："><a href="#切换到最新版：" class="headerlink" title="切换到最新版："></a>切换到最新版：</h5><pre><code>$ nvm use node</code></pre></li><li><h5 id="切换到-4-2-2："><a href="#切换到-4-2-2：" class="headerlink" title="切换到 4.2.2："></a>切换到 4.2.2：</h5><pre><code>$ nvm use 4.2.2</code></pre></li><li><h5 id="切换到最新的-4-2-x："><a href="#切换到最新的-4-2-x：" class="headerlink" title="切换到最新的 4.2.x："></a>切换到最新的 4.2.x：</h5><pre><code>$ nvm use 4.2</code></pre><p>每次执行切换的时候，系统都会把 node 的可执行文件链接放到特定版本的文件上。</p></li></ul></li></ul><p><br></p><h2 id="五、用-nvm-给不同的版本号设置别名"><a href="#五、用-nvm-给不同的版本号设置别名" class="headerlink" title="五、用 nvm 给不同的版本号设置别名"></a>五、用 nvm 给不同的版本号设置别名</h2><ul><li><h5 id="给4-2-2-版本号起个别名hotyan-version"><a href="#给4-2-2-版本号起个别名hotyan-version" class="headerlink" title="给4.2.2 版本号起个别名hotyan-version"></a>给4.2.2 版本号起个别名hotyan-version</h5><pre><code>$ nvm alias hotyan-version 4.2.2</code></pre></li><li><h5 id="运行"><a href="#运行" class="headerlink" title="运行:"></a>运行:</h5><pre><code>$ nvm use hotyan-version</code></pre></li><li><h5 id="取消别名："><a href="#取消别名：" class="headerlink" title="取消别名："></a>取消别名：</h5><pre><code>$ nvm unalias hotyan-version  </code></pre></li></ul><p><br></p><h2 id="六、列出已安装实例"><a href="#六、列出已安装实例" class="headerlink" title="六、列出已安装实例"></a>六、列出已安装实例</h2><pre><code>$ nvm ls</code></pre><p><br></p><h2 id="七、确认某个版本Node的路径"><a href="#七、确认某个版本Node的路径" class="headerlink" title="七、确认某个版本Node的路径"></a>七、确认某个版本Node的路径</h2><pre><code>$ nvm which 4.2.2</code></pre><p><br></p><h2 id="八、检查是否成功安装node和npm"><a href="#八、检查是否成功安装node和npm" class="headerlink" title="八、检查是否成功安装node和npm"></a>八、检查是否成功安装node和npm</h2><p>当成功下载Node.js时,会自动安装npm。</p><ul><li><h5 id="检查Node"><a href="#检查Node" class="headerlink" title="检查Node:"></a>检查Node:</h5><pre><code>$ node -v</code></pre></li><li><h5 id="确认npm"><a href="#确认npm" class="headerlink" title="确认npm:"></a>确认npm:</h5><pre><code>$ npm -v</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于node安装-完结&quot;&gt;&lt;a href=&quot;#关于node安装-完结&quot; class=&quot;headerlink&quot; title=&quot;关于node安装  [完结]&quot;&gt;&lt;/a&gt;关于node安装 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;本地安装？全局安装？nvm安装？傻傻分不清楚？&lt;br&gt;使用 nvm 管理不同版本的 node 与 npm&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Install" scheme="https://hotkang.cn/categories/Install/"/>
    
      <category term="Node.js" scheme="https://hotkang.cn/categories/Install/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://hotkang.cn/tags/Node-js/"/>
    
      <category term="NVM" scheme="https://hotkang.cn/tags/NVM/"/>
    
      <category term="NPM" scheme="https://hotkang.cn/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建github博客二</title>
    <link href="https://hotkang.cn/2018/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E4%BA%8C/"/>
    <id>https://hotkang.cn/2018/用hexo搭建github博客二/</id>
    <published>2018-05-29T07:39:01.000Z</published>
    <updated>2018-08-10T13:56:47.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化博客-持续完善"><a href="#优化博客-持续完善" class="headerlink" title="优化博客 [持续完善]"></a>优化博客 <span style="font-size:.5em">[持续完善]</span></h2><blockquote><p>搜索了很多Next主题的效果，总结了自己比较喜欢或者已运用到Blog的效果~</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></li><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">参考链接1</a></li><li><a href="https://www.jianshu.com/p/efbeddc5eb19" target="_blank" rel="noopener">参考链接2</a></li><li><a href="https://www.vincentqin.tech/posts/build-a-website-using-hexo/" target="_blank" rel="noopener">参考链接3</a></li><li><a href="http://devinol.com/Hexo/Next%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%B8%89/" target="_blank" rel="noopener">参考链接4</a></li><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题</a></li></ul></blockquote><hr><h2 id="一、修改Next主题模式"><a href="#一、修改Next主题模式" class="headerlink" title="一、修改Next主题模式"></a>一、修改Next主题模式</h2><ol><li><h5 id="修改themes-next-config-yml文件Schemes属性"><a href="#修改themes-next-config-yml文件Schemes属性" class="headerlink" title="修改themes/next/_config.yml文件Schemes属性"></a>修改themes/next/_config.yml文件Schemes属性</h5><p>注意不要跟根目录下的_config.yml混淆</p><pre><code># Schemes# scheme: Muse   # scheme: Mist  scheme: Pisces# scheme: Gemini</code></pre><p>NexT主题默认使用Muse模式,根据自己的喜好选择。</p><p><del>我比较喜欢Pisces ,对源码做了些样式修改。</del></p><p>后来我喜欢上了<code>Gemini</code>。<code>Gemini</code>跟<code>Pisce</code>相似,而且<code>Gemini</code>的源码样式是在<code>Pisce</code>的基础上重写的。</p></li></ol><p><br></p><ol start="2"><li><h5 id="更新Hexo部署"><a href="#更新Hexo部署" class="headerlink" title="更新Hexo部署"></a>更新Hexo部署</h5><p>每次修改后都可以更新部署,也可最后再一次性部署。后面不再赘述。</p><pre><code>$ cd  HotYan_Blog //进入博客文件夹目录$ hexo clean    // 清理缓存$ hexo generate // 生成文件$ hexo deploy   // 线上部署/*简写如下*/$ hexo clean$ hexo g$ hexo d</code></pre></li></ol><p><br></p><h2 id="二、设置首页预览摘要"><a href="#二、设置首页预览摘要" class="headerlink" title="二、设置首页预览摘要"></a>二、设置首页预览摘要</h2><p>了解一下官网【Next使用文档】【<a href="https://theme-next.iissnan.com/faqs.html#read-more" target="_blank" rel="noopener">如何设置阅读全文</a>】介绍的三种方法</p><p>我使用的是用<code>&lt;!-- more --&gt;</code>进行手动截断</p><p><br></p><h2 id="三、侧边栏显示效果"><a href="#三、侧边栏显示效果" class="headerlink" title="三、侧边栏显示效果"></a>三、侧边栏显示效果</h2><ul><li><h5 id="修改themes-next-config-yml文件sidebar属性"><a href="#修改themes-next-config-yml文件sidebar属性" class="headerlink" title="修改themes/next/_config.yml文件sidebar属性"></a>修改themes/next/_config.yml文件sidebar属性</h5><pre><code>sidebar:    # Sidebar Position, available value: left | right (only for Pisces | Gemini).      position: left    # position: right //修改侧边栏位置    # Sidebar Display, available value (only for Muse | Mist):    #  - post    expand on posts automatically. Default.    #  - always  expand for all pages automatically    #  - hide    expand only when click on the sidebar toggle icon.    #  - remove  Totally remove sidebar including sidebar toggle.    # display: post      //默认      display: always     //一直显示    # display: hide      //初始隐藏    # display: remove    //移除侧边栏</code></pre><p>根据提示,设置自己喜欢的样式,我是Pisces主题,设置侧边栏在左边,且一直显示。</p></li></ul><p><br></p><h2 id="四、侧边栏社交链接"><a href="#四、侧边栏社交链接" class="headerlink" title="四、侧边栏社交链接"></a>四、侧边栏社交链接</h2><ul><li><h5 id="修改themes-next-config-yml文件social属性"><a href="#修改themes-next-config-yml文件social属性" class="headerlink" title="修改themes/next/_config.yml文件social属性"></a>修改themes/next/_config.yml文件social属性</h5><pre><code>/*文字链接*/social:    GitHub: https://github.com/hotYan || github    E-Mail: mailto:hotyann@163.com || envelope/*链接前图标*/social_icons:    enable: true    GitHub: github </code></pre><p>我只添加了GitHub、E-Mail。</p></li></ul><p><br></p><h2 id="五、设置RSS"><a href="#五、设置RSS" class="headerlink" title="五、设置RSS"></a>五、设置RSS</h2><ol><li><h5 id="安装-hexo-generator-feed-插件"><a href="#安装-hexo-generator-feed-插件" class="headerlink" title="安装 hexo-generator-feed 插件"></a>安装 hexo-generator-feed 插件</h5><p>RSS需要有一个Feed链接，而这个链接需要靠hexo-generator-feed插件来生成</p><pre><code>$ cd HotYan_Blog$ npm install hexo-generator-feed --save</code></pre></li></ol><p><br></p><ol start="2"><li><h5 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改/_config.yml文件"></a>修改/_config.yml文件</h5><pre><code>#type: RSS的类型(atom/rss2)#path: 文件路径,默认是atom.xml/rss2.xml#limit:展示文章的数量,使用0或则false代表展示全部#RSS订阅插件feed:     type: atom    path: atom.xml    limit: 0#RSS订阅支持plugins: hexo-generate-feed</code></pre></li></ol><p><br></p><ol start="3"><li><h5 id="修改themes-next-config-yml文件rss属性"><a href="#修改themes-next-config-yml文件rss属性" class="headerlink" title="修改themes/next/_config.yml文件rss属性"></a>修改themes/next/_config.yml文件rss属性</h5><pre><code>rss: /atom.xml </code></pre></li></ol><p><br></p><h2 id="六、添加菜单选项"><a href="#六、添加菜单选项" class="headerlink" title="六、添加菜单选项"></a>六、添加菜单选项</h2><p>默认情况下，菜单导航栏有首页、归档、关于三个选项，我们可以自行添加</p><ol><li><h5 id="修改themes-next-config-yml文件menu属性"><a href="#修改themes-next-config-yml文件menu属性" class="headerlink" title="修改themes/next/_config.yml文件menu属性"></a>修改themes/next/_config.yml文件menu属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: / || home                //默认有</span><br><span class="line">    about: /about/ || user         // 默认有</span><br><span class="line">    tags: /tags/ || tags            //自行添加</span><br><span class="line">    categories: /categories/ || th  //自行添加</span><br><span class="line">    archives: /archives/ || archive   //默认有</span><br></pre></td></tr></table></figure><p>比如我添加了tags、categories</p></li></ol><p><br></p><ol start="2"><li><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><pre><code>$ cd  HotYan_Blog //进入博客文件夹目录$ hexo new page &quot;tags&quot;$ hexo new page &quot;categories&quot;</code></pre></li></ol><p><br></p><ol start="3"><li><h5 id="修改index-md"><a href="#修改index-md" class="headerlink" title="修改index.md"></a>修改<code>index.md</code></h5><p>在/source/目录下创建了categories、tags文件夹,在这些文件夹中分别会创建一个index.md文件,对内容type进行修改，使之分别为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-05-29 00:02:39</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-05-29 00:02:54</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h2 id="七、修改文章底部标签样式"><a href="#七、修改文章底部标签样式" class="headerlink" title="七、修改文章底部标签样式"></a>七、修改文章底部标签样式</h2><ul><li><h5 id="修改-themes-next-layout-macro-post-swig文件"><a href="#修改-themes-next-layout-macro-post-swig文件" class="headerlink" title="修改/themes/next/layout/_macro/post.swig文件"></a>修改/themes/next/layout/_macro/post.swig文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;post-tags&quot;&gt;  </span><br><span class="line">        &#123;% for tag in post.tags %&#125;</span><br><span class="line">                &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p></li></ul><p><br></p><h2 id="八、文章末尾添加结束标记"><a href="#八、文章末尾添加结束标记" class="headerlink" title="八、文章末尾添加结束标记"></a>八、文章末尾添加结束标记</h2><ol><li><h5 id="在-themes-next-layout-macro新建passage-end-tag-swig"><a href="#在-themes-next-layout-macro新建passage-end-tag-swig" class="headerlink" title="在/themes/next/layout/_macro新建passage-end-tag.swig"></a>在/themes/next/layout/_macro新建passage-end-tag.swig</h5><p>添加以下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #555;font-size:14px;&quot;&gt; - END - &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="2"><li><h5 id="修改-themes-next-layout-macro-post-swig文件-1"><a href="#修改-themes-next-layout-macro-post-swig文件-1" class="headerlink" title="修改/themes/next/layout/_macro/post.swig文件"></a>修改/themes/next/layout/_macro/post.swig文件</h5><p>在下面相应的位置添加添加相应的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">/*插入代码如下*/</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;% if not is_index %&#125;</span><br><span class="line">                &#123;% include&apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">/*插入到此处结束*/</span><br><span class="line"></span><br><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">        &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><del>看参考文档的时候觉得代码插入的地方描述的不是很清楚!!在这个地方自己尽量描述的不能再清楚了</del></p></li></ol><p><br></p><ol start="3"><li><h5 id="修改themes-next-config-yml文件"><a href="#修改themes-next-config-yml文件" class="headerlink" title="修改themes/next/_config.yml文件"></a>修改themes/next/_config.yml文件</h5><p>在任意地方添加下面代码:</p><pre><code># 文章末尾添加结束标记passage_end_tag:        enabled: true</code></pre></li></ol><p><br></p><h2 id="九、访问量统计"><a href="#九、访问量统计" class="headerlink" title="九、访问量统计"></a>九、访问量统计</h2><ol><li><h5 id="busuanzi统计"><a href="#busuanzi统计" class="headerlink" title="busuanzi统计"></a>busuanzi统计</h5><blockquote><p>修改themes/next/_config.yml文件busuanzi_count属性</p></blockquote><pre><code>busuanzi_count:        # count values only if the other configs are false        enable: true         # 站点UV配置 总访问人次(一个人访问多篇文章记录一次)        site_uv: false        site_uv_header: 总访问量        site_uv_footer:        # 站点PV配置 总访问量(一个人访问多篇文章记录多次)        site_pv: false        site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;        site_pv_footer: 次        # 文章PV配置 访问量        page_pv: true        page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;        page_pv_footer: </code></pre><p><del>我只设置了文章访问量</del></p><p><a href="https://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">更多&gt;&gt;</a></p></li></ol><p><br></p><ol start="2"><li><h5 id="LeanCloud统计文章阅读量"><a href="#LeanCloud统计文章阅读量" class="headerlink" title="LeanCloud统计文章阅读量"></a>LeanCloud统计文章阅读量</h5>【<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>】</li></ol><p><br></p><h2 id="十、修改头像"><a href="#十、修改头像" class="headerlink" title="十、修改头像"></a>十、修改头像</h2><ol><li><h5 id="在themes-next-source-images下放置头像"><a href="#在themes-next-source-images下放置头像" class="headerlink" title="在themes/next/source/images下放置头像"></a>在themes/next/source/images下放置头像</h5></li><li><h5 id="修改themes-next-config-yml文件avatar属性"><a href="#修改themes-next-config-yml文件avatar属性" class="headerlink" title="修改themes/next/_config.yml文件avatar属性"></a>修改themes/next/_config.yml文件avatar属性</h5><pre><code>#avatar: 路径为头像目录avatar: ../images/avata.gif     </code></pre></li></ol><p><br></p><h2 id="十一、添加背景图"><a href="#十一、添加背景图" class="headerlink" title="十一、添加背景图"></a>十一、添加背景图</h2><ul><li><h5 id="修改themes-next-source-css-custom-custom-styl"><a href="#修改themes-next-source-css-custom-custom-styl" class="headerlink" title="修改themes/next/source/css _custom/custom.styl"></a>修改themes/next/source/css _custom/custom.styl</h5>添加如下代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">        background:url(../images/xx.jpg);</span><br><span class="line">        background-size:cover;</span><br><span class="line">        background-repeat:no-repeat;</span><br><span class="line">        background-attachment:fixed;</span><br><span class="line">        background-position:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h2 id="十二、修改各版块透明度"><a href="#十二、修改各版块透明度" class="headerlink" title="十二、修改各版块透明度"></a>十二、修改各版块透明度</h2><ol><li><h5 id="内容板块"><a href="#内容板块" class="headerlink" title="内容板块"></a>内容板块</h5><ul><li><p>修改在对应主题的对应.yml文件中,ID为【.content-wrap】标签下的background属性</p><pre><code>background: rgba(255,255,255,0.7); </code></pre></li><li><p>以主题Pisces为例,对应内容板块文件路径为:</p><pre><code>themes/next/source/css/_schemes/Pisces/_layout.styl</code></pre></li></ul></li></ol><p><br></p><ol start="2"><li><h5 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h5><ul><li><p>修改在对应主题的对应.yml文件中,ID为【.header-inner】标签下的background属性。</p></li><li><p>以主题Pisces为例,对应菜单栏文件路径为:</p><pre><code>themes/next/source/css/_schemes/Pisces/_layout.styl</code></pre></li></ul></li></ol><p><br></p><ol start="3"><li><h5 id="站点概况"><a href="#站点概况" class="headerlink" title="站点概况"></a>站点概况</h5><ul><li><p>修改在对应主题的对应.yml文件中,ID为【.sidebar-inner】标签下的background属性</p></li><li><p>以主题Pisces为例,对应站点概况文件路径为:</p><pre><code>themes/next/source/css/_schemes/Pisces/_sidebar.styl</code></pre></li><li><p>修改在对应主题的对应.yml文件中,ID为【.sidebar】标签下的background属性</p></li><li><p>以主题Pisces为例,对应站点概况文件路径为:</p><pre><code>themes/next/source/css/_schemes/Pisces/_layout.styl</code></pre></li></ul></li></ol><p><br></p><ol start="4"><li><h5 id="按钮背景"><a href="#按钮背景" class="headerlink" title="按钮背景"></a>按钮背景</h5><p>主题共享的文件,文件位置:</p><pre><code>themes/next/source/css _custom/components/post/post-button.styl</code></pre></li></ol><p><br></p><h2 id="十三、点击出现桃心"><a href="#十三、点击出现桃心" class="headerlink" title="十三、点击出现桃心"></a>十三、点击出现桃心</h2><ol><li><p>copy<a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="noopener">网页</a>代码</p></li><li><p>在<code>/themes/next/source/js/src</code>目录下新建love.js文件,把copy的代码粘贴到此文件。</p></li><li><p>在/themes/next/layout/_layout.swig 文件引入love.js</p><pre><code>...&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;   //在&lt;/body&gt;标签前引入love.js</code></pre><p><del>我发现在文章详情界面,没有效果,理论上应该是有效果的吧？？可能源码被我改砸了？</del></p><p><del>检查发现因为我love.js位置放错了！！</del>一定要放在紧挨<code>&lt;/body&gt;</code>标签前！！</p></li></ol><p><br><br></p><h2 id="十四、文章目录"><a href="#十四、文章目录" class="headerlink" title="十四、文章目录"></a>十四、文章目录</h2><p>目录不能跨级,否则会导致编号会错误。<a href="https://github.com/iissnan/hexo-theme-next/issues/1259" target="_blank" rel="noopener">More&gt;&gt;</a></p><ol><li><h5 id="取消文章目录自动编号"><a href="#取消文章目录自动编号" class="headerlink" title="取消文章目录自动编号"></a>取消文章目录自动编号</h5><blockquote><p>修改themes/next/_config.yml文件toc属性</p></blockquote><pre><code># Table Of Contents in the Sidebar  toc:  enable: true# Automatically add list number to toc.  number: false      /*修改这里*/# If true, all words will placed on next lines if header width longer then sidebar width.  wrap: false</code></pre></li></ol><p><br></p><ol start="2"><li><h5 id="自定义文章目录全显示"><a href="#自定义文章目录全显示" class="headerlink" title="自定义文章目录全显示"></a>自定义文章目录全显示</h5><blockquote><p>修改/themes/next/source/css/_custom/custom.styl,添加以下代码</p></blockquote><pre><code>.post-toc .nav .nav-child {        display: block;} </code></pre><p>并不确定是否成功<a href="https://github.com/iissnan/hexo-theme-next/issues/531" target="_blank" rel="noopener">More &gt;&gt;</a></p></li></ol><p><br></p><ol start="3"><li><h5 id="自定义文章目录级数"><a href="#自定义文章目录级数" class="headerlink" title="自定义文章目录级数"></a>自定义文章目录级数</h5><pre><code>h1      # h2      ## h3      ### h4      #### </code></pre><p>我的标题从h2开始。</p><pre><code>## 十四、文章目录### 1.取消文章目录自动编号#### 修改themes/next/_config.yml文件toc属性  </code></pre><p>不喜欢阅读的时候左边目录一直动,也不喜欢目录全部显示。想要只显示大标题的效果</p><pre><code>一、修改Next主题模式二、设置首页预览摘要三、侧边栏显示效果...</code></pre><p>没有Google到解决方法,以下方法是自己乱改的！！！</p><p><br></p><blockquote><p>修改根目录下/node_modules/hexo/lib/plugins/helper/toc.js</p></blockquote><pre><code>/*修改前*/const headingsMaxDepth = options.hasOwnProperty(&apos;max_depth&apos;) ? options.max_depth : 6;/*修改后*/const headingsMaxDepth = options.hasOwnProperty(&apos;max_depth&apos;) ? options.max_depth : 2;</code></pre></li></ol><p><br></p><h2 id="十五、博文置顶"><a href="#十五、博文置顶" class="headerlink" title="十五、博文置顶"></a>十五、博文置顶</h2><ol><li><h5 id="修改-node-modules-hexo-generator-index-lib-generator-js-文件"><a href="#修改-node-modules-hexo-generator-index-lib-generator-js-文件" class="headerlink" title="修改 node_modules/hexo-generator-index/lib/generator.js 文件"></a>修改 node_modules/hexo-generator-index/lib/generator.js 文件</h5><p>代码全部替换为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">    var config = this.config;</span><br><span class="line">    var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">    if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">        if(a.top == b.top) </span><br><span class="line">            return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">        else </span><br><span class="line">            return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else </span><br><span class="line">            return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">        &#125;);</span><br><span class="line">        var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line">        return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">            perPage: config.index_generator.per_page,</span><br><span class="line">            layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">            format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                __index: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="2"><li><h5 id="在文章添加top字段"><a href="#在文章添加top字段" class="headerlink" title="在文章添加top字段"></a>在文章添加top字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我是置顶博文</span><br><span class="line">date: 2018-07-18 21:30:35</span><br><span class="line">tags: 留言板</span><br><span class="line">categories: hotYan_博客之路</span><br><span class="line">top: 100                   //值越大,越靠前</span><br><span class="line">commentIssueId: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p><br></p><h2 id="十六、博客压缩"><a href="#十六、博客压缩" class="headerlink" title="十六、博客压缩"></a>十六、博客压缩</h2><blockquote><p>【<a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a>】</p></blockquote><p><br></p><h2 id="十七、精简部署命令"><a href="#十七、精简部署命令" class="headerlink" title="十七、精简部署命令"></a>十七、精简部署命令</h2><ol><li><h5 id="修改根目录下-package-json文件"><a href="#修改根目录下-package-json文件" class="headerlink" title="修改根目录下/package.json文件"></a>修改根目录下/package.json文件</h5><p>添加下面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;update&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><br></p><ol start="2"><li><h5 id="更新Hexo部署-1"><a href="#更新Hexo部署-1" class="headerlink" title="更新Hexo部署"></a>更新Hexo部署</h5><pre><code>$ npm run update</code></pre></li></ol><p><br></p><h2 id="十八、文章categories字段多级"><a href="#十八、文章categories字段多级" class="headerlink" title="十八、文章categories字段多级"></a>十八、文章categories字段多级</h2><ol><li><h5 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h5><pre><code>categories: [博客,Hexo]</code></pre></li></ol><p><br></p><ol start="2"><li><h5 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h5><pre><code>categories:         - 博客        - Hexo</code></pre></li></ol><p><br></p><ol start="3"><li><h5 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h5><ul><li>博客<ul><li>Next</li></ul></li></ul></li></ol><p><br></p><h2 id="十九、文章多个Tags字段值"><a href="#十九、文章多个Tags字段值" class="headerlink" title="十九、文章多个Tags字段值"></a>十九、文章多个Tags字段值</h2><p>写法同十八,表达意思不一样,tags表示多个标签,categories表示多级分类</p><p><br></p><h2 id="二十、SEO优化"><a href="#二十、SEO优化" class="headerlink" title="二十、SEO优化"></a>二十、SEO优化</h2><p>我只进行了GoogleSEO优化,好的参考链接有很多,便不重复总结一遍。这个<a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">参考链接</a>总结的非常全面仔细,连我踩得坑都一模一样(HTML上传一直验证失败,最后选择的HTML标记验证)。其中【网站结构自身优化】部分,很全面。👍👍</p><h4 id="BUT"><a href="#BUT" class="headerlink" title="BUT"></a>BUT</h4><p>建议把</p><pre><code>permalink: :title.html</code></pre><p>修改为</p><pre><code>permalink: :title/</code></pre><p>避免出现想跳转到页面某个特定位置时找不到(即出现404界面)</p><p>修改后:</p><ol><li><p>文章将全部移到public根目录下,后面文章越来越多…github【code】部分列表将越来越长！逼死强迫症患者！</p></li><li><p>文章的阅读量将从0重新统计！！！💔</p></li><li><p>现链接格式必须改为<code>yoursite.com/title/</code>,之前贴的链接将失效。</p></li></ol><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优化博客-持续完善&quot;&gt;&lt;a href=&quot;#优化博客-持续完善&quot; class=&quot;headerlink&quot; title=&quot;优化博客 [持续完善]&quot;&gt;&lt;/a&gt;优化博客 &lt;span style=&quot;font-size:.5em&quot;&gt;[持续完善]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;搜索了很多Next主题的效果，总结了自己比较喜欢或者已运用到Blog的效果~&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hotYan_博客之路" scheme="https://hotkang.cn/categories/hotYan-%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Hexo" scheme="https://hotkang.cn/tags/Hexo/"/>
    
      <category term="博客" scheme="https://hotkang.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Next" scheme="https://hotkang.cn/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Mac Use Homebrew Install Mongodb</title>
    <link href="https://hotkang.cn/2018/use%20homebrew%20install%20mongodb/"/>
    <id>https://hotkang.cn/2018/use homebrew install mongodb/</id>
    <published>2018-05-29T07:38:51.000Z</published>
    <updated>2018-08-03T08:38:33.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mac-Use-Homebrew-Install-Mongodb-完结"><a href="#Mac-Use-Homebrew-Install-Mongodb-完结" class="headerlink" title="Mac Use Homebrew Install Mongodb [完结]"></a>Mac Use Homebrew Install Mongodb <span style="font-size:.5em">[完结]</span></h2><blockquote><p>图书管理系统,一开始是打算用Express+ejs+Mongodb,但是后期,使用mongoose出现了问题,尝试解决,没有成功后,就放弃了,转而使用Mysql。将安装过程记录一下。</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接,以下内容作为我的个人记录,以我的角度去记录,总结。</p><ul><li><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew官网</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/Homebrew/index.html" target="_blank" rel="noopener">参考链接</a></li></ul></blockquote><hr><h2 id="一、安装Homebrew"><a href="#一、安装Homebrew" class="headerlink" title="一、安装Homebrew"></a>一、安装Homebrew</h2><p>打开Terminal并运行以下命令</p><pre><code>$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><p>【注意】 Homebrew将作为安装过程的一部分下载并安装Xcode 8.0的命令行工具。</p><p><br></p><h2 id="二、安装MongoDB"><a href="#二、安装MongoDB" class="headerlink" title="二、安装MongoDB"></a>二、安装MongoDB</h2><ol><li><p>运行以下命令进行安装mongodb</p><pre><code>$ brew install mongodb</code></pre></li><li><p>将mongodb升级，确保版本最新</p><pre><code>$ brew upgrade mongodb</code></pre></li><li><p>创建一个目录，用来保存mongo默认的数据</p><pre><code>$ mkdir -p /data/db</code></pre></li><li><p>给目录以可读可写的权限</p><pre><code>$ chown `id -u` /data/db</code></pre></li><li><p>启动</p><pre><code>$ brew services start mongodb</code></pre></li></ol><p><br></p><h2 id="三、未正常关闭导致数据库突然启动不了"><a href="#三、未正常关闭导致数据库突然启动不了" class="headerlink" title="三、未正常关闭导致数据库突然启动不了"></a>三、未正常关闭导致数据库突然启动不了</h2><ol><li>删除掉mongod.lock文件，然后重新启动</li></ol><ol start="2"><li><p>如果还是不可以，先查看一下进程</p><pre><code>$ ps -aef | grep mongo</code></pre></li><li><p>然后根据进程ID杀掉进程</p><pre><code>$ sudo kill 6955</code></pre></li><li><p>重新启动mongodb服务</p><pre><code>$ brew services start mongodb</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Mac-Use-Homebrew-Install-Mongodb-完结&quot;&gt;&lt;a href=&quot;#Mac-Use-Homebrew-Install-Mongodb-完结&quot; class=&quot;headerlink&quot; title=&quot;Mac Use Homebrew Install Mongodb [完结]&quot;&gt;&lt;/a&gt;Mac Use Homebrew Install Mongodb &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;图书管理系统,一开始是打算用Express+ejs+Mongodb,但是后期,使用mongoose出现了问题,尝试解决,没有成功后,就放弃了,转而使用Mysql。将安装过程记录一下。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Install" scheme="https://hotkang.cn/categories/Install/"/>
    
      <category term="Mongodb" scheme="https://hotkang.cn/categories/Install/Mongodb/"/>
    
    
      <category term="Homebrew" scheme="https://hotkang.cn/tags/Homebrew/"/>
    
      <category term="Mongodb" scheme="https://hotkang.cn/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建github博客一</title>
    <link href="https://hotkang.cn/2018/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E4%B8%80/"/>
    <id>https://hotkang.cn/2018/用hexo搭建github博客一/</id>
    <published>2018-05-29T07:38:51.000Z</published>
    <updated>2018-08-04T06:54:34.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建博客-完结"><a href="#搭建博客-完结" class="headerlink" title="搭建博客 [完结]"></a>搭建博客 <span style="font-size:.5em">[完结]</span></h2><blockquote><p>一直想搭个人博客,却无从下手？？</p></blockquote><a id="more"></a><p><br></p><h2 id="链接自取"><a href="#链接自取" class="headerlink" title="链接自取"></a>链接自取</h2><blockquote><p>个人比较喜欢先甩参考链接,可以选择直接去看参考链接。</p><ul><li><a href="http://dmkf.xyz/2017/03/12/6272440/" target="_blank" rel="noopener">参考教程1</a></li><li><a href="https://sunny73.github.io/2018/02/10/Build-my-first-blog/" target="_blank" rel="noopener">参考教程2</a></li><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网文档</a></li></ul><p>第二个链接也是参考第一个写的,第一个链接加载超级慢,可以选择看第二个。</p></blockquote><hr><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol><li><h5 id="默认已有GitHub账号"><a href="#默认已有GitHub账号" class="headerlink" title="默认已有GitHub账号"></a>默认已有GitHub账号</h5><ul><li>没有GitHub账号？？<a href="https://github.com/" target="_blank" rel="noopener">点击注册</a></li></ul></li></ol><p><br></p><ol start="2"><li><h5 id="默认已安装Git"><a href="#默认已安装Git" class="headerlink" title="默认已安装Git"></a>默认已安装Git</h5><ul><li>没有安装Git？？<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">了解如何安装</a></li></ul></li></ol><p><br></p><ol start="3"><li><h5 id="默认已安装-Node-js"><a href="#默认已安装-Node-js" class="headerlink" title="默认已安装 Node.js"></a>默认已安装 Node.js</h5><ul><li>没有安装Node.js??<a href="https://hotyan.github.io/2018/%E7%94%A8nvm%E8%A3%85node-js/" target="_blank" rel="noopener">了解如何安装</a></li></ul></li></ol><p><br></p><ol start="4"><li><h5 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h5><ul><li><p>全局下载hexo</p><pre><code>$ npm install -g hexo-cli</code></pre></li><li><p>查看是否成功</p><pre><code>$ hexo</code></pre><p>进入<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网文档</a>了解更多</p></li></ul></li></ol><p><br></p><h2 id="二、初始化博客"><a href="#二、初始化博客" class="headerlink" title="二、初始化博客"></a>二、初始化博客</h2><pre><code>$ hexo init HotYan_Bolg //创建一个放在博客项目的文件$ cd HotYan_Bolg       //进入该文件$ npm install       //安装依赖包</code></pre><p><br>进入HotYan_Bolg,已自动生成以下文件</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p><br></p><h2 id="三、本地搭建"><a href="#三、本地搭建" class="headerlink" title="三、本地搭建"></a>三、本地搭建</h2><ol><li><h5 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h5><p>根据个人情况修改以下部分:</p><pre><code>/*修改前*/# Site  title: # The title of your website  subtitle: # The subtitle of your website  description: # The description of your website  author: # Your name  language: # The language of your website  timezone:/*修改后*/# Site  title: hotYan&apos;s Blog   subtitle: 爱美的程序媛  description: 毒鸡汤Yan  keywords:  author: hotYan  language: zh-CN  timezone: Asia/Shanghai</code></pre><p>注意:每一项的填写,其 <strong>:</strong> 后面都要保留一个空格,下同。</p></li></ol><p><br></p><ol start="2"><li><h5 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h5><pre><code>$ cd  HotYan_Blog //进入博客文件夹目录$ hexo generate // 生成文件$ hexo server   //本地部署/*简写如下*/$ hexo g$ hexo s</code></pre><p>可在浏览器输入地址 <code>http://host:4000</code>进行查看</p></li></ol><p><br></p><h2 id="四、配置远程环境-线上运行"><a href="#四、配置远程环境-线上运行" class="headerlink" title="四、配置远程环境,线上运行"></a>四、配置远程环境,线上运行</h2><ol><li><h5 id="github新建一个库"><a href="#github新建一个库" class="headerlink" title="github新建一个库"></a>github新建一个库</h5><pre><code>库名格式为: username.github.io //非常重要！！！</code></pre><p>你可能想了解一下<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></p></li></ol><p><br></p><ol start="2"><li><h5 id="GitHub添加SSH密钥"><a href="#GitHub添加SSH密钥" class="headerlink" title="GitHub添加SSH密钥"></a><a href="https://hotkang.cn/2018/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/">GitHub添加SSH密钥</a></h5></li></ol><p><br></p><ol start="3"><li><h5 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置_config.yml文件</h5><ul><li><p>配置统一资源定位符（个人域名）</p><pre><code>/*配置前*/# URL# If your site is put in a subdirectory, .....url: http://yoursite.com/child/*配置后*/  # URL# If your site is put in a subdirectory,......url: http://github.com</code></pre></li><li><p>配置部署</p><pre><code># Deployment# Docs: https://hexo.io/docs/deployment.html  deploy:      type: git       repo: https://github.com/hotYan/hotYan.github.io.git  //repo项是之前Github上创建好的仓库地址      branch: master</code></pre></li></ul></li></ol><p><br></p><ol start="4"><li><h5 id="线上运行"><a href="#线上运行" class="headerlink" title="线上运行"></a>线上运行</h5><pre><code>$ cd  HotYan_Blog //进入博客文件夹目录$ hexo generate // 生成文件$ hexo deploy   // 线上部署/*简写如下*/$ hexo g$ hexo d</code></pre><p>可在浏览器输入博客地址 <code>https://hotyan.github.io/</code> 进行查看</p></li></ol><p><br></p><h2 id="五、修改主题"><a href="#五、修改主题" class="headerlink" title="五、修改主题"></a>五、修改主题</h2><ol><li><h5 id="下载Next主题"><a href="#下载Next主题" class="headerlink" title="下载Next主题"></a><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">下载Next主题</a></h5></li><li><h5 id="下载后-将压缩包解压缩-复制其中名称为next的文件夹到你博客文件的themes下"><a href="#下载后-将压缩包解压缩-复制其中名称为next的文件夹到你博客文件的themes下" class="headerlink" title="下载后,将压缩包解压缩,复制其中名称为next的文件夹到你博客文件的themes下"></a>下载后,将压缩包解压缩,复制其中名称为next的文件夹到你博客文件的themes下</h5></li><li><h5 id="修改博客文件根目录下的-config-yml-将主题改为next"><a href="#修改博客文件根目录下的-config-yml-将主题改为next" class="headerlink" title="修改博客文件根目录下的_config.yml,将主题改为next"></a>修改博客文件根目录下的_config.yml,将主题改为next</h5><pre><code># Extensions# Plugins: https://hexo.io/plugins/# Themes: https://hexo.io/themes/# theme: landscape  theme: next   </code></pre></li></ol><p><br></p><h2 id="六、创建新文章"><a href="#六、创建新文章" class="headerlink" title="六、创建新文章"></a>六、创建新文章</h2><ol><li><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><pre><code>$ cd  HotYan_Blog   //进入博客文件夹目录$ hexo new &quot;用hexo搭建github博客一&quot;  // 新建一篇文章</code></pre><p>可在博客文件夹下的source/_post查看你新建的markdown文件</p></li></ol><p><br></p><ol start="2"><li><h5 id="编写内容"><a href="#编写内容" class="headerlink" title="编写内容"></a>编写内容</h5><p>如果不清楚如何编写markdown文件,你可能需要先了解一下。</p><ul><li><a href="https://github.com/younghz/Markdown" target="_blank" rel="noopener">参考链接1</a></li><li><a href="http://xianbai.me/learn-md/article/syntax/blockquotes.html" target="_blank" rel="noopener">参考链接2</a></li></ul></li></ol><p><br></p><h2 id="七、更新Hexo部署"><a href="#七、更新Hexo部署" class="headerlink" title="七、更新Hexo部署"></a>七、更新Hexo部署</h2><pre><code>$ cd  HotYan_Blog //进入博客文件夹目录$ hexo clean    // 清理缓存$ hexo generate // 生成文件$ hexo deploy   // 线上部署/*简写如下*/$ hexo clean$ hexo g$ hexo d</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建博客-完结&quot;&gt;&lt;a href=&quot;#搭建博客-完结&quot; class=&quot;headerlink&quot; title=&quot;搭建博客 [完结]&quot;&gt;&lt;/a&gt;搭建博客 &lt;span style=&quot;font-size:.5em&quot;&gt;[完结]&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;一直想搭个人博客,却无从下手？？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hotYan_博客之路" scheme="https://hotkang.cn/categories/hotYan-%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Hexo" scheme="https://hotkang.cn/tags/Hexo/"/>
    
      <category term="博客" scheme="https://hotkang.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>高性能网站建设指南14条规则</title>
    <link href="https://hotkang.cn/2018/%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%9714%E6%9D%A1%E8%A7%84%E5%88%99/"/>
    <id>https://hotkang.cn/2018/高性能网站建设指南14条规则/</id>
    <published>2018-05-29T00:54:54.000Z</published>
    <updated>2018-07-10T11:03:36.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="14条常用性能规则-待完善"><a href="#14条常用性能规则-待完善" class="headerlink" title="14条常用性能规则[待完善]"></a>14条常用性能规则<span style="font-size:.5em">[待完善]</span></h2><p><img src="/img/XN.png" alt=""></p><a id="more"></a><h1 id="高性能网站建设指南"><a href="#高性能网站建设指南" class="headerlink" title="高性能网站建设指南"></a>高性能网站建设指南</h1><p>按照优先级顺序依次介绍14个性能规则</p><p><a href="#减少http请求"><code>1. 减少HTTP请求</code></a><br><a href="#使用内容分发网络cdn"><code>2. 使用内容分发网络CDN</code></a><br><a href="#添加Expires头"><code>3. 添加Expires头</code></a><br><a href="#压缩组件"><code>4. 压缩组件</code></a><br><a href="#将样式表放在顶部"><code>5. 将样式表放在顶部</code></a><br><a href="#将脚本放在底部"><code>6. 将脚本放在底部</code></a><br><a href="#避免使用css表达式"><code>7. 避免使用CSS表达式</code></a><br><a href="#使用外部JavaScript和CSS"><code>8. 使用外部JavaScript和CSS</code></a><br><a href="#减少dns查找"><code>9. 减少DNS查找</code></a><br><a href="#精简javascript"><code>10. 精简JavaScript</code></a><br><a href="#避免重定向"><code>11. 避免重定向</code></a><br><a href="#删除重复的脚本"><code>12. 删除重复的脚本</code></a><br><a href="#配置etags"><code>13. 配置ETags</code></a><br><a href="#使ajax可缓存"><code>14. 使Ajax可缓存</code></a></p><hr><p>终端用户响应时间的80％用于前端。大部分时间都在下载页面中的所有组件：图像、样式表、脚本、Flash等。</p><h2 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h2><ul><li><p>图片地图</p><ul><li><p>假设导航栏上有五幅图片，点击每张图片都会进入一个链接，这样五张导航的图片在加载时会产生5个HTTP请求。然而，使用一个图片地图可以提高效率，这样就只需要一个HTTP请求。</p><p><img src="/img/JL.png" alt=""></p></li><li>服务器端图片地图：将所有点击提交到同一个url，同时提交用户点击的x、y坐标，服务器端根据坐标映射响应</li><li>客户端图片地图：直接将点击映射到操作</li></ul></li><li><p>CSS Sprites ：将背景图像组合成单个图像</p><ul><li><p>优点 ：</p><pre><code>1.减少HTTP请求，响应时间短  2.图片数量变少，降低下载量</code></pre></li><li><p>方法：</p><pre><code>使用  CSSbackground-image  background-position  属性显示所需的图像片段。      </code></pre></li></ul></li></ul><ul><li><p>内内联图片</p><ul><li><p>使用 data:URL 模式，允许将小块数据内联为“立即数”，数据就在URL自身中。</p><pre><code>格式：data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></pre><ul><li>合并脚本和样式表</li></ul></li><li>通过将所有脚本合并为一个脚本来减少HTTP请求数量的方法，同样也可以将所有CSS合并到一个样式表中，能够缩短响应时间。</li></ul></li></ul><h3 id="使用内容分发网络CDN"><a href="#使用内容分发网络CDN" class="headerlink" title="使用内容分发网络CDN"></a>使用内容分发网络CDN</h3><ul><li>用户与Web服务器的距离对响应时间有影响。在多个地理位置分散的服务器上部署您的内容将使您的网页从用户的角度更快加载。但是你应该从哪里开始？</li></ul><p>作为实现地理上分散的内容的第一步，不要尝试重新设计您的Web应用程序以在分布式架构中工作。根据应用程序的不同，更改体系结构可能包括艰巨的任务，例如同步会话状态和跨服务器位置复制数据库事务。尝试缩短用户与内容之间的距离可能会延迟或不能通过此应用程序体系结构步骤。</p><p>请记住，80-90％的最终用户响应时间用于下载页面中的所有组件：图像，样式表，脚本，Flash等。这是性能黄金法则。</p><p>不要从重新设计应用程序体系结构的艰巨任务开始，最好先分散您的静态内容。这不仅实现了响应时间的更大缩短，而且由于内容交付网络，这更容易实现。</p><p><code>内容传送网络（CDN）</code>是分布在多个位置的网络服务器的集合，以更高效地向用户传送内容。选择用于将内容递送给特定用户的服务器通常基于网络邻近度的度量。例如，选择网络跳数最少的服务器或响应时间最快的服务器。</p><p>一些大型互联网公司拥有自己的CDN，但使用CDN服务提供商（如Akamai Technologies，EdgeCast或level3）具有成本效益。对于创业公司和私人网站来说，CDN服务的成本可能会很高，但随着您的目标受众不断扩大并变得更加全球化，CDN是实现快速响应所必需的。</p><h3 id="添加Expires头"><a href="#添加Expires头" class="headerlink" title="添加Expires头"></a>添加Expires头</h3><p>这条规则有两个方面：</p><ul><li>对于静态组件：通过设置远期<code>Expires</code>标题实现“永不过期”策略</li><li>对于动态组件：使用适当的<code>Cache-Control</code>头文件来帮助浏览器提供有条件的请求</li></ul><p>网页设计越来越丰富，这意味着更多的脚本，样式表，图像和Flash在页面中。</p><p>首次访问您的页面可能需要发出多个HTTP请求，但通过使用Expires标头，可以使这些组件可缓存。这避免了后续页面浏览中不必要的HTTP请求。</p><p>过期标头最常用于图像，但它们应该用于所有组件，包括脚本，样式表和Flash组件。</p><p>浏览器（和代理）使用缓存来减少HTTP请求的数量和大小，使网页加载速度更快。<br>Web服务器使用HTTP响应中的Expires标头告诉客户端可以缓存组件的时间。</p><p>请记住，如果您使用远期未来的Expires头文件，则只要组件更改，就必须更改组件的文件名。</p><p>只有在用户已经访问过您的网站后，使用远期未来的Expires标题才会影响页面浏览。</p><p>当用户第一次访问您的网站并且浏览器的缓存为空时，它对HTTP请求的数量没有影响。</p><p>因此，这种性能改进的影响取决于用户多久访问一次带有缓冲区的页面。（一个“准备好的缓存”已经包含了页面中的所有组件。）我们在Yahoo!上测试了这一点。并发现带有引导缓存的页面浏览量为75-85％。通过使用远期未来的Expires标题，您可以增加浏览器缓存的组件数量，并在后续页面浏览中重新使用，而无需在用户的Internet连接上发送单个字节。</p><h3 id="Gzip压缩传输文件"><a href="#Gzip压缩传输文件" class="headerlink" title="Gzip压缩传输文件"></a>Gzip压缩传输文件</h3><p>通过网络传输HTTP请求和响应所需的时间可以通过前端工程师做出的决策大大减少。</p><p>确实，最终用户的带宽速度，互联网服务提供商，邻近对等交换点等是超出了开发团队的控制范围。</p><p>但还有其他一些影响响应时间的因素。</p><p>压缩通过减少HTTP响应的大小来缩短响应时间。</p><p>从HTTP / 1.1开始，Web客户端通过HTTP请求中的Accept-Encoding标头指示对压缩的支持。</p><pre><code>Accept-Encoding：gzip，deflate</code></pre><p>如果Web服务器在请求中看到该头部，则可能使用客户端列出的方法之一压缩响应。</p><p>Web服务器通过响应中的Content-Encoding标头通知Web客户端。</p><pre><code>内容编码：gzip</code></pre><blockquote><p>Gzip是目前最流行和最有效的压缩方法。它由GNU项目开发并由RFC 1952标准化。您可能会看到的唯一的其他压缩格式是压缩，但效果不太好，不太受欢迎。Gzipping通常将响应大小减少约70％。目前大约90％的互联网流量都通过声称支持gzip的浏览器。</p></blockquote><blockquote><p>浏览器和代理存在已知的问题，这些问题可能会导致浏览器期望的不匹配和接收到的有关压缩内容的不匹配。幸运的是，随着旧版浏览器的使用下降，这些边缘案例正在减少。Apache模块通过自动添加适当的Vary响应头来提供帮助。</p></blockquote><p>服务器根据文件类型选择要压缩的内容，但在决定压缩的内容时通常太有限。</p><p>大多数网站gzip他们的HTML文件。gzip脚本和样式表也是值得的，但很多网站都错过了这个机会。事实上，压缩包括XML和JSON的任何文本响应都是值得的。</p><p>图像和PDF文件不应该被压缩，因为它们已经被压缩。试图压缩它们不仅浪费CPU，而且可能会增加文件大小。</p><p>尽可能多地缩放文件类型是减少页面重量和加速用户体验的简单方法。</p><h3 id="将样式表放在顶部"><a href="#将样式表放在顶部" class="headerlink" title="将样式表放在顶部"></a>将样式表放在顶部</h3><p>将样式表移动到文档HEAD中,页面显示加载速度更快。这是因为将样式表放在HEAD中允许页面逐步呈现。这改善了整体用户体验。</p><p>将样式表放在文档底部附近的问题:它禁止在许多浏览器（包括Internet Explorer）中进行渐进式呈现。这些浏览器会阻止渲染，以避免在样式更改时重新绘制页面元素。用户停留在查看空白页面。</p><p>没有任何替代方案，空白屏幕或无风格内容的闪光都值得冒这个风险。最佳解决方案是遵循HTML规范，并将样式表加载到文档HEAD中。</p><h3 id="将脚本放在底部"><a href="#将脚本放在底部" class="headerlink" title="将脚本放在底部"></a>将脚本放在底部</h3><p>脚本导致的问题是它们会阻止并行下载。</p><p>在HTTP / 1.1规范建议的浏览器下载不超过两种组分在每主机名平行。如果您从多个主机名提供图像，则可以同时发生两个以上的下载。然而，当脚本正在下载时，浏览器将不会启动任何其他下载，即使是在不同的主机名上。</p><p>在某些情况下，将脚本移动到底部并不容易。例如，如果脚本用于document.write插入页面内容的一部分，则不能在页面中移动较小的内容。也可能存在范围问题。在很多情况下，有办法解决这些情况。</p><p>经常出现的另一个建议是使用延迟脚本。<br>该DEFER属性指示该脚本不包含document.write，并且是浏览器可以继续呈现的线索。不幸的是，Firefox不支持该DEFER属性。在Internet Explorer中，该脚本可能会延迟，但不如预期的那么多。如果脚本可以被延期，它也可以被移动到页面的底部。这会让你的网页加载速度更快。</p><h3 id="避免使用CSS表达式"><a href="#避免使用CSS表达式" class="headerlink" title="避免使用CSS表达式"></a>避免使用CSS表达式</h3><p>CSS表达式是动态设置CSS属性的强大（也是危险的）方法。<br>从版本5开始，它们在Internet Explorer中受支持，但从IE8开始已弃用。</p><p>表达式的问题在于它们比大多数人期望的更频繁地进行评估。</p><p>减少CSS表达式评估次数的一种方法是使用一次性表达式，第一次评估表达式时，它将style属性设置为一个显式值，该值将替换CSS表达式。</p><p>如果样式属性必须在页面的整个生命周期中动态设置，则使用事件处理程序而不是CSS表达式是一种替代方法。</p><p>如果您必须使用CSS表达式，请记住它们可能会被评估数千次，并且可能会影响页面的性能。</p><h3 id="使用外部JavaScript和CSS"><a href="#使用外部JavaScript和CSS" class="headerlink" title="使用外部JavaScript和CSS"></a>使用外部JavaScript和CSS</h3><p>许多这些性能规则涉及如何管理外部组件。但是，在出现这些问题之前，您应该提出一个更基本的问题：JavaScript和CSS应该包含在外部文件中还是包含在页面本身中？</p><p>在现实世界中<code>使用外部文件通常会产生更快的页面</code>，因为浏览器会缓存JavaScript和CSS文件。</p><ul><li>内联的JavaScript和CSS: 减少HTTP请求数量，增加了HTML文档的大小。</li><li>JavaScript和CSS位于浏览器缓存的外部文件中：HTML文档的大小会减少，不会增加HTTP请求的数量。</li></ul><blockquote><p>关键因素是外部JavaScript和CSS组件相对于所请求HTML文档数量的缓存频率。这个因素尽管难以量化，但可以使用各种指标进行衡量。如果您的网站上的用户每个会话有多个页面浏览量，并且许多网页重复使用相同的脚本和样式表，则缓存的外部文件可能带来更大的潜在收益。</p></blockquote><p>许多网站都处于这些指标的中间。对于这些网站，最好的解决方案通常是将JavaScript和CSS作为外部文件进行部署。首选内联的唯一例外是主页，例如雅虎的首页和My Yahoo! 。每个会话只有很少（可能只有一个）页面视图的主页可能会发现内嵌JavaScript和CSS可以缩短最终用户的响应时间。</p><p>对于通常是许多页面视图中的第一个的首页，有一些技术可以利用内联提供的HTTP请求的减少以及通过使用外部文件实现的缓存优点。其中一种方法是在首页内嵌JavaScript和CSS，但在页面加载完成后动态下载外部文件。后续页面将引用应该已经在浏览器缓存中的外部文件。</p><h3 id="减少DNS查找"><a href="#减少DNS查找" class="headerlink" title="减少DNS查找"></a>减少DNS查找</h3><p><code>域名系统（DNS）</code>将主机名映射到IP地址，就像电话本将人名映射到他们的电话号码一样。<br>当您在浏览器中输入<a href="http://www.yahoo.com时，浏览器联系的DNS解析器会返回该服务器的IP地址。" target="_blank" rel="noopener">www.yahoo.com时，浏览器联系的DNS解析器会返回该服务器的IP地址。</a><br>DNS有成本。DNS通常需要20-120毫秒才能查找给定主机名的IP地址。直到DNS查找完成后，浏览器才能从此主机名下载任何内容。</p><p>DNS查找缓存以获得更好的性能。这种高速缓存可以发生在用户的ISP或局域网维护的特殊高速缓存服务器上，但也可以在个人用户的计算机上进行高速缓存。DNS信息保留在操作系统的DNS缓存中（Microsoft Windows上的“DNS客户端服务”）。大多数浏览器都有自己的缓存，与操作系统的缓存分开。只要浏览器在自己的缓存中保存了一条DNS记录，它就不会打扰操作系统请求记录。</p><p>按照DnsCacheTimeout注册表设置的指定，Internet Explorer默认缓存DNS查找30分钟 。Firefox缓存DNS查找1分钟，由network.dnsCacheExpiration配置设置控制。（Fasterfox将此更改为1小时。）</p><p>当客户端的DNS缓存为空（对于浏览器和操作系统）时，DNS查找的数量等于网页中唯一主机名的数量。这包括页面URL，图像，脚本文件，样式表，Flash对象等中使用的主机名。减少唯一主机名的数量可减少DNS查找的数量。</p><p>减少唯一主机名的数量有可能减少页面中发生的并行下载量。避免DNS查找会缩短响应时间，但减少并行下载可能会增加响应时间。我的准则是将这些组件分成至少两个但不超过四个主机名。这在减少DNS查找和允许高度并行下载之间取得了很好的折衷。</p><h3 id="精简JavaScript"><a href="#精简JavaScript" class="headerlink" title="精简JavaScript"></a>精简JavaScript</h3><ul><li>在JavaScript的情况下，由于下载文件的大小减小，这提高了响应时间性能。</li><li>从代码中移除不必要的字符以减少其大小，减少加载时间。</li><li><p>减少JavaScript 文件大小的有几种手段:</p><ul><li><p>精简:去除JavaScript代码中的空格、注释等多余的字符，这种方式基本上没有什么缺点。</p></li><li><p>混淆:在精简的基础上，把函数、变量名都用较短小的字符来替换，从而达到减少文件大小的效果。</p></li><li>但是混淆会产生不少麻烦，很有可能会引入错误，虽然有利于防止逆向工程，当同时也增加了自己在线上环境调试的难度。</li><li>现在普遍的做法是发布前利用 Gulp、Grunt等自动化构建工具对资源进行压缩。</li></ul></li></ul><h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>重定向是使用301和302状态码完成的。</p><p>浏览器会自动将用户转到该Location字段中指定的URL 。重定向所需的所有信息都在标题中,响应的主体通常是空的。</p><p>尽管名称不同，301和302响应在实践中都不会被缓存，除非额外的标头（例如Expires或Cache-Control）指示它应该是。</p><p>元刷新标记和JavaScript是将用户引导到不同URL的其他方式，但是如果您必须执行重定向，首选方法是使用标准的3xx HTTP状态代码，主要是为了确保后退按钮正常工作。</p><p>要记住的重点是<code>重定向会减慢用户体验</code>。在用户和HTML文档之间插入重定向会延迟页面中的所有内容，因为可以呈现页面中的任何内容，并且在HTML文档到达之前不会开始下载任何组件。</p><p>将旧网站连接到新网站是重定向的另一个常见用途。</p><p>其他包括连接网站的不同部分，并根据特定条件（浏览器类型，用户帐户类型等）指导用户。</p><p>使用重定向来连接两个网站很简单，只需要很少的附加编码。虽然在这些情况下使用重定向会降低开发人员的复杂性，但会降低用户体验。</p><p>这种重定向的替代方案包括使用Alias和mod_rewrite如果两个代码路径托管在同一台服务器上。</p><p>如果域名更改是使用重定向的原因，另一种方法是创建一个CNAME（一个DNS记录，用于创建一个别名从一个域名指向另一个域名）与Alias或mod_rewrite。</p><h3 id="删除重复的脚本"><a href="#删除重复的脚本" class="headerlink" title="删除重复的脚本"></a>删除重复的脚本</h3><p>在一个页面中包含两次相同的JavaScript文件会使性能受损。</p><p>当它发生时，通过创建不必要的HTTP请求和浪费JavaScript执行，重复脚本会损害性能。</p><p>不必要的HTTP请求发生在Internet Explorer中，但不在Firefox中。</p><p>在Internet Explorer中，如果外部脚本包含两次并且不可缓存，则会在加载页面期间生成两个HTTP请求。如果脚本可缓存，当用户重新加载页面时也会发生额外的HTTP请求。</p><p>除了生成浪费的HTTP请求之外，还会浪费多次时间评估脚本。无论脚本是否可缓存，此冗余JavaScript执行都会在Firefox和Internet Explorer中发生。</p><h3 id="配置ETags"><a href="#配置ETags" class="headerlink" title="配置ETags"></a>配置ETags</h3><p>实体标签（ETags）是Web服务器和浏览器用来确定浏览器缓存中的组件是否与源服务器上的组件匹配的机制。（一个“实体”是另一个词“组件”：图像，脚本，样式表等）</p><p>ETag被添加来提供一种机制来验证比上一次修改日期更灵活的实体。</p><p>ETag是唯一标识组件特定版本的字符串。唯一的格式约束是字符串被引用。原始服务器使用ETag响应头指定组件的ETag 。</p><pre><code>HTTP / 1.1 200 OKLast-Modified：Tue，2006年12月12日03:03:59 GMTETag：“10c24bc-4ab-457e1c1f”内容长度：12195</code></pre><p>之后，如果浏览器必须验证组件，它将使用If-None-Match标头将ETag传递回原始服务器。如果ETags匹配，则返回一个304状态码，在此示例中将响应减少12195字节。</p><pre><code>GET /i/yahoo.gif HTTP / 1.1主持人：us.yimg.comIf-Modified-Since：星期二，2006年12月12日03:03:59 GMTIf-None-Match：“10c24bc-4ab-457e1c1f”HTTP / 1.1 304未修改</code></pre><p>ETags的问题在于，它们通常使用属性来构建，这些属性使它们对托管站点的特定服务器是唯一的。</p><p>当浏览器从一台服务器获取原始组件并稍后尝试在另一台服务器上验证该组件时，ETags将不匹配，这种情况在使用服务器集群处理请求的网站上非常常见。</p><p>虽然给定的文件可能位于多个服务器的相同目录中，并且具有相同的文件大小，权限，时间戳等，但其inode不同于一台服务器。</p><p>IIS 5.0和6.0与ETags有类似的问题。IIS上ETags的格式是Filetimestamp:ChangeNumber。A ChangeNumber是用于跟踪IIS配置更改的计数器。ChangeNumber在网站后面的所有IIS服务器上都不可能是相同的。</p><p>最终结果是由Apache和IIS生成的ETags完全相同的组件不会从一台服务器到另一台服务器进行匹配。如果ETags不匹配，用户不会收到ETags设计的小而快的304响应; 相反，他们会得到一个正常的200响应以及组件的所有数据。</p><p>如果您只在一台服务器上托管您的网站，这不是问题。但是，如果您有多台服务器托管您的网站，并且您使用的是默认的ETag配置的Apache或IIS，那么您的用户的页面速度会变慢，您的服务器的负载会更高，消耗的带宽也会更大，高效地缓存您的内容。即使你的组件有一个遥远的将来Expires头，当用户点击重新加载或刷新时，仍然会发出条件GET请求。</p><p>如果您没有充分利用ETags提供的灵活验证模型，最好完全删除ETag。</p><p>该Last-Modified头验证基于对组件的时间戳。</p><p>删除ETag可以减少响应和后续请求中HTTP头的大小。</p><h3 id="使Ajax可缓存"><a href="#使Ajax可缓存" class="headerlink" title="使Ajax可缓存"></a>使Ajax可缓存</h3><p>Ajax引用的好处之一是，它向用户提供即时反馈，因为它从后端Web服务器异步请求信息。但是，使用Ajax并不能保证用户不会在等待这些异步JavaScript和XML响应返回时扭动拇指。</p><p>在许多应用程序中，用户是否在等待取决于如何使用Ajax。例如，在基于Web的电子邮件客户端中，用户将不断等待Ajax请求的结果，以查找与其搜索条件匹配的所有电子邮件。记住“异步”并不意味着“即时”。</p><p>为了提高性能，优化这些Ajax响应非常重要。</p><p>提高Ajax性能的最重要方法是使响应可缓存，如<code>添加过期或缓存控制头</code>中所述。</p><ul><li>其他一些规则也适用于Ajax：<br>Gzip组件<br>减少DNS查找<br>缩小JavaScript<br>避免重定向<br>配置ETags</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;14条常用性能规则-待完善&quot;&gt;&lt;a href=&quot;#14条常用性能规则-待完善&quot; class=&quot;headerlink&quot; title=&quot;14条常用性能规则[待完善]&quot;&gt;&lt;/a&gt;14条常用性能规则&lt;span style=&quot;font-size:.5em&quot;&gt;[待完善]&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/XN.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="换个角度看性能优化" scheme="https://hotkang.cn/categories/%E6%8D%A2%E4%B8%AA%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="https://hotkang.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>7类35条网页性能优化</title>
    <link href="https://hotkang.cn/2018/7%E7%B1%BB35%E6%9D%A1%E7%BD%91%E9%A1%B5%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://hotkang.cn/2018/7类35条网页性能优化/</id>
    <published>2018-05-29T00:52:55.000Z</published>
    <updated>2018-07-19T15:42:13.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小结于"><a href="#小结于" class="headerlink" title="小结于"></a>小结于</h2><blockquote><p><a href="https://developer.yahoo.com/performance/rules.html?guccounter=1#menu" target="_blank" rel="noopener">参考链接</a></p></blockquote><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="一、内容"><a href="#一、内容" class="headerlink" title="一、内容"></a><a href="#内容">一、内容</a></h3><p><a href="#减少http请求次数"><code>1. 减少HTTP请求次数</code></a><br><a href="#减少dns查询次数"><code>2. 减少DNS查询次数</code></a><br><a href="#避免重定向"><code>3. 避免重定向</code></a><br><a href="#使ajax可缓存"><code>4. 使Ajax可缓存</code></a><br><a href="#延迟加载组件"><code>5. 延迟加载组件</code></a><br><a href="#预加载组件"><code>6. 预加载组件</code></a><br><a href="#减少dom元素的数量"><code>7. 减少DOM元素的数量</code></a><br><a href="#拆分组件跨域"><code>8. 拆分组件跨域</code></a><br><a href="#尽量减少iframe的数量"><code>9. 尽量减少iframe的数量</code></a><br><a href="#避免404"><code>10. 避免404</code></a></p><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a><a href="#css">二、CSS</a></h3><p><a href="#将样式表放置在顶部"><code>11. 将样式表放置在顶部</code></a><br><a href="#避免使用css表达式"><code>12. 避免使用CSS表达式</code></a><br><a href="#用link替代import"><code>13. 用&lt;link&gt;替代@import</code></a><br><a href="#避免过滤器filters"><code>14. 避免过滤器Filters</code></a></p><h3 id="三、JavaScript"><a href="#三、JavaScript" class="headerlink" title="三、JavaScript"></a><a href="#javascript">三、JavaScript</a></h3><p><a href="#将脚本放在底部"><code>15. 将脚本放在底部</code></a><br><a href="#使javascript和css在外部"><code>16. 使JavaScript和CSS在外部</code></a><br><a href="#精简javascript和css"><code>17. 精简JavaScript和CSS</code></a><br><a href="#删除重复的脚本"><code>18. 删除重复的脚本</code></a><br><a href="#最小化dom访问"><code>19. 最小化DOM访问</code></a><br><a href="#开发智能事件处理程序"><code>20. 开发智能事件处理程序</code></a></p><h3 id="四、图片"><a href="#四、图片" class="headerlink" title="四、图片"></a><a href="#图片">四、图片</a></h3><p><a href="#优化图像"><code>21. 优化图像</code></a><br><a href="#优化css精灵"><code>22. 优化CSS精灵</code></a><br><a href="#不要在html中缩放图像"><code>23. 不要在HTML中缩放图像</code></a><br><a href="#制作faviconicosmall和cacheable"><code>24. 制作favicon.ico Small和Cacheable</code></a></p><h3 id="五、Cookie"><a href="#五、Cookie" class="headerlink" title="五、Cookie"></a><a href="#cookie">五、Cookie</a></h3><p><a href="#减小cookie大小"><code>25. 减小Cookie大小</code></a><br><a href="#页面内容使用无cookie域"><code>26. 页面内容使用无Cookie域</code></a></p><h3 id="六、服务器"><a href="#六、服务器" class="headerlink" title="六、服务器"></a><a href="#服务器">六、服务器</a></h3><p><a href="#使用内容分发网络cdn"><code>27. 使用内容分发网络CDN</code></a><br><a href="#添加expires或cache-control标题"><code>28. 添加Expires或Cache-Control标题</code></a><br><a href="#gzip压缩传输文件"><code>29. Gzip压缩传输文件</code></a><br><a href="#配置etags"><code>30. 配置ETags</code></a><br><a href="#尽早flush输出"><code>31. 尽早flush输出</code></a><br><a href="#使用get获取ajax请求"><code>32. 使用GET获取AJAX请求</code></a><br><a href="#避免空图像src"><code>33. 避免空图像src</code></a></p><h3 id="七、手机"><a href="#七、手机" class="headerlink" title="七、手机"></a><a href="#手机">七、手机</a></h3><p><a href="#保持组件低于25k"><code>34. 保持组件低于25K</code></a><br><a href="#将组件打包成多部分文档"><code>35. 将组件打包成多部分文档</code></a></p><hr><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="减少HTTP请求次数"><a href="#减少HTTP请求次数" class="headerlink" title="减少HTTP请求次数"></a>减少HTTP请求次数</h3><p>终端用户响应时间的80％用于前端。大部分时间都在下载页面中的所有组件：图像、样式表、脚本、Flash等。<br>减少组件数量又会减少呈现页面所需的HTTP请求数量。这是更快页面的关键。</p><p>减少页面中组件数量的一种方法是简化页面的设计。但是，有没有办法构建更丰富的内容，同时实现快速响应时间？</p><p>以下是一些减少HTTP请求数量的技术，同时还支持丰富的页面设计。</p><ul><li><p><code>组合文件</code>是一种通过将所有脚本合并为一个脚本来减少HTTP请求数量的方法，同样也可以将所有CSS合并到一个样式表中。当脚本和样式表因页面而异时，将文件组合起来更具挑战性，但使发布过程的这一部分能够缩短响应时间。</p></li><li><p><code>CSS Sprites</code>是减少图片请求数量的首选方法。将背景图像组合成单个图像，并使用CSSbackground-image和background-position属性显示所需的图像片段。</p></li><li><p><code>图像映射</code>将多个图像组合成单个图像。整体大小大致相同，但减少HTTP请求的数量会加快页面的速度。仅当图像在页面中连续存在时（例如导航栏），图像映射才起作用。定义图像映射的坐标可能很乏味且容易出错。使用图像地图进行导航也无法访问，因此不推荐。</p></li><li><p><code>内联图像</code>使用data:URL方案将图像数据嵌入到实际页面中。这可以增加HTML文档的大小。将内嵌图像合并到缓存的样式表中是减少HTTP请求并避免增加页面大小的一种方法。所有主流浏览器都不支持内嵌图像。</p></li></ul><p>减少页面中的HTTP请求数量是开始的地方。这是提高初次访问者性能的最重要指导方针。</p><h3 id="减少DNS查询次数"><a href="#减少DNS查询次数" class="headerlink" title="减少DNS查询次数"></a>减少DNS查询次数</h3><p><code>域名系统（DNS）</code>将主机名映射到IP地址，就像电话本将人名映射到他们的电话号码一样。<br>当您在浏览器中输入<a href="http://www.yahoo.com时，浏览器联系的DNS解析器会返回该服务器的IP地址。" target="_blank" rel="noopener">www.yahoo.com时，浏览器联系的DNS解析器会返回该服务器的IP地址。</a><br>DNS有成本。DNS通常需要20-120毫秒才能查找给定主机名的IP地址。直到DNS查找完成后，浏览器才能从此主机名下载任何内容。</p><p>DNS查找缓存以获得更好的性能。这种高速缓存可以发生在用户的ISP或局域网维护的特殊高速缓存服务器上，但也可以在个人用户的计算机上进行高速缓存。DNS信息保留在操作系统的DNS缓存中（Microsoft Windows上的“DNS客户端服务”）。大多数浏览器都有自己的缓存，与操作系统的缓存分开。只要浏览器在自己的缓存中保存了一条DNS记录，它就不会打扰操作系统请求记录。</p><p>按照DnsCacheTimeout注册表设置的指定，Internet Explorer默认缓存DNS查找30分钟 。Firefox缓存DNS查找1分钟，由network.dnsCacheExpiration配置设置控制。（Fasterfox将此更改为1小时。）</p><p>当客户端的DNS缓存为空（对于浏览器和操作系统）时，DNS查找的数量等于网页中唯一主机名的数量。这包括页面URL，图像，脚本文件，样式表，Flash对象等中使用的主机名。减少唯一主机名的数量可减少DNS查找的数量。</p><p>减少唯一主机名的数量有可能减少页面中发生的并行下载量。避免DNS查找会缩短响应时间，但减少并行下载可能会增加响应时间。我的准则是将这些组件分成至少两个但不超过四个主机名。这在减少DNS查找和允许高度并行下载之间取得了很好的折衷。</p><h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>重定向是使用301和302状态码完成的。</p><p>浏览器会自动将用户转到该Location字段中指定的URL 。重定向所需的所有信息都在标题中,响应的主体通常是空的。</p><p>尽管名称不同，301和302响应在实践中都不会被缓存，除非额外的标头（例如Expires或Cache-Control）指示它应该是。</p><p>元刷新标记和JavaScript是将用户引导到不同URL的其他方式，但是如果您必须执行重定向，首选方法是使用标准的3xx HTTP状态代码，主要是为了确保后退按钮正常工作。</p><p>要记住的重点是<code>重定向会减慢用户体验</code>。在用户和HTML文档之间插入重定向会延迟页面中的所有内容，因为可以呈现页面中的任何内容，并且在HTML文档到达之前不会开始下载任何组件。</p><p>将旧网站连接到新网站是重定向的另一个常见用途。</p><p>其他包括连接网站的不同部分，并根据特定条件（浏览器类型，用户帐户类型等）指导用户。</p><p>使用重定向来连接两个网站很简单，只需要很少的附加编码。虽然在这些情况下使用重定向会降低开发人员的复杂性，但会降低用户体验。</p><p>这种重定向的替代方案包括使用Alias和mod_rewrite如果两个代码路径托管在同一台服务器上。</p><p>如果域名更改是使用重定向的原因，另一种方法是创建一个CNAME（一个DNS记录，用于创建一个别名从一个域名指向另一个域名）与Alias或mod_rewrite。</p><h3 id="使Ajax可缓存"><a href="#使Ajax可缓存" class="headerlink" title="使Ajax可缓存"></a>使Ajax可缓存</h3><p>Ajax引用的好处之一是，它向用户提供即时反馈，因为它从后端Web服务器异步请求信息。但是，使用Ajax并不能保证用户不会在等待这些异步JavaScript和XML响应返回时扭动拇指。</p><p>在许多应用程序中，用户是否在等待取决于如何使用Ajax。例如，在基于Web的电子邮件客户端中，用户将不断等待Ajax请求的结果，以查找与其搜索条件匹配的所有电子邮件。记住“异步”并不意味着“即时”。</p><p>为了提高性能，优化这些Ajax响应非常重要。</p><p>提高Ajax性能的最重要方法是使响应可缓存，如<code>添加过期或缓存控制头</code>中所述。</p><ul><li>其他一些规则也适用于Ajax：<br>Gzip组件<br>减少DNS查找<br>缩小JavaScript<br>避免重定向<br>配置ETags</li></ul><h3 id="延迟加载组件"><a href="#延迟加载组件" class="headerlink" title="延迟加载组件"></a>延迟加载组件</h3><p>你可以仔细看看你的页面，并问自己：“为了最初呈现页面，绝对需要什么？”。其余的内容和组件可以等待。</p><p>JavaScript是在onload事件之前和之后进行分割的理想人选。</p><p>例如，如果您有JavaScript代码和用于拖放和动画的库，则可以等待，因为在初始渲染之后拖动页面上的元素。其他要查找候选人进行后加载的地方包括隐藏内容（用户操作后显示的内容）和低于该对象的图像。</p><p>性能目标与其他Web开发最佳实践保持一致是很好的。在这种情况下，逐步增强的想法告诉我们，JavaScript在受支持的情况下可以改善用户体验，但是即使没有JavaScript，您也必须确保页面能够正常工作。</p><p>因此，在确保页面正常工作后，您可以使用一些后期加载的脚本来增强它，从而为您提供更多的细节和哨音，例如拖放和动画。</p><h3 id="预加载组件"><a href="#预加载组件" class="headerlink" title="预加载组件"></a>预加载组件</h3><p>预加载看起来可能与后加载相反，但它实际上有一个不同的目标。通过预加载组件，您可以利用浏览器闲置的时间以及将来需要的组件（如图像，样式和脚本）。通过这种方式，当用户访问下一页时，您可以将大部分组件都存储在缓存中，并且您的页面将为用户加载得更快。</p><p>实际上有几种类型的预加载：</p><ul><li><p>无条件预加载:只要onload激活，您就可以继续并获取一些额外的组件。</p></li><li><p>有条件预加载:根据用户操作，您可以根据用户的行为猜测下一个用户前进的位置并相应地进行预加载。</p></li><li>预期的预加载:在启动重新设计之前提前预加载。它经常发生在重新设计之后，您会听到：“新网站很酷，但速度比以前慢”。部分问题可能在于用户使用完全缓存访问旧网站，但新网站总是空的缓存体验。您甚至可以在启动重新设计之前通过预加载某些组件来减轻这种副作用。您的旧网站可以使用浏览器闲置的时间，并请求将由新网站使用的图像和脚本</li></ul><h3 id="减少DOM元素的数量"><a href="#减少DOM元素的数量" class="headerlink" title="减少DOM元素的数量"></a>减少DOM元素的数量</h3><p>复杂的页面意味着需要下载更多的字节，这也意味着JavaScript中的DOM访问速度较慢。例如，当您想要添加事件处理程序时，如果在页面上循环遍历500或5000个DOM元素，则会有所不同。</p><p>大量的DOM元素可能是一种症状，应该通过页面的标记来改善某些内容，而不必删除内容。</p><p>DOM元素的数量很容易测试，只需输入Firebug的控制台：<br>document.getElementsByTagName(‘*’).length</p><h3 id="拆分组件跨域"><a href="#拆分组件跨域" class="headerlink" title="拆分组件跨域"></a>拆分组件跨域</h3><p>拆分组件可让您最大限度地平行下载。由于DNS查找惩罚，请确保您使用的域不超过2-4个。</p><h3 id="尽量减少iframe的数量"><a href="#尽量减少iframe的数量" class="headerlink" title="尽量减少iframe的数量"></a>尽量减少iframe的数量</h3><p>Iframe允许将HTML文档插入到父文档中。了解iframe如何工作以便可以有效使用非常重要。</p><ul><li><p><code>&lt;iframe&gt;</code>优点：</p><ul><li>像徽章和广告等缓慢的第三方内容</li><li>安全沙箱</li><li>并行下载脚本</li></ul></li><li><p><code>&lt;iframe&gt;</code>缺点：</p><ul><li>即使空白也很昂贵</li><li>阻止页面载入</li><li>非语义</li></ul></li></ul><h3 id="避免404"><a href="#避免404" class="headerlink" title="避免404"></a>避免404</h3><p>HTTP请求很昂贵，因此提出HTTP请求并获得无用的响应（即404 Not Found）是完全没有必要的，并且会减慢用户体验而没有任何好处。</p><p>有些网站有帮助的404s“你的意思是X？”，这对用户体验很好，但也浪费了服务器资源（如数据库等）。特别糟糕的是，当到外部JavaScript的链接错误并且结果是404时。首先，此下载将阻止并行下载。接下来，浏览器可能会尝试解析404响应正文，就好像它是JavaScript代码一样，试图找到可用的东西。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="将样式表放置在顶部"><a href="#将样式表放置在顶部" class="headerlink" title="将样式表放置在顶部"></a>将样式表放置在顶部</h3><p>将样式表移动到文档HEAD中,页面显示加载速度更快。这是因为将样式表放在HEAD中允许页面逐步呈现。这改善了整体用户体验。</p><p>将样式表放在文档底部附近的问题:它禁止在许多浏览器（包括Internet Explorer）中进行渐进式呈现。这些浏览器会阻止渲染，以避免在样式更改时重新绘制页面元素。用户停留在查看空白页面。</p><p>没有任何替代方案，空白屏幕或无风格内容的闪光都值得冒这个风险。最佳解决方案是遵循HTML规范，并将样式表加载到文档HEAD中。</p><h3 id="避免使用CSS表达式"><a href="#避免使用CSS表达式" class="headerlink" title="避免使用CSS表达式"></a>避免使用CSS表达式</h3><p>CSS表达式是动态设置CSS属性的强大（也是危险的）方法。<br>从版本5开始，它们在Internet Explorer中受支持，但从IE8开始已弃用。</p><p>表达式的问题在于它们比大多数人期望的更频繁地进行评估。</p><p>减少CSS表达式评估次数的一种方法是使用一次性表达式，第一次评估表达式时，它将style属性设置为一个显式值，该值将替换CSS表达式。</p><p>如果样式属性必须在页面的整个生命周期中动态设置，则使用事件处理程序而不是CSS表达式是一种替代方法。</p><p>如果您必须使用CSS表达式，请记住它们可能会被评估数千次，并且可能会影响页面的性能。</p><h3 id="用-lt-link-gt-替代-import"><a href="#用-lt-link-gt-替代-import" class="headerlink" title="用&lt;link&gt;替代@import"></a>用<code>&lt;link&gt;</code>替代@import</h3><p>以前的最佳实践之一指出，为了允许渐进式渲染，CSS应该处于顶端。</p><p>在IE中的@import行为与<link>在页面底部使用的行为相同，因此最好不要使用它。</p><h3 id="避免过滤器Filters"><a href="#避免过滤器Filters" class="headerlink" title="避免过滤器Filters"></a>避免过滤器Filters</h3><p>IE专有AlphaImageLoader过滤器旨在解决IE版本&lt;7中的半透明真彩色PNG问题。该过滤器的问题在于，它会在图像下载时阻止渲染并冻结浏览器。它也增加了内存消耗，并且每个元素应用，而不是每个图像，因此问题倍增。</p><p>最好的方法是AlphaImageLoader完全避免使用PNG8而不是降级，这在IE中是很好的。如果您绝对需要AlphaImageLoader，请使用下划线黑客_filter来惩罚您的IE7 +用户。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="将脚本放在底部"><a href="#将脚本放在底部" class="headerlink" title="将脚本放在底部"></a>将脚本放在底部</h3><p>脚本导致的问题是它们会阻止并行下载。</p><p>在HTTP / 1.1规范建议的浏览器下载不超过两种组分在每主机名平行。如果您从多个主机名提供图像，则可以同时发生两个以上的下载。然而，当脚本正在下载时，浏览器将不会启动任何其他下载，即使是在不同的主机名上。</p><p>在某些情况下，将脚本移动到底部并不容易。例如，如果脚本用于document.write插入页面内容的一部分，则不能在页面中移动较小的内容。也可能存在范围问题。在很多情况下，有办法解决这些情况。</p><p>经常出现的另一个建议是使用延迟脚本。<br>该DEFER属性指示该脚本不包含document.write，并且是浏览器可以继续呈现的线索。不幸的是，Firefox不支持该DEFER属性。在Internet Explorer中，该脚本可能会延迟，但不如预期的那么多。如果脚本可以被延期，它也可以被移动到页面的底部。这会让你的网页加载速度更快。</p><h3 id="使JavaScript和CSS在外部"><a href="#使JavaScript和CSS在外部" class="headerlink" title="使JavaScript和CSS在外部"></a>使JavaScript和CSS在外部</h3><p>许多这些性能规则涉及如何管理外部组件。但是，在出现这些问题之前，您应该提出一个更基本的问题：JavaScript和CSS应该包含在外部文件中还是包含在页面本身中？</p><p>在现实世界中<code>使用外部文件通常会产生更快的页面</code>，因为浏览器会缓存JavaScript和CSS文件。</p><ul><li>内联的JavaScript和CSS: 减少HTTP请求数量，增加了HTML文档的大小。</li><li>JavaScript和CSS位于浏览器缓存的外部文件中：HTML文档的大小会减少，不会增加HTTP请求的数量。</li></ul><blockquote><p>关键因素是外部JavaScript和CSS组件相对于所请求HTML文档数量的缓存频率。这个因素尽管难以量化，但可以使用各种指标进行衡量。如果您的网站上的用户每个会话有多个页面浏览量，并且许多网页重复使用相同的脚本和样式表，则缓存的外部文件可能带来更大的潜在收益。</p></blockquote><p>许多网站都处于这些指标的中间。对于这些网站，最好的解决方案通常是将JavaScript和CSS作为外部文件进行部署。首选内联的唯一例外是主页，例如雅虎的首页和My Yahoo! 。每个会话只有很少（可能只有一个）页面视图的主页可能会发现内嵌JavaScript和CSS可以缩短最终用户的响应时间。</p><p>对于通常是许多页面视图中的第一个的首页，有一些技术可以利用内联提供的HTTP请求的减少以及通过使用外部文件实现的缓存优点。其中一种方法是在首页内嵌JavaScript和CSS，但在页面加载完成后动态下载外部文件。后续页面将引用应该已经在浏览器缓存中的外部文件。</p><h3 id="精简JavaScript和CSS"><a href="#精简JavaScript和CSS" class="headerlink" title="精简JavaScript和CSS"></a>精简JavaScript和CSS</h3><ul><li>在JavaScript的情况下，由于下载文件的大小减小，这提高了响应时间性能。</li><li>从代码中移除不必要的字符以减少其大小，减少加载时间。</li><li><p>减少JavaScript 文件大小的有几种手段:</p><ul><li><p>精简:去除JavaScript代码中的空格、注释等多余的字符，这种方式基本上没有什么缺点。</p></li><li><p>混淆:在精简的基础上，把函数、变量名都用较短小的字符来替换，从而达到减少文件大小的效果。</p></li><li>但是混淆会产生不少麻烦，很有可能会引入错误，虽然有利于防止逆向工程，当同时也增加了自己在线上环境调试的难度。</li><li>现在普遍的做法是发布前利用 Gulp、Grunt等自动化构建工具对资源进行压缩。</li></ul></li></ul><h3 id="删除重复的脚本"><a href="#删除重复的脚本" class="headerlink" title="删除重复的脚本"></a>删除重复的脚本</h3><p>在一个页面中包含两次相同的JavaScript文件会使性能受损。</p><p>当它发生时，通过创建不必要的HTTP请求和浪费JavaScript执行，重复脚本会损害性能。</p><p>不必要的HTTP请求发生在Internet Explorer中，但不在Firefox中。</p><p>在Internet Explorer中，如果外部脚本包含两次并且不可缓存，则会在加载页面期间生成两个HTTP请求。如果脚本可缓存，当用户重新加载页面时也会发生额外的HTTP请求。</p><p>除了生成浪费的HTTP请求之外，还会浪费多次时间评估脚本。无论脚本是否可缓存，此冗余JavaScript执行都会在Firefox和Internet Explorer中发生。</p><h3 id="最小化DOM访问"><a href="#最小化DOM访问" class="headerlink" title="最小化DOM访问"></a>最小化DOM访问</h3><p>使用JavaScript访问DOM元素很慢，所以为了获得更响应的页面，您应该：</p><ul><li>缓存对访问元素的引用</li><li>更新节点“脱机”，然后将它们添加到树中</li><li>避免使用JavaScript修复布局</li></ul><h3 id="开发智能事件处理程序"><a href="#开发智能事件处理程序" class="headerlink" title="开发智能事件处理程序"></a>开发智能事件处理程序</h3><p>有时由于过多的事件处理程序附加到DOM树的不同元素上，而这些事件处理程序过于频繁地执行，有时页面的响应速度会降低 这就是为什么使用事件授权是一个好方法。</p><p>如果在a中有10个按钮div，则只将一个事件处理程序附加到div包装器，而不是每个按钮的一个处理程序。事件冒泡，所以你可以捕捉事件并找出它起源于哪个按钮。</p><p>您也不需要等待onload事件才能开始使用DOM树进行操作。通常你需要的是你想访问的元素在树中可用。您不必等待下载所有图像。</p><p>DOMContentLoaded是您可能考虑使用而不是onload的事件.</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h3 id="优化图像"><a href="#优化图像" class="headerlink" title="优化图像"></a>优化图像</h3><ul><li><p>减少图像周围的空白。 一些开发人员使用空白的填充这是万万要不得的。裁剪图像，删除图像周围任何空白，并使用CSS来填充。</p></li><li><p>使用正确的文件格式。如果你有图标，或者没有太多颜色的图形，可以保存为GIF这种较少颜色的图形。如果你有更详细的图形，可以使用JPG文件格式，降低质量保存图像。</p></li><li>以适当的尺寸保存图像。如果您正在使用HTML和CSS来调整您的图像，那么不要这样。以期望的大小保存你的图像，从而减少文件大小。</li></ul><blockquote><p>恰当的图片格式：</p><ul><li>PNG格式几乎一直优于GIF格式，尽管某些旧版浏览器只能为PNG格式提供部分支持。</li><li>为较小或简单的图形（例如，小于10x10像素的图形或调色板小于3色的图形）以及包含动画的图片使用GIF格式。</li><li>为所有摄影风格的图片使用JPG格式。</li><li>请勿使用BMP格式或TIFF格式。</li></ul></blockquote><h3 id="优化CSS精灵"><a href="#优化CSS精灵" class="headerlink" title="优化CSS精灵"></a>优化CSS精灵</h3><p>一种网页图片应用处理方式。允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，再利用CSS的以下属性精确的定位出背景图片的位置。</p><blockquote><p>background-image<br>background- repeat<br>background-position</p></blockquote><h3 id="不要在HTML中缩放图像"><a href="#不要在HTML中缩放图像" class="headerlink" title="不要在HTML中缩放图像"></a>不要在HTML中缩放图像</h3><p>指定所有图片的宽度和高度可以加速渲染，因为省去了不必要的回流和重绘。</p><h3 id="制作favicon-icoSmall和Cacheable"><a href="#制作favicon-icoSmall和Cacheable" class="headerlink" title="制作favicon.icoSmall和Cacheable"></a>制作<code>favicon.icoSmall</code>和Cacheable</h3><p>favicon.ico是保留在服务器根目录中的映像。这是一个必要的罪恶，因为即使你不关心它，浏览器仍然会请求它，所以最好不要回应404 Not Found。</p><p>另外，由于它位于同一台服务器上，每次请求时都会发送Cookie。此图片还会干扰下载顺序，例如在IE中，当您在onload中请求额外的组件时，favicon会在这些额外的组件之前下载。</p><p>因此，要减轻拥有favicon.ico的缺点，请确保：</p><ul><li>它很小，最好在1K以下。</li><li>设置过期标题与你感觉舒适（因为你不能重命名，如果你决定改变它）。您几乎可以在将来几个月安全地设置Expires标题。您可以查看您当前的favicon.ico的最后修改日期，以做出明智的决定。</li><li>Imagemagick可以帮助您创建小型图标</li></ul><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h3 id="减小Cookie大小"><a href="#减小Cookie大小" class="headerlink" title="减小Cookie大小"></a>减小Cookie大小</h3><p>HTTP cookie由于各种原因（如身份验证和个性化）而被使用。有关cookie的信息在Web服务器和浏览器之间的HTTP标头中交换。尽可能降低cookies的大小以尽量减少对用户响应时间的影响，这一点很重要。</p><ul><li>消除不必要的cookie</li><li>尽可能降低Cookie大小，以尽量减少对用户响应时间的影响</li><li>请注意在适当的域级别设置cookie，以便其他子域不受影响</li><li>适当设置过期日期。更早的过期日期或不更早删除cookie，提高用户响应时间</li></ul><h3 id="页面内容使用无Cookie域"><a href="#页面内容使用无Cookie域" class="headerlink" title="页面内容使用无Cookie域"></a>页面内容使用无Cookie域</h3><p>当浏览器发出静态图像请求并将cookie与请求一起发送时，服务器对这些cookie没有任何用处。所以他们只是没有理由地创建网络流量。您应该确保使用无cookie请求来请求静态组件。创建一个子域，并在其中托管所有静态组件。</p><p>在无Cookie域上托管静态组件的另一个好处是，某些代理可能会拒绝缓存使用cookie请求的组件。</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h3 id="使用内容分发网络CDN"><a href="#使用内容分发网络CDN" class="headerlink" title="使用内容分发网络CDN"></a>使用内容分发网络CDN</h3><ul><li>用户与Web服务器的距离对响应时间有影响。在多个地理位置分散的服务器上部署您的内容将使您的网页从用户的角度更快加载。但是你应该从哪里开始？</li></ul><p>作为实现地理上分散的内容的第一步，不要尝试重新设计您的Web应用程序以在分布式架构中工作。根据应用程序的不同，更改体系结构可能包括艰巨的任务，例如同步会话状态和跨服务器位置复制数据库事务。尝试缩短用户与内容之间的距离可能会延迟或不能通过此应用程序体系结构步骤。</p><p>请记住，80-90％的最终用户响应时间用于下载页面中的所有组件：图像，样式表，脚本，Flash等。这是性能黄金法则。</p><p>不要从重新设计应用程序体系结构的艰巨任务开始，最好先分散您的静态内容。这不仅实现了响应时间的更大缩短，而且由于内容交付网络，这更容易实现。</p><p><code>内容传送网络（CDN）</code>是分布在多个位置的网络服务器的集合，以更高效地向用户传送内容。选择用于将内容递送给特定用户的服务器通常基于网络邻近度的度量。例如，选择网络跳数最少的服务器或响应时间最快的服务器。</p><p>一些大型互联网公司拥有自己的CDN，但使用CDN服务提供商（如Akamai Technologies，EdgeCast或level3）具有成本效益。对于创业公司和私人网站来说，CDN服务的成本可能会很高，但随着您的目标受众不断扩大并变得更加全球化，CDN是实现快速响应所必需的。</p><h3 id="添加Expires或Cache-Control标题"><a href="#添加Expires或Cache-Control标题" class="headerlink" title="添加Expires或Cache-Control标题"></a>添加Expires或<code>Cache-Control</code>标题</h3><p>这条规则有两个方面：</p><ul><li>对于静态组件：通过设置远期<code>Expires</code>标题实现“永不过期”策略</li><li>对于动态组件：使用适当的<code>Cache-Control</code>头文件来帮助浏览器提供有条件的请求</li></ul><p>网页设计越来越丰富，这意味着更多的脚本，样式表，图像和Flash在页面中。</p><p>首次访问您的页面可能需要发出多个HTTP请求，但通过使用Expires标头，可以使这些组件可缓存。这避免了后续页面浏览中不必要的HTTP请求。</p><p>过期标头最常用于图像，但它们应该用于所有组件，包括脚本，样式表和Flash组件。</p><p>浏览器（和代理）使用缓存来减少HTTP请求的数量和大小，使网页加载速度更快。<br>Web服务器使用HTTP响应中的Expires标头告诉客户端可以缓存组件的时间。</p><p>请记住，如果您使用远期未来的Expires头文件，则只要组件更改，就必须更改组件的文件名。</p><p>只有在用户已经访问过您的网站后，使用远期未来的Expires标题才会影响页面浏览。</p><p>当用户第一次访问您的网站并且浏览器的缓存为空时，它对HTTP请求的数量没有影响。</p><p>因此，这种性能改进的影响取决于用户多久访问一次带有缓冲区的页面。（一个“准备好的缓存”已经包含了页面中的所有组件。）我们在Yahoo!上测试了这一点。并发现带有引导缓存的页面浏览量为75-85％。通过使用远期未来的Expires标题，您可以增加浏览器缓存的组件数量，并在后续页面浏览中重新使用，而无需在用户的Internet连接上发送单个字节。</p><h3 id="Gzip压缩传输文件"><a href="#Gzip压缩传输文件" class="headerlink" title="Gzip压缩传输文件"></a>Gzip压缩传输文件</h3><p>通过网络传输HTTP请求和响应所需的时间可以通过前端工程师做出的决策大大减少。</p><p>确实，最终用户的带宽速度，互联网服务提供商，邻近对等交换点等是超出了开发团队的控制范围。</p><p>但还有其他一些影响响应时间的因素。</p><p>压缩通过减少HTTP响应的大小来缩短响应时间。</p><p>从HTTP / 1.1开始，Web客户端通过HTTP请求中的Accept-Encoding标头指示对压缩的支持。</p><pre><code>Accept-Encoding：gzip，deflate</code></pre><p>如果Web服务器在请求中看到该头部，则可能使用客户端列出的方法之一压缩响应。</p><p>Web服务器通过响应中的Content-Encoding标头通知Web客户端。</p><pre><code>内容编码：gzip</code></pre><blockquote><p>Gzip是目前最流行和最有效的压缩方法。它由GNU项目开发并由RFC 1952标准化。您可能会看到的唯一的其他压缩格式是压缩，但效果不太好，不太受欢迎。Gzipping通常将响应大小减少约70％。目前大约90％的互联网流量都通过声称支持gzip的浏览器。</p></blockquote><blockquote><p>浏览器和代理存在已知的问题，这些问题可能会导致浏览器期望的不匹配和接收到的有关压缩内容的不匹配。幸运的是，随着旧版浏览器的使用下降，这些边缘案例正在减少。Apache模块通过自动添加适当的Vary响应头来提供帮助。</p></blockquote><p>服务器根据文件类型选择要压缩的内容，但在决定压缩的内容时通常太有限。</p><p>大多数网站gzip他们的HTML文件。gzip脚本和样式表也是值得的，但很多网站都错过了这个机会。事实上，压缩包括XML和JSON的任何文本响应都是值得的。</p><p>图像和PDF文件不应该被压缩，因为它们已经被压缩。试图压缩它们不仅浪费CPU，而且可能会增加文件大小。</p><p>尽可能多地缩放文件类型是减少页面重量和加速用户体验的简单方法。</p><h3 id="配置ETags"><a href="#配置ETags" class="headerlink" title="配置ETags"></a>配置ETags</h3><p>实体标签（ETags）是Web服务器和浏览器用来确定浏览器缓存中的组件是否与源服务器上的组件匹配的机制。（一个“实体”是另一个词“组件”：图像，脚本，样式表等）</p><p>ETag被添加来提供一种机制来验证比上一次修改日期更灵活的实体。</p><p>ETag是唯一标识组件特定版本的字符串。唯一的格式约束是字符串被引用。原始服务器使用ETag响应头指定组件的ETag 。</p><pre><code>HTTP / 1.1 200 OKLast-Modified：Tue，2006年12月12日03:03:59 GMTETag：“10c24bc-4ab-457e1c1f”内容长度：12195</code></pre><p>之后，如果浏览器必须验证组件，它将使用If-None-Match标头将ETag传递回原始服务器。如果ETags匹配，则返回一个304状态码，在此示例中将响应减少12195字节。</p><pre><code>GET /i/yahoo.gif HTTP / 1.1主持人：us.yimg.comIf-Modified-Since：星期二，2006年12月12日03:03:59 GMTIf-None-Match：“10c24bc-4ab-457e1c1f”HTTP / 1.1 304未修改</code></pre><p>ETags的问题在于，它们通常使用属性来构建，这些属性使它们对托管站点的特定服务器是唯一的。</p><p>当浏览器从一台服务器获取原始组件并稍后尝试在另一台服务器上验证该组件时，ETags将不匹配，这种情况在使用服务器集群处理请求的网站上非常常见。</p><p>虽然给定的文件可能位于多个服务器的相同目录中，并且具有相同的文件大小，权限，时间戳等，但其inode不同于一台服务器。</p><p>IIS 5.0和6.0与ETags有类似的问题。IIS上ETags的格式是Filetimestamp:ChangeNumber。A ChangeNumber是用于跟踪IIS配置更改的计数器。ChangeNumber在网站后面的所有IIS服务器上都不可能是相同的。</p><p>最终结果是由Apache和IIS生成的ETags完全相同的组件不会从一台服务器到另一台服务器进行匹配。如果ETags不匹配，用户不会收到ETags设计的小而快的304响应; 相反，他们会得到一个正常的200响应以及组件的所有数据。</p><p>如果您只在一台服务器上托管您的网站，这不是问题。但是，如果您有多台服务器托管您的网站，并且您使用的是默认的ETag配置的Apache或IIS，那么您的用户的页面速度会变慢，您的服务器的负载会更高，消耗的带宽也会更大，高效地缓存您的内容。即使你的组件有一个遥远的将来Expires头，当用户点击重新加载或刷新时，仍然会发出条件GET请求。</p><p>如果您没有充分利用ETags提供的灵活验证模型，最好完全删除ETag。</p><p>该Last-Modified头验证基于对组件的时间戳。</p><p>删除ETag可以减少响应和后续请求中HTTP头的大小。</p><h3 id="尽早flush输出"><a href="#尽早flush输出" class="headerlink" title="尽早flush输出"></a>尽早flush输出</h3><p>当用户请求页面时，后端服务器可能需要200到500毫秒才能将HTML页面拼接在一起。在此期间，浏览器在等待数据到达时处于空闲状态。</p><p>在PHP中，你有函数flush（）。</p><p>它允许您将部分就绪的HTML响应发送到浏览器，以便浏览器可以在您的后端忙于HTML页面的其余部分时开始获取组件。好处主要出现在繁忙的后端或前端。<br>考虑刷新的好地方就在HEAD之后，因为头部的HTML通常更容易生成，并且允许您在浏览器中包含任何CSS和JavaScript文件，以便在后端仍在处理的同时开始并行读取。</p><h3 id="使用GET获取AJAX请求"><a href="#使用GET获取AJAX请求" class="headerlink" title="使用GET获取AJAX请求"></a>使用GET获取AJAX请求</h3><p>在使用时XMLHttpRequest，POST在浏览器中实现为两步：首先发送标题，然后发送数据。所以最好使用GET，它只需要一个TCP数据包发送（除非你有很多的cookie）。</p><p>IE中最大的URL长度是2K，所以如果你发送的数据超过2K，你可能无法使用GET。</p><p>一个有趣的副作用是POST没有实际发布任何数据就像GET一样。</p><p>基于HTTP规范，GET旨在用于检索信息，所以在您仅请求数据时使用GET（在语义上）是合理的，而不是将数据发送到服务器端存储。</p><h3 id="避免空图像src"><a href="#避免空图像src" class="headerlink" title="避免空图像src"></a>避免空图像src</h3><p>具有空字符串src属性的图像会发生超过一个人的预期。它以两种形式出现：</p><ul><li><code>&lt;img src =“”&gt;</code></li><li><code>var img = new Image（）;</code><br><code>img.src =“”;</code></li></ul><p>两种形式都会产生相同的效果：浏览器向您的服务器发出另一个请求</p><blockquote><p>Internet Explorer向该页面所在的目录发出请求。<br>Safari和Chrome向实际页面本身发出请求。<br>Firefox 3和更早版本的行为与Safari和Chrome相同，但版本3.5解决了此问题[错误444931]，不再发送请求。<br>当遇到空图像src时，Opera不会执行任何操作。</p></blockquote><p>为什么这种行为不好？</p><ul><li>通过发送大量意外流量来瘫痪您的服务器，特别是对于每天获得数百万页面浏览量的页面。</li><li>浪费服务器计算周期生成一个永远不会被查看的页面。</li><li>可能损坏的用户数据。如果您通过Cookie或以其他方式跟踪请求中的状态，则可能会销毁数据。即使图像请求没有返回图像，浏览器也会读取并接受所有标题，包括所有的Cookie。虽然其余的反应被抛弃，但损害可能已经完成。</li></ul><h1 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h1><h3 id="保持组件低于25K"><a href="#保持组件低于25K" class="headerlink" title="保持组件低于25K"></a>保持组件低于25K</h3><p>此限制与iPhone不会缓存大于25K的组件有关。请注意，这是未压缩的大小。这是缩小比例很重要的地方，因为gzip本身可能不够。</p><h3 id="将组件打包成多部分文档"><a href="#将组件打包成多部分文档" class="headerlink" title="将组件打包成多部分文档"></a>将组件打包成多部分文档</h3><p>将组件打包成多部分文档就像带有附件的电子邮件一样，它可以帮助您用一个HTTP请求获取多个组件（记住：HTTP请求很贵）。当你使用这种技术时，首先检查用户代理是否支持它（iPhone不支持）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小结于&quot;&gt;&lt;a href=&quot;#小结于&quot; class=&quot;headerlink&quot; title=&quot;小结于&quot;&gt;&lt;/a&gt;小结于&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://developer.yahoo.com/performance/rules.html?guccounter=1#menu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="换个角度看性能优化" scheme="https://hotkang.cn/categories/%E6%8D%A2%E4%B8%AA%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="https://hotkang.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>从浏览器请求和响应过程来谈性能优化</title>
    <link href="https://hotkang.cn/2018/%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B%E6%9D%A5%E8%B0%88%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://hotkang.cn/2018/从浏览器请求和响应过程来谈性能优化/</id>
    <published>2018-05-29T00:52:08.000Z</published>
    <updated>2018-07-19T15:35:12.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小结于"><a href="#小结于" class="headerlink" title="小结于"></a>小结于</h2><p><img src="/img/XNGC.png" alt=""></p><a id="more"></a><ul><li><p>为什么前端性能如此重要？数据显示：</p><ul><li>只有10%~20%的最终用户响应时间用来下载HTML文档，其余80%~90%时间用在下载页面中的所有组件</li><li>优化后台成本大，优化前端只需要适当遵循一些法则就会有较大的提升，低成本高收益</li></ul></li></ul><h2 id="一、浏览器预处理"><a href="#一、浏览器预处理" class="headerlink" title="一、浏览器预处理"></a>一、浏览器预处理</h2><ul><li>查询Cache：读取Cache或者发送304 请求</li></ul><h2 id="二、查询DNS"><a href="#二、查询DNS" class="headerlink" title="二、查询DNS"></a>二、查询DNS</h2><blockquote><p>DNS查找就是输入域名对服务器IP地址的查找过程。<br>DNS缓存: 浏览器DNS缓存、操作系统DNS缓存。<br>当你输入<a href="http://www.google.com的时候，浏览器会先去自身的" target="_blank" rel="noopener">www.google.com的时候，浏览器会先去自身的</a> <code>DNS缓存</code> 里面查找有没有google服务器的IP地址;如果找不到则继续到 <code>操作系统的DNS缓存</code> 查找;如果浏览器在这两个容器都没有找到google的IP地址记录，则会向广域域名体系查找。</p></blockquote><h3 id="1-优化规则-减少DNS查找"><a href="#1-优化规则-减少DNS查找" class="headerlink" title="1. 优化规则 - 减少DNS查找"></a><code>1. 优化规则 - 减少DNS查找</code></h3><ul><li>方法1：使用DNS缓存<br>浏览器DNS缓存 | 计算机DNS缓存 | 服务器DNS缓存（TTL）</li></ul><ul><li><p>方法2：使用Keep-Alive特性<br>当客户端的DNS缓存为空时，DNS查找的数量与Web页面中唯一主机名的数量相等。减少唯一主机名的数量就可以减少DNS查找的数量。</p></li><li><p>方法3：较少的域名来减少DNS查找（2-4个主机）</p></li><li><p>方法4：使用第三方DNS域名解析加速服务<br>国内的一款免费DNS加速服务DNSPOD；</p></li></ul><h2 id="三、建立连接"><a href="#三、建立连接" class="headerlink" title="三、建立连接"></a>三、建立连接</h2><blockquote><p>CDN是一组分布在多个不同地理位置的Web服务器，由于距离用户 物理距离比较短，所以能够更加有利于用户获取到静态资源；这种服务通常需要购买，也有一些免费、通用的CDN可使用，国内的可以使用BootCDN。</p></blockquote><h3 id="2-优化规则-–-使用内容分发网络（CDN）"><a href="#2-优化规则-–-使用内容分发网络（CDN）" class="headerlink" title="2. 优化规则 – 使用内容分发网络（CDN）"></a><code>2. 优化规则 – 使用内容分发网络（CDN）</code></h3><ul><li><p>方法1：美国十大Internet网站和CDN服务提供商</p></li><li><p>方法2：页面静态化,取决于发布系统</p></li><li><p>方法3：Ctrip使用的China-Cache和网宿</p></li></ul><h3 id="3-优化规则-–-用域名划分页面内容"><a href="#3-优化规则-–-用域名划分页面内容" class="headerlink" title="3. 优化规则 – 用域名划分页面内容"></a><code>3. 优化规则 – 用域名划分页面内容</code></h3><p>按页面内容划分域名，在合适的资源服务器上存放文件</p><h2 id="四、发送请求"><a href="#四、发送请求" class="headerlink" title="四、发送请求"></a>四、发送请求</h2><blockquote><p>一般来说，使用外链的脚本和样式表更加有利。分别把外链脚本和样式表进行合并会减少HTTP请求，以节省客户端和服务器之间的通讯次数来加快页面打开速度。但是出于开发的便利，开发的时候一般会采取模块化的方式；这时候可以在部署前采用一些前端构建工具 <code>gulp</code> 、<code>grunt</code> 把这些模块文件合并起来再发布。</p></blockquote><h3 id="4-优化规则-–-减少HTTP请求"><a href="#4-优化规则-–-减少HTTP请求" class="headerlink" title="4. 优化规则 – 减少HTTP请求"></a><code>4. 优化规则 – 减少HTTP请求</code></h3><ul><li><p>图片地图</p><ul><li>假设导航栏上有五幅图片，点击每张图片都会进入一个链接，这样五张导航的图片在加载时会产生5个HTTP请求。然而，使用一个图片地图可以提高效率，这样就只需要一个HTTP请求。</li></ul><p><img src="/img/JL.png" alt=""></p><ul><li>服务器端图片地图：将所有点击提交到同一个url，同时提交用户点击的x、y坐标，服务器端根据坐标映射响应</li><li>客户端图片地图：直接将点击映射到操作</li></ul></li><li><p>内联图像</p></li><li><p>合并文件: js文件不超过7个,css文件不超过4个,各频道首页和全站首页不超过3个;</p></li><li>目前无法解决的是allyes广告的请求数。</li><li>大量的广告和产品图片可能会造成，图片请求数很大，可能造成总请求数指标吃紧，这个只能从设计上搞定，需要权衡</li><li><p>目前老页面可能css和js文件请求数可能会超标</p></li><li><p>合并样式和脚本</p></li></ul><h3 id="5-优化规则-–-优化CSS-Spirite-图片精灵"><a href="#5-优化规则-–-优化CSS-Spirite-图片精灵" class="headerlink" title="5. 优化规则 – 优化CSS Spirite(图片精灵)"></a><code>5. 优化规则 – 优化CSS Spirite(图片精灵)</code></h3><p>一种网页图片应用处理方式。允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，再利用CSS的以下属性精确的定位出背景图片的位置。</p><blockquote><p>background-image<br>background- repeat<br>background-position</p></blockquote><h3 id="6-优化规则-–-避免404错误"><a href="#6-优化规则-–-避免404错误" class="headerlink" title="6. 优化规则 – 避免404错误"></a><code>6. 优化规则 – 避免404错误</code></h3><p>HTTP请求很昂贵，因此提出HTTP请求并获得无用的响应（即404 Not Found）是完全没有必要的，会减慢用户体验没有任何好处。</p><p>有些网站有帮助的404“你的意思是X？”，这对用户体验很好，但也浪费了服务器资源（如数据库等）。</p><p>特别糟糕的是，当到外部JavaScript的链接错误并且结果是404时。首先，此下载将阻止并行下载。接下来，浏览器可能会尝试解析404响应正文，就好像它是JavaScript代码一样，试图找到可用的东西。</p><h3 id="7-优化规则-–-不要使用frameset-少使用iframe"><a href="#7-优化规则-–-不要使用frameset-少使用iframe" class="headerlink" title="7. 优化规则 – 不要使用frameset,少使用iframe"></a><code>7. 优化规则 – 不要使用frameset,少使用iframe</code></h3><p>搜索引擎不友好，即使内容为空，加载也需要时间、会阻止页面加载</p><p>Iframe允许将HTML文档插入到父文档中。了解iframe如何工作以便可以有效使用非常重要。</p><ul><li><p><code>&lt;iframe&gt;</code>优点：</p><ul><li>像徽章和广告等缓慢的第三方内容</li><li>安全沙箱</li><li>并行下载脚本</li></ul></li><li><p><code>&lt;iframe&gt;</code>缺点：</p><ul><li>即使空白也很昂贵</li><li>阻止页面载入</li><li>非语义</li></ul></li></ul><p>禁止使用iframe引入外部资源，不包括allyes广告，不包括about:blank的空页面。</p><h2 id="五、等待响应"><a href="#五、等待响应" class="headerlink" title="五、等待响应"></a>五、等待响应</h2><h3 id="8-优化规则-–-避免重定向"><a href="#8-优化规则-–-避免重定向" class="headerlink" title="8. 优化规则 – 避免重定向"></a><code>8. 优化规则 – 避免重定向</code></h3><p>以下是一个重定向的过程：</p><p>浏览器发送请求——&gt;服务器返回302——&gt;浏览器发送第二次请求—–&gt;服务器返回200—&gt;浏览器开始呈现</p><p>就是说，在重定向完毕并且HTML下载完毕之前，是没有任何东西显示给用户</p><p>要记住的重点是<code>重定向会减慢用户体验</code>。在用户和HTML文档之间插入重定向会延迟页面中的所有内容，因为可以呈现页面中的任何内容，并且在HTML文档到达之前不会开始下载任何组件。</p><p>涉及服务器负载、数据查询、服务器端缓存等</p><h2 id="六、接收数据"><a href="#六、接收数据" class="headerlink" title="六、接收数据"></a>六、接收数据</h2><h3 id="9-优化规则-–-压缩组件Gzip"><a href="#9-优化规则-–-压缩组件Gzip" class="headerlink" title="9. 优化规则 – 压缩组件Gzip"></a><code>9. 优化规则 – 压缩组件Gzip</code></h3><ul><li><p>HTML文档、脚本和样式表、XML和JSON的文本响应,压缩通常能将响应的数据量减少将近70%</p></li><li><p>大多数网站gzip他们的HTML文件。gzip脚本和样式表也是值得的，但很多网站都错过了这个机会。事实上，压缩包括XML和JSON的任何文本响应都是值得的。</p></li><li><p>图像和PDF文件不应该被压缩，因为它们已经被压缩。试图压缩它们不仅浪费CPU，而且可能会增加文件大小。</p></li></ul><h3 id="10-优化规则-–-精简Javascript和CSS文件大小"><a href="#10-优化规则-–-精简Javascript和CSS文件大小" class="headerlink" title="10. 优化规则 – 精简Javascript和CSS文件大小"></a><code>10. 优化规则 – 精简Javascript和CSS文件大小</code></h3><ul><li><p>从代码中移除不必要的字符以减少其大小，减少加载时间。</p></li><li><p>减少JavaScript 文件大小的有几种手段:</p><ul><li><p>精简:去除JavaScript代码中的空格、注释等多余的字符，这种方式基本上没有什么缺点。</p></li><li><p>混淆:在精简的基础上，把函数、变量名都用较短小的字符来替换，从而达到减少文件大小的效果。</p></li><li>但是混淆会产生不少麻烦，很有可能会引入错误，虽然有利于防止逆向工程，当同时也增加了自己在线上环境调试的难度。</li><li>现在普遍的做法是发布前利用 Gulp、Grunt等自动化构建工具对资源进行压缩。</li></ul></li></ul><h3 id="11-优化规则-–-尽量缩减页面大小"><a href="#11-优化规则-–-尽量缩减页面大小" class="headerlink" title="11. 优化规则 – 尽量缩减页面大小"></a><code>11. 优化规则 – 尽量缩减页面大小</code></h3><ul><li><p>页面必须小于150K(不含图片）</p></li><li><p>静态文件是否gzip</p></li><li>图片是否压缩优化过</li></ul><h2 id="七、读取Cache"><a href="#七、读取Cache" class="headerlink" title="七、读取Cache"></a>七、读取Cache</h2><h3 id="12-优化规则-–-添加-Expires-头或-Cache-Control"><a href="#12-优化规则-–-添加-Expires-头或-Cache-Control" class="headerlink" title="12. 优化规则 – 添加 Expires 头或 Cache-Control"></a><code>12. 优化规则 – 添加 Expires 头或 Cache-Control</code></h3><ul><li><p>Expires头是用来告诉浏览器该响应的有效期，可以理解为该资源的“保质期”，在期限内可以使用该资源的缓存不需要重新请求。</p></li><li><p>由于浏览器与服务器存在时钟同步问题，HTTP1.2.1还添加了Cache-Control和max-age来弥补Expires头的不足。</p></li><li>通常用于脚本、样式表、图片等静态资源。</li></ul><p>使用这种策略可能会遇到一个问题是，开发者可能想要在资源过期前这段时间更新它们。</p><p>这时候，由于浏览器的缓存还没失效，这就需要通过更改文件名来令静态资源 强制失效。有很多种方式给静态资源打上版本号，可以一本正经地打上数字版本号，根据内容生成哈希码也行，甚至有人用π来给自己的资源打版本号.</p><p>应用于不经常变化的组件，包括脚本、样式表、Flash组件、图片</p><h3 id="13-优化规则-–-使用外链JavaScript和CSS"><a href="#13-优化规则-–-使用外链JavaScript和CSS" class="headerlink" title="13. 优化规则 – 使用外链JavaScript和CSS"></a><code>13. 优化规则 – 使用外链JavaScript和CSS</code></h3><ul><li>尽可能 使用外链JavaScript和CSS，因为我们目前大部分avaScript和CSS都做了Gzip和缓存技术，可以充分利用。</li></ul><ul><li><p>使用外链样式和脚本优点有：</p><ul><li>可以被浏览器缓存起来；</li><li>组件可重用</li><li>可模块化；</li><li>能够被构建（合并压缩打版本）</li></ul></li><li><p>内联的JavaScript和CSS: 减少HTTP请求数量，增加了HTML文档的大小。</p></li><li>JavaScript和CSS位于浏览器：缓存的外部文件中：HTML文档的大小会减少，不会增加HTTP请求的数量。</li></ul><blockquote><p>关键因素是外部JavaScript和CSS组件相对于所请求HTML文档数量的缓存频率。这个因素尽管难以量化，但可以使用各种指标进行衡量。如果您的网站上的用户每个会话有多个页面浏览量，并且许多网页重复使用相同的脚本和样式表，则缓存的外部文件可能带来更大的潜在收益。</p></blockquote><h2 id="八、处理元素"><a href="#八、处理元素" class="headerlink" title="八、处理元素"></a>八、处理元素</h2><p>不要对image和pdf等二进制文件进行gzip压缩</p><h2 id="九、渲染元素"><a href="#九、渲染元素" class="headerlink" title="九、渲染元素"></a>九、渲染元素</h2><h3 id="14-优化规则-–-将样式表放在顶部"><a href="#14-优化规则-–-将样式表放在顶部" class="headerlink" title="14. 优化规则 – 将样式表放在顶部"></a><code>14. 优化规则 – 将样式表放在顶部</code></h3><ul><li><p>样式表放在底部时，浏览器会延迟显示任何可视化组件(使用 CSS 的@import 等同于把想要加载的样式放在底部，所以不建议使用。)</p></li><li><p>对于浏览器的渲染机制，本书并没有过多提及，只是对现象做出了描述以及提供了解决办法.</p></li><li><p>如果样式表仍然在加载，构建呈现树就是一种浪费，因为在所有样式表 加载并解析完毕 之前无需绘制任何东西。因为在样式表准备好之前显示内容会遇到 FOUC（无样式内容的闪烁，Flash of Unstyled Content）问题。</p></li><li>样式表不在顶部中，当遇到样式时，浏览器就会阻止页面呈现，等待样式表下载完毕。如果把样式表放在底部，在 IE 中还会产生白屏现象。</li><li>总之，把样式表放进就能避免这些问题。</li></ul><h3 id="15-优化规则-–-建议将脚本放在底部"><a href="#15-优化规则-–-建议将脚本放在底部" class="headerlink" title="15. 优化规则 – 建议将脚本放在底部"></a><code>15. 优化规则 – 建议将脚本放在底部</code></h3><p>一般浏览器可以允许并行下载，取决于主机个数、带宽等（默认情况下，IE是2个而FF是8个）下载脚本时并行下载实际上是被禁用的。</p><ul><li>脚本对页面的影响是：<ul><li>阻塞对其后面内容的呈现</li><li>阻塞后面组件的下载</li><li>浏览器会在下载脚本的时候阻塞并行下载，因为需要确保脚本能够顺序执行。<blockquote><p>但是，实际开发中有时候很难完全遵守这条准则，那只能把能够放在最后的都放在最后。</p></blockquote></li></ul></li></ul><h3 id="16-优化规则-–-移除重复脚本"><a href="#16-优化规则-–-移除重复脚本" class="headerlink" title="16. 优化规则 – 移除重复脚本"></a><code>16. 优化规则 – 移除重复脚本</code></h3><p>必须为0，重复的脚本对增加HTTP 请求次数和脚本执行的时间。</p><h3 id="17-优化规则-–-避免CSS表达式"><a href="#17-优化规则-–-避免CSS表达式" class="headerlink" title="17. 优化规则 – 避免CSS表达式"></a><code>17. 优化规则 – 避免CSS表达式</code></h3><p>使用CSS 的expression()通常会造成多次运算。影响浏览器渲染时间。实际上，需要用到CSS表达式的地方，通常能够找到其他替代方案，所以避免使用CSS表达式。</p><h3 id="18-优化规则-–-优化图像"><a href="#18-优化规则-–-优化图像" class="headerlink" title="18. 优化规则 – 优化图像"></a><code>18. 优化规则 – 优化图像</code></h3><ul><li><p>尽量使用GIF和PNG</p></li><li><p>尽量使用png/gif格式的图片，png的图片优先，但是必须注意如要兼容IE6，则png使用一定要注意透明问题。</p></li><li><p>图片在使用前一定要先用工具压缩优化（png、jpg）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小结于&quot;&gt;&lt;a href=&quot;#小结于&quot; class=&quot;headerlink&quot; title=&quot;小结于&quot;&gt;&lt;/a&gt;小结于&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/XNGC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="换个角度看性能优化" scheme="https://hotkang.cn/categories/%E6%8D%A2%E4%B8%AA%E8%A7%92%E5%BA%A6%E7%9C%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="https://hotkang.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
